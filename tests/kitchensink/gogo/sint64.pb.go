// Code generated by protoc-gen-gogo.
// source: sint64.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SInt64 struct {
	None      int64 `protobuf:"zigzag64,1,opt,name=none,proto3" json:"none,omitempty"`
	Lt        int64 `protobuf:"zigzag64,2,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte       int64 `protobuf:"zigzag64,3,opt,name=lte,proto3" json:"lte,omitempty"`
	Gt        int64 `protobuf:"zigzag64,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte       int64 `protobuf:"zigzag64,5,opt,name=gte,proto3" json:"gte,omitempty"`
	LtGt      int64 `protobuf:"zigzag64,6,opt,name=lt_gt,json=ltGt,proto3" json:"lt_gt,omitempty"`
	LtGte     int64 `protobuf:"zigzag64,7,opt,name=lt_gte,json=ltGte,proto3" json:"lt_gte,omitempty"`
	LteGt     int64 `protobuf:"zigzag64,8,opt,name=lte_gt,json=lteGt,proto3" json:"lte_gt,omitempty"`
	LteGte    int64 `protobuf:"zigzag64,9,opt,name=lte_gte,json=lteGte,proto3" json:"lte_gte,omitempty"`
	LtGtInv   int64 `protobuf:"zigzag64,10,opt,name=lt_gt_inv,json=ltGtInv,proto3" json:"lt_gt_inv,omitempty"`
	LtGteInv  int64 `protobuf:"zigzag64,11,opt,name=lt_gte_inv,json=ltGteInv,proto3" json:"lt_gte_inv,omitempty"`
	LteGtInv  int64 `protobuf:"zigzag64,12,opt,name=lte_gt_inv,json=lteGtInv,proto3" json:"lte_gt_inv,omitempty"`
	LteGteInv int64 `protobuf:"zigzag64,13,opt,name=lte_gte_inv,json=lteGteInv,proto3" json:"lte_gte_inv,omitempty"`
	In        int64 `protobuf:"zigzag64,14,opt,name=in,proto3" json:"in,omitempty"`
	NotIn     int64 `protobuf:"zigzag64,15,opt,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	Const     int64 `protobuf:"zigzag64,16,opt,name=const,proto3" json:"const,omitempty"`
}

func (m *SInt64) Reset()                    { *m = SInt64{} }
func (m *SInt64) String() string            { return proto.CompactTextString(m) }
func (*SInt64) ProtoMessage()               {}
func (*SInt64) Descriptor() ([]byte, []int) { return fileDescriptorSint64, []int{0} }

func (m *SInt64) GetNone() int64 {
	if m != nil {
		return m.None
	}
	return 0
}

func (m *SInt64) GetLt() int64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *SInt64) GetLte() int64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *SInt64) GetGt() int64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *SInt64) GetGte() int64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *SInt64) GetLtGt() int64 {
	if m != nil {
		return m.LtGt
	}
	return 0
}

func (m *SInt64) GetLtGte() int64 {
	if m != nil {
		return m.LtGte
	}
	return 0
}

func (m *SInt64) GetLteGt() int64 {
	if m != nil {
		return m.LteGt
	}
	return 0
}

func (m *SInt64) GetLteGte() int64 {
	if m != nil {
		return m.LteGte
	}
	return 0
}

func (m *SInt64) GetLtGtInv() int64 {
	if m != nil {
		return m.LtGtInv
	}
	return 0
}

func (m *SInt64) GetLtGteInv() int64 {
	if m != nil {
		return m.LtGteInv
	}
	return 0
}

func (m *SInt64) GetLteGtInv() int64 {
	if m != nil {
		return m.LteGtInv
	}
	return 0
}

func (m *SInt64) GetLteGteInv() int64 {
	if m != nil {
		return m.LteGteInv
	}
	return 0
}

func (m *SInt64) GetIn() int64 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *SInt64) GetNotIn() int64 {
	if m != nil {
		return m.NotIn
	}
	return 0
}

func (m *SInt64) GetConst() int64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func init() {
	proto.RegisterType((*SInt64)(nil), "tests.kitchensink.SInt64")
}

func init() { proto.RegisterFile("sint64.proto", fileDescriptorSint64) }

var fileDescriptorSint64 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd2, 0x41, 0x4b, 0xe3, 0x50,
	0x10, 0x07, 0x70, 0x9a, 0x26, 0x69, 0x32, 0xed, 0xee, 0x76, 0x1f, 0x85, 0x9d, 0xb5, 0xa0, 0xa1,
	0x08, 0x46, 0x84, 0x5a, 0xaa, 0x48, 0x0f, 0x9e, 0x7a, 0xb0, 0xf4, 0x26, 0xe3, 0xcd, 0x4b, 0xa9,
	0xed, 0x23, 0x86, 0x86, 0x17, 0x31, 0x43, 0x3f, 0x94, 0x1f, 0xc1, 0x93, 0x5f, 0xc7, 0x6f, 0x21,
	0xf3, 0x62, 0x85, 0x97, 0xdb, 0x63, 0xe6, 0x37, 0xf3, 0x1f, 0xda, 0x40, 0xaf, 0xca, 0x0d, 0xdf,
	0x5c, 0x8f, 0x5f, 0x5e, 0x4b, 0x2e, 0xd5, 0x5f, 0xd6, 0x15, 0x57, 0xe3, 0x5d, 0xce, 0x9b, 0x67,
	0x6d, 0xaa, 0xdc, 0xec, 0x8e, 0xfe, 0xed, 0xd7, 0x45, 0xbe, 0x5d, 0xb3, 0xbe, 0x3c, 0x3c, 0x6a,
	0x3b, 0x7a, 0xf3, 0x21, 0x7c, 0x58, 0xca, 0xb0, 0x52, 0xe0, 0x9b, 0xd2, 0x68, 0x6c, 0x25, 0xad,
	0x54, 0x91, 0x7d, 0xab, 0xff, 0xe0, 0x15, 0x8c, 0x9e, 0x54, 0xe6, 0xf1, 0xfb, 0xe7, 0x47, 0xdb,
	0x9f, 0x7b, 0x7d, 0x20, 0xaf, 0x60, 0x35, 0x84, 0x76, 0xc1, 0x1a, 0xdb, 0x4e, 0x0f, 0x81, 0xa4,
	0x2a, 0x73, 0x19, 0xa3, 0xef, 0xf4, 0x12, 0x20, 0x2f, 0xb3, 0x73, 0x19, 0x6b, 0x0c, 0x9c, 0x5e,
	0x0a, 0x24, 0x55, 0x95, 0x40, 0x50, 0xf0, 0x2a, 0x63, 0x0c, 0x6d, 0xbb, 0x2b, 0xed, 0x70, 0xee,
	0xf7, 0x8f, 0x93, 0x01, 0xf9, 0x05, 0x2f, 0x58, 0x8d, 0x20, 0xb4, 0x42, 0x63, 0xa7, 0x41, 0xd2,
	0x01, 0x05, 0x42, 0x74, 0x6d, 0xb4, 0xac, 0x89, 0x1c, 0x83, 0xb2, 0x26, 0x28, 0x58, 0x2f, 0x58,
	0x9d, 0x42, 0xa7, 0x36, 0x1a, 0xe3, 0x06, 0x4a, 0x07, 0x14, 0x5a, 0xa4, 0xd5, 0x19, 0xc4, 0x36,
	0x6d, 0x95, 0x9b, 0x3d, 0x82, 0x1b, 0x98, 0x26, 0x53, 0xea, 0x48, 0xe0, 0xd2, 0xec, 0xd5, 0x39,
	0x40, 0x7d, 0x96, 0x95, 0xdd, 0x86, 0x4c, 0xa7, 0x14, 0xd9, 0xd3, 0x7e, 0xa8, 0x3e, 0x2c, 0xed,
	0xb9, 0xe1, 0xb2, 0x34, 0xb2, 0xe1, 0x42, 0x2f, 0xa0, 0xfb, 0x7d, 0xa4, 0xb5, 0xbf, 0x1a, 0x36,
	0x9d, 0x52, 0x5c, 0x1f, 0x2a, 0x78, 0x08, 0x5e, 0x6e, 0xf0, 0xb7, 0x63, 0x26, 0xb7, 0x93, 0x3b,
	0xf2, 0x72, 0x23, 0x3f, 0x89, 0x29, 0x25, 0x11, 0xff, 0x38, 0x60, 0x76, 0x3f, 0x7b, 0xa4, 0xc0,
	0x94, 0xbc, 0x34, 0xea, 0x04, 0x82, 0x4d, 0x69, 0x2a, 0xc6, 0xbe, 0xf3, 0xdf, 0x44, 0x5b, 0xaa,
	0xeb, 0x4f, 0xa1, 0xfd, 0x66, 0xae, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x80, 0x2e, 0x4d, 0xcf,
	0x6f, 0x02, 0x00, 0x00,
}
