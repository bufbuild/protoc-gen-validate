// Code generated by protoc-gen-validate
// source: bytes.proto
// DO NOT EDIT!!!

package tests_kitchensink

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)

	_ = types.DynamicAny{}
)

// Validate checks the field values on Bytes with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Bytes) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for None

	if len(m.GetMin()) < 3 {
		return BytesValidationError{
			Field:  "Min",
			Reason: "value length must be at least 3 bytes",
		}
	}

	if len(m.GetMax()) > 10 {
		return BytesValidationError{
			Field:  "Max",
			Reason: "value length must be at most 10 bytes",
		}
	}

	if l := len(m.GetMinMax()); l < 3 || l > 10 {
		return BytesValidationError{
			Field:  "MinMax",
			Reason: "value length must be between 3 and 10 bytes, inclusive",
		}
	}

	if len(m.GetEqLen()) != 5 {
		return BytesValidationError{
			Field:  "EqLen",
			Reason: "value length must be 5 bytes",
		}
	}

	if !_Bytes_Pattern_Pattern.Match(m.GetPattern()) {
		return BytesValidationError{
			Field:  "Pattern",
			Reason: "value does not match regex pattern \"foo+(ba+r)?\"",
		}
	}

	if !bytes.HasPrefix(m.GetPrefix(), []uint8{0x99}) {
		return BytesValidationError{
			Field:  "Prefix",
			Reason: "value does not have prefix \"\\x99\"",
		}
	}

	if !bytes.HasSuffix(m.GetSuffix(), []uint8{0x62, 0x75, 0x7A, 0x7A}) {
		return BytesValidationError{
			Field:  "Suffix",
			Reason: "value does not have suffix \"\\x62\\x75\\x7A\\x7A\"",
		}
	}

	if !bytes.Contains(m.GetContains(), []uint8{0x62, 0x61, 0x7A}) {
		return BytesValidationError{
			Field:  "Contains",
			Reason: "value does not contain \"\\x62\\x61\\x7A\"",
		}
	}

	if _, ok := _Bytes_In_InLookup[string(m.GetIn())]; !ok {
		return BytesValidationError{
			Field:  "In",
			Reason: "value must be in list [[102 111 111] [98 97 114] [98 97 122]]",
		}
	}

	if _, ok := _Bytes_NotIn_NotInLookup[string(m.GetNotIn())]; ok {
		return BytesValidationError{
			Field:  "NotIn",
			Reason: "value must not be in list [[102 105 122 122] [98 117 122 122]]",
		}
	}

	if !bytes.Equal(m.GetConst(), []uint8{0x66, 0x6F, 0x6F, 0x62, 0x61, 0x72}) {
		return BytesValidationError{
			Field:  "Const",
			Reason: "value must equal [102 111 111 98 97 114]",
		}
	}

	if ip := net.IP(m.GetIp()); ip.To16() == nil {
		return BytesValidationError{
			Field:  "Ip",
			Reason: "value must be a valid IP address",
		}
	}

	if ip := net.IP(m.GetIpV4()); ip.To4() == nil {
		return BytesValidationError{
			Field:  "IpV4",
			Reason: "value must be a valid IPv4 address",
		}
	}

	if ip := net.IP(m.GetIpV6()); ip.To16() == nil || ip.To4() != nil {
		return BytesValidationError{
			Field:  "IpV6",
			Reason: "value must be a valid IPv6 address",
		}
	}

	return nil
}

// BytesValidationError is the validation error returned by Bytes.Validate if
// the designated constraints aren't met.
type BytesValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e BytesValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytes.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = BytesValidationError{}

var _Bytes_Pattern_Pattern = regexp.MustCompile("foo+(ba+r)?")

var _Bytes_In_InLookup = map[string]struct{}{
	"\x66\x6F\x6F": {},
	"\x62\x61\x72": {},
	"\x62\x61\x7A": {},
}

var _Bytes_NotIn_NotInLookup = map[string]struct{}{
	"\x66\x69\x7A\x7A": {},
	"\x62\x75\x7A\x7A": {},
}
