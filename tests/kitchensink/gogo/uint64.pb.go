// Code generated by protoc-gen-gogo.
// source: uint64.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type UInt64 struct {
	None      uint64 `protobuf:"varint,1,opt,name=none,proto3" json:"none,omitempty"`
	Lt        uint64 `protobuf:"varint,2,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte       uint64 `protobuf:"varint,3,opt,name=lte,proto3" json:"lte,omitempty"`
	Gt        uint64 `protobuf:"varint,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte       uint64 `protobuf:"varint,5,opt,name=gte,proto3" json:"gte,omitempty"`
	LtGt      uint64 `protobuf:"varint,6,opt,name=lt_gt,json=ltGt,proto3" json:"lt_gt,omitempty"`
	LtGte     uint64 `protobuf:"varint,7,opt,name=lt_gte,json=ltGte,proto3" json:"lt_gte,omitempty"`
	LteGt     uint64 `protobuf:"varint,8,opt,name=lte_gt,json=lteGt,proto3" json:"lte_gt,omitempty"`
	LteGte    uint64 `protobuf:"varint,9,opt,name=lte_gte,json=lteGte,proto3" json:"lte_gte,omitempty"`
	LtGtInv   uint64 `protobuf:"varint,10,opt,name=lt_gt_inv,json=ltGtInv,proto3" json:"lt_gt_inv,omitempty"`
	LtGteInv  uint64 `protobuf:"varint,11,opt,name=lt_gte_inv,json=ltGteInv,proto3" json:"lt_gte_inv,omitempty"`
	LteGtInv  uint64 `protobuf:"varint,12,opt,name=lte_gt_inv,json=lteGtInv,proto3" json:"lte_gt_inv,omitempty"`
	LteGteInv uint64 `protobuf:"varint,13,opt,name=lte_gte_inv,json=lteGteInv,proto3" json:"lte_gte_inv,omitempty"`
	In        uint64 `protobuf:"varint,14,opt,name=in,proto3" json:"in,omitempty"`
	NotIn     uint64 `protobuf:"varint,15,opt,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	Const     uint64 `protobuf:"varint,16,opt,name=const,proto3" json:"const,omitempty"`
}

func (m *UInt64) Reset()                    { *m = UInt64{} }
func (m *UInt64) String() string            { return proto.CompactTextString(m) }
func (*UInt64) ProtoMessage()               {}
func (*UInt64) Descriptor() ([]byte, []int) { return fileDescriptorUint64, []int{0} }

func (m *UInt64) GetNone() uint64 {
	if m != nil {
		return m.None
	}
	return 0
}

func (m *UInt64) GetLt() uint64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *UInt64) GetLte() uint64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *UInt64) GetGt() uint64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *UInt64) GetGte() uint64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *UInt64) GetLtGt() uint64 {
	if m != nil {
		return m.LtGt
	}
	return 0
}

func (m *UInt64) GetLtGte() uint64 {
	if m != nil {
		return m.LtGte
	}
	return 0
}

func (m *UInt64) GetLteGt() uint64 {
	if m != nil {
		return m.LteGt
	}
	return 0
}

func (m *UInt64) GetLteGte() uint64 {
	if m != nil {
		return m.LteGte
	}
	return 0
}

func (m *UInt64) GetLtGtInv() uint64 {
	if m != nil {
		return m.LtGtInv
	}
	return 0
}

func (m *UInt64) GetLtGteInv() uint64 {
	if m != nil {
		return m.LtGteInv
	}
	return 0
}

func (m *UInt64) GetLteGtInv() uint64 {
	if m != nil {
		return m.LteGtInv
	}
	return 0
}

func (m *UInt64) GetLteGteInv() uint64 {
	if m != nil {
		return m.LteGteInv
	}
	return 0
}

func (m *UInt64) GetIn() uint64 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *UInt64) GetNotIn() uint64 {
	if m != nil {
		return m.NotIn
	}
	return 0
}

func (m *UInt64) GetConst() uint64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func init() {
	proto.RegisterType((*UInt64)(nil), "tests.kitchensink.UInt64")
}

func init() { proto.RegisterFile("uint64.proto", fileDescriptorUint64) }

var fileDescriptorUint64 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd2, 0x41, 0x4b, 0xeb, 0x40,
	0x10, 0x07, 0x70, 0x9a, 0x66, 0xd3, 0x64, 0xda, 0xf7, 0xda, 0xb7, 0x3c, 0x78, 0x9b, 0x57, 0xd0,
	0x50, 0x05, 0x23, 0x62, 0x2d, 0x55, 0xa4, 0x67, 0x2f, 0xa5, 0xd7, 0x01, 0xcf, 0xa5, 0xd6, 0x25,
	0x86, 0x2e, 0x1b, 0x31, 0x63, 0x3f, 0x94, 0x1f, 0xc1, 0x93, 0x5f, 0xc7, 0x6f, 0x21, 0xb3, 0xb1,
	0xc2, 0xe6, 0xb6, 0xcc, 0xfc, 0x66, 0xfe, 0x43, 0x1b, 0x18, 0xbc, 0x96, 0x96, 0x6e, 0x6f, 0xa6,
	0xcf, 0x2f, 0x15, 0x55, 0xf2, 0x0f, 0xe9, 0x9a, 0xea, 0xe9, 0xae, 0xa4, 0xed, 0x93, 0xb6, 0x75,
	0x69, 0x77, 0xff, 0xff, 0xed, 0x37, 0xa6, 0x7c, 0xdc, 0x90, 0xbe, 0x3a, 0x3c, 0x1a, 0x3b, 0x79,
	0x0b, 0x21, 0xba, 0x5f, 0xf1, 0xb0, 0x94, 0x10, 0xda, 0xca, 0x6a, 0xd5, 0xc9, 0x3a, 0x79, 0x88,
	0xee, 0x2d, 0x53, 0x08, 0x0c, 0xa9, 0x80, 0x2b, 0x77, 0xc9, 0xfb, 0xe7, 0x47, 0x37, 0x9c, 0x07,
	0x23, 0x81, 0x81, 0x21, 0x39, 0x86, 0xae, 0x21, 0xad, 0xba, 0x5e, 0x4f, 0x09, 0xe4, 0x2a, 0xcf,
	0x15, 0xa4, 0x42, 0xaf, 0x97, 0x09, 0x0c, 0x0a, 0x37, 0x57, 0x90, 0x56, 0xc2, 0xeb, 0xe5, 0x02,
	0xb9, 0x2a, 0x33, 0x10, 0x86, 0xd6, 0x05, 0xa9, 0xc8, 0xb5, 0xfb, 0xdc, 0x8e, 0xe6, 0xe1, 0x68,
	0x98, 0x01, 0x86, 0x86, 0x96, 0x24, 0x27, 0x10, 0x39, 0xa1, 0x55, 0xaf, 0x45, 0x72, 0x40, 0xc1,
	0x44, 0x37, 0x46, 0xf3, 0x9a, 0xd8, 0x33, 0x8a, 0xd7, 0x08, 0x43, 0x7a, 0x49, 0xf2, 0x14, 0x7a,
	0x8d, 0xd1, 0x2a, 0x69, 0xa1, 0x1c, 0x30, 0x72, 0x48, 0xcb, 0x33, 0x48, 0x5c, 0xda, 0xba, 0xb4,
	0x7b, 0x05, 0x7e, 0xe0, 0xdf, 0x2c, 0xc5, 0x1e, 0x07, 0xae, 0xec, 0x5e, 0x9e, 0x03, 0x34, 0x67,
	0x39, 0xd9, 0x6f, 0xc9, 0x3c, 0xc5, 0xd8, 0x9d, 0xf6, 0x43, 0xf5, 0x61, 0xe9, 0xc0, 0x0f, 0xe7,
	0xa5, 0xb1, 0x0b, 0x67, 0x7a, 0x01, 0xfd, 0xef, 0x23, 0x9d, 0xfd, 0xd5, 0xb2, 0x79, 0x8a, 0x49,
	0x73, 0x28, 0xe3, 0x31, 0x04, 0xa5, 0x55, 0xbf, 0x3d, 0x33, 0x3b, 0x9a, 0x9d, 0x60, 0x50, 0x5a,
	0xfe, 0x49, 0x6c, 0xc5, 0x89, 0x6a, 0xe8, 0x81, 0x45, 0xbe, 0xb8, 0x44, 0x61, 0x2b, 0x5a, 0x59,
	0x79, 0x0c, 0x62, 0x5b, 0xd9, 0x9a, 0xd4, 0xc8, 0xfb, 0x6f, 0xe2, 0x39, 0x36, 0xf5, 0x87, 0xc8,
	0x7d, 0x33, 0xd7, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x97, 0x81, 0xf4, 0x9d, 0x6f, 0x02, 0x00,
	0x00,
}
