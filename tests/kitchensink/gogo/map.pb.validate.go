// Code generated by protoc-gen-validate
// source: map.proto
// DO NOT EDIT!!!

package tests_kitchensink

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)

	_ = types.DynamicAny{}
)

// Validate checks the field values on Map with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Map) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for None

	if len(m.GetMinPairs()) < 1 {
		return MapValidationError{
			Field:  "MinPairs",
			Reason: "value must contain at least 1 pair(s)",
		}
	}

	if len(m.GetMaxPairs()) > 2 {
		return MapValidationError{
			Field:  "MaxPairs",
			Reason: "value must contain no more than 2 pair(s)",
		}
	}

	if l := len(m.GetMinMaxPairs()); l < 3 || l > 4 {
		return MapValidationError{
			Field:  "MinMaxPairs",
			Reason: "value must contain between 3 and 4 pairs, inclusive",
		}
	}

	if len(m.GetEqPairs()) != 5 {
		return MapValidationError{
			Field:  "EqPairs",
			Reason: "value must contain exactly 5 pair(s)",
		}
	}

	for key, val := range m.GetNoSparse() {
		_ = val

		if val == nil {
			return MapValidationError{
				Field:  fmt.Sprintf("NoSparse[%v]", key),
				Reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		// no validation rules for NoSparse[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MapValidationError{
					Field:  fmt.Sprintf("NoSparse[%v]", key),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	for key, val := range m.GetValueRules() {
		_ = val

		// no validation rules for ValueRules[key]

		if _, ok := Map_Enum_name[int32(val)]; !ok {
			return MapValidationError{
				Field:  fmt.Sprintf("ValueRules[%v]", key),
				Reason: "value must be one of the defined enum values",
			}
		}

	}

	for key, val := range m.GetKeyRules() {
		_ = val

		if val := key; val < 200 || val >= 600 {
			return MapValidationError{
				Field:  fmt.Sprintf("KeyRules[%v]", key),
				Reason: "value must be inside range [200, 600)",
			}
		}

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MapValidationError{
					Field:  fmt.Sprintf("KeyRules[%v]", key),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	return nil
}

// MapValidationError is the validation error returned by Map.Validate if the
// designated constraints aren't met.
type MapValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e MapValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMap.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = MapValidationError{}

// Validate checks the field values on Map_Embed with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Map_Embed) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// Map_EmbedValidationError is the validation error returned by
// Map_Embed.Validate if the designated constraints aren't met.
type Map_EmbedValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e Map_EmbedValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMap_Embed.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = Map_EmbedValidationError{}
