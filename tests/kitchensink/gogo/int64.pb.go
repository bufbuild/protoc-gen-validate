// Code generated by protoc-gen-gogo.
// source: int64.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Int64 struct {
	None      int64 `protobuf:"varint,1,opt,name=none,proto3" json:"none,omitempty"`
	Lt        int64 `protobuf:"varint,2,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte       int64 `protobuf:"varint,3,opt,name=lte,proto3" json:"lte,omitempty"`
	Gt        int64 `protobuf:"varint,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte       int64 `protobuf:"varint,5,opt,name=gte,proto3" json:"gte,omitempty"`
	LtGt      int64 `protobuf:"varint,6,opt,name=lt_gt,json=ltGt,proto3" json:"lt_gt,omitempty"`
	LtGte     int64 `protobuf:"varint,7,opt,name=lt_gte,json=ltGte,proto3" json:"lt_gte,omitempty"`
	LteGt     int64 `protobuf:"varint,8,opt,name=lte_gt,json=lteGt,proto3" json:"lte_gt,omitempty"`
	LteGte    int64 `protobuf:"varint,9,opt,name=lte_gte,json=lteGte,proto3" json:"lte_gte,omitempty"`
	LtGtInv   int64 `protobuf:"varint,10,opt,name=lt_gt_inv,json=ltGtInv,proto3" json:"lt_gt_inv,omitempty"`
	LtGteInv  int64 `protobuf:"varint,11,opt,name=lt_gte_inv,json=ltGteInv,proto3" json:"lt_gte_inv,omitempty"`
	LteGtInv  int64 `protobuf:"varint,12,opt,name=lte_gt_inv,json=lteGtInv,proto3" json:"lte_gt_inv,omitempty"`
	LteGteInv int64 `protobuf:"varint,13,opt,name=lte_gte_inv,json=lteGteInv,proto3" json:"lte_gte_inv,omitempty"`
	In        int64 `protobuf:"varint,14,opt,name=in,proto3" json:"in,omitempty"`
	NotIn     int64 `protobuf:"varint,15,opt,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	Const     int64 `protobuf:"varint,16,opt,name=const,proto3" json:"const,omitempty"`
}

func (m *Int64) Reset()                    { *m = Int64{} }
func (m *Int64) String() string            { return proto.CompactTextString(m) }
func (*Int64) ProtoMessage()               {}
func (*Int64) Descriptor() ([]byte, []int) { return fileDescriptorInt64, []int{0} }

func (m *Int64) GetNone() int64 {
	if m != nil {
		return m.None
	}
	return 0
}

func (m *Int64) GetLt() int64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Int64) GetLte() int64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Int64) GetGt() int64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Int64) GetGte() int64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Int64) GetLtGt() int64 {
	if m != nil {
		return m.LtGt
	}
	return 0
}

func (m *Int64) GetLtGte() int64 {
	if m != nil {
		return m.LtGte
	}
	return 0
}

func (m *Int64) GetLteGt() int64 {
	if m != nil {
		return m.LteGt
	}
	return 0
}

func (m *Int64) GetLteGte() int64 {
	if m != nil {
		return m.LteGte
	}
	return 0
}

func (m *Int64) GetLtGtInv() int64 {
	if m != nil {
		return m.LtGtInv
	}
	return 0
}

func (m *Int64) GetLtGteInv() int64 {
	if m != nil {
		return m.LtGteInv
	}
	return 0
}

func (m *Int64) GetLteGtInv() int64 {
	if m != nil {
		return m.LteGtInv
	}
	return 0
}

func (m *Int64) GetLteGteInv() int64 {
	if m != nil {
		return m.LteGteInv
	}
	return 0
}

func (m *Int64) GetIn() int64 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *Int64) GetNotIn() int64 {
	if m != nil {
		return m.NotIn
	}
	return 0
}

func (m *Int64) GetConst() int64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func init() {
	proto.RegisterType((*Int64)(nil), "tests.kitchensink.Int64")
}
func (m *Int64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Int64) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.None != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.None))
	}
	if m.Lt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.Lt))
	}
	if m.Lte != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.Lte))
	}
	if m.Gt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.Gt))
	}
	if m.Gte != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.Gte))
	}
	if m.LtGt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.LtGt))
	}
	if m.LtGte != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.LtGte))
	}
	if m.LteGt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.LteGt))
	}
	if m.LteGte != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.LteGte))
	}
	if m.LtGtInv != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.LtGtInv))
	}
	if m.LtGteInv != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.LtGteInv))
	}
	if m.LteGtInv != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.LteGtInv))
	}
	if m.LteGteInv != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.LteGteInv))
	}
	if m.In != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.In))
	}
	if m.NotIn != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.NotIn))
	}
	if m.Const != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInt64(dAtA, i, uint64(m.Const))
	}
	return i, nil
}

func encodeFixed64Int64(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Int64(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintInt64(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Int64) Size() (n int) {
	var l int
	_ = l
	if m.None != 0 {
		n += 1 + sovInt64(uint64(m.None))
	}
	if m.Lt != 0 {
		n += 1 + sovInt64(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sovInt64(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sovInt64(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sovInt64(uint64(m.Gte))
	}
	if m.LtGt != 0 {
		n += 1 + sovInt64(uint64(m.LtGt))
	}
	if m.LtGte != 0 {
		n += 1 + sovInt64(uint64(m.LtGte))
	}
	if m.LteGt != 0 {
		n += 1 + sovInt64(uint64(m.LteGt))
	}
	if m.LteGte != 0 {
		n += 1 + sovInt64(uint64(m.LteGte))
	}
	if m.LtGtInv != 0 {
		n += 1 + sovInt64(uint64(m.LtGtInv))
	}
	if m.LtGteInv != 0 {
		n += 1 + sovInt64(uint64(m.LtGteInv))
	}
	if m.LteGtInv != 0 {
		n += 1 + sovInt64(uint64(m.LteGtInv))
	}
	if m.LteGteInv != 0 {
		n += 1 + sovInt64(uint64(m.LteGteInv))
	}
	if m.In != 0 {
		n += 1 + sovInt64(uint64(m.In))
	}
	if m.NotIn != 0 {
		n += 1 + sovInt64(uint64(m.NotIn))
	}
	if m.Const != 0 {
		n += 2 + sovInt64(uint64(m.Const))
	}
	return n
}

func sovInt64(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInt64(x uint64) (n int) {
	return sovInt64(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Int64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInt64
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			m.None = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.None |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lte |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gte |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGt", wireType)
			}
			m.LtGt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LtGt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGte", wireType)
			}
			m.LtGte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LtGte |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGt", wireType)
			}
			m.LteGt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LteGt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGte", wireType)
			}
			m.LteGte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LteGte |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGtInv", wireType)
			}
			m.LtGtInv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LtGtInv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGteInv", wireType)
			}
			m.LtGteInv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LtGteInv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGtInv", wireType)
			}
			m.LteGtInv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LteGtInv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGteInv", wireType)
			}
			m.LteGteInv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LteGteInv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			m.In = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.In |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			m.NotIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotIn |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Const |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInt64(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInt64
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInt64(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInt64
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInt64
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInt64
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInt64
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInt64(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInt64 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInt64   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("int64.proto", fileDescriptorInt64) }

var fileDescriptorInt64 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd2, 0xcd, 0x6a, 0xdb, 0x40,
	0x10, 0x07, 0x70, 0xf4, 0xb1, 0xb2, 0x34, 0x72, 0x6b, 0x77, 0x29, 0x74, 0x55, 0x83, 0x2a, 0xd4,
	0x42, 0x15, 0x42, 0x1c, 0x93, 0x84, 0xe0, 0xb3, 0x2f, 0xc6, 0xd7, 0x7d, 0x01, 0xe3, 0x38, 0x8b,
	0x22, 0x2c, 0x56, 0x21, 0x1a, 0xfc, 0x4e, 0x79, 0x85, 0x9c, 0x72, 0xcc, 0x31, 0x8f, 0x10, 0x7c,
	0xcb, 0x5b, 0x84, 0x59, 0xc5, 0x81, 0xd5, 0x6d, 0x99, 0xf9, 0xcd, 0xfc, 0x07, 0x5b, 0x10, 0x57,
	0x1a, 0xaf, 0xaf, 0xa6, 0xf7, 0x0f, 0x0d, 0x36, 0xfc, 0x07, 0xaa, 0x16, 0xdb, 0xe9, 0xae, 0xc2,
	0xed, 0x9d, 0xd2, 0x6d, 0xa5, 0x77, 0xbf, 0x7f, 0xed, 0x37, 0x75, 0x75, 0xbb, 0x41, 0x75, 0x7e,
	0x7c, 0x74, 0x36, 0x7f, 0xf4, 0x81, 0xad, 0x68, 0x96, 0x73, 0xf0, 0x75, 0xa3, 0x95, 0x70, 0x32,
	0xa7, 0xf0, 0xa4, 0x79, 0xf3, 0x04, 0xdc, 0x1a, 0x85, 0x4b, 0x95, 0x45, 0xf4, 0xf4, 0xfe, 0xec,
	0xf9, 0xb9, 0x3b, 0x66, 0xd2, 0xad, 0x91, 0x4f, 0xc0, 0xab, 0x51, 0x09, 0xcf, 0xea, 0x09, 0x26,
	0xa9, 0x4a, 0x73, 0x25, 0x0a, 0xdf, 0xea, 0x65, 0x4c, 0xba, 0xa5, 0x99, 0x2b, 0x51, 0x09, 0x66,
	0xf5, 0x0a, 0x26, 0xa9, 0xca, 0x33, 0x60, 0x35, 0xae, 0x4b, 0x14, 0x81, 0x69, 0xc7, 0xd4, 0x0e,
	0x72, 0x7f, 0x3c, 0xca, 0x40, 0xfa, 0x35, 0x2e, 0x91, 0xe7, 0x10, 0x18, 0xa1, 0xc4, 0xa0, 0x47,
	0x0a, 0x90, 0x8c, 0x88, 0xea, 0x8c, 0xa2, 0x35, 0xa1, 0x65, 0x04, 0xad, 0x61, 0x35, 0xaa, 0x25,
	0xf2, 0x7f, 0x30, 0xe8, 0x8c, 0x12, 0x51, 0x0f, 0x15, 0x20, 0x03, 0x83, 0x14, 0xff, 0x0f, 0x91,
	0x49, 0x5b, 0x57, 0x7a, 0x2f, 0xc0, 0x0e, 0xfc, 0x99, 0x25, 0x72, 0x40, 0x81, 0x2b, 0xbd, 0xe7,
	0x27, 0x00, 0xdd, 0x59, 0x46, 0xc6, 0x3d, 0x59, 0x24, 0x32, 0x34, 0xa7, 0x7d, 0x51, 0x75, 0x5c,
	0x3a, 0xb4, 0xc3, 0x69, 0x69, 0x68, 0xc2, 0x89, 0x9e, 0x42, 0xfc, 0x79, 0xa4, 0xb1, 0xdf, 0x7a,
	0xb6, 0x48, 0x64, 0xd4, 0x1d, 0x4a, 0x78, 0x02, 0x6e, 0xa5, 0xc5, 0x77, 0xcb, 0xcc, 0xd2, 0xd9,
	0x5f, 0xe9, 0x56, 0x9a, 0x7e, 0x12, 0xdd, 0x50, 0xa2, 0x18, 0x59, 0x60, 0x5e, 0xcc, 0xcf, 0x24,
	0xd3, 0x0d, 0xae, 0x34, 0xff, 0x03, 0x6c, 0xdb, 0xe8, 0x16, 0xc5, 0xd8, 0xfa, 0x6f, 0xc2, 0x0b,
	0xd9, 0xd5, 0x17, 0xc3, 0x97, 0x43, 0xea, 0xbc, 0x1e, 0x52, 0xe7, 0xed, 0x90, 0x3a, 0x37, 0x81,
	0xf9, 0x80, 0x2e, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x43, 0x32, 0x2a, 0xf6, 0x7b, 0x02, 0x00,
	0x00,
}
