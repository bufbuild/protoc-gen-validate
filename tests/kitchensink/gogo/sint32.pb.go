// Code generated by protoc-gen-gogo.
// source: sint32.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SInt32 struct {
	None      int32 `protobuf:"zigzag32,1,opt,name=none,proto3" json:"none,omitempty"`
	Lt        int32 `protobuf:"zigzag32,2,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte       int32 `protobuf:"zigzag32,3,opt,name=lte,proto3" json:"lte,omitempty"`
	Gt        int32 `protobuf:"zigzag32,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte       int32 `protobuf:"zigzag32,5,opt,name=gte,proto3" json:"gte,omitempty"`
	LtGt      int32 `protobuf:"zigzag32,6,opt,name=lt_gt,json=ltGt,proto3" json:"lt_gt,omitempty"`
	LtGte     int32 `protobuf:"zigzag32,7,opt,name=lt_gte,json=ltGte,proto3" json:"lt_gte,omitempty"`
	LteGt     int32 `protobuf:"zigzag32,8,opt,name=lte_gt,json=lteGt,proto3" json:"lte_gt,omitempty"`
	LteGte    int32 `protobuf:"zigzag32,9,opt,name=lte_gte,json=lteGte,proto3" json:"lte_gte,omitempty"`
	LtGtInv   int32 `protobuf:"zigzag32,10,opt,name=lt_gt_inv,json=ltGtInv,proto3" json:"lt_gt_inv,omitempty"`
	LtGteInv  int32 `protobuf:"zigzag32,11,opt,name=lt_gte_inv,json=ltGteInv,proto3" json:"lt_gte_inv,omitempty"`
	LteGtInv  int32 `protobuf:"zigzag32,12,opt,name=lte_gt_inv,json=lteGtInv,proto3" json:"lte_gt_inv,omitempty"`
	LteGteInv int32 `protobuf:"zigzag32,13,opt,name=lte_gte_inv,json=lteGteInv,proto3" json:"lte_gte_inv,omitempty"`
	In        int32 `protobuf:"zigzag32,14,opt,name=in,proto3" json:"in,omitempty"`
	NotIn     int32 `protobuf:"zigzag32,15,opt,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	Const     int32 `protobuf:"zigzag32,16,opt,name=const,proto3" json:"const,omitempty"`
}

func (m *SInt32) Reset()                    { *m = SInt32{} }
func (m *SInt32) String() string            { return proto.CompactTextString(m) }
func (*SInt32) ProtoMessage()               {}
func (*SInt32) Descriptor() ([]byte, []int) { return fileDescriptorSint32, []int{0} }

func (m *SInt32) GetNone() int32 {
	if m != nil {
		return m.None
	}
	return 0
}

func (m *SInt32) GetLt() int32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *SInt32) GetLte() int32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *SInt32) GetGt() int32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *SInt32) GetGte() int32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *SInt32) GetLtGt() int32 {
	if m != nil {
		return m.LtGt
	}
	return 0
}

func (m *SInt32) GetLtGte() int32 {
	if m != nil {
		return m.LtGte
	}
	return 0
}

func (m *SInt32) GetLteGt() int32 {
	if m != nil {
		return m.LteGt
	}
	return 0
}

func (m *SInt32) GetLteGte() int32 {
	if m != nil {
		return m.LteGte
	}
	return 0
}

func (m *SInt32) GetLtGtInv() int32 {
	if m != nil {
		return m.LtGtInv
	}
	return 0
}

func (m *SInt32) GetLtGteInv() int32 {
	if m != nil {
		return m.LtGteInv
	}
	return 0
}

func (m *SInt32) GetLteGtInv() int32 {
	if m != nil {
		return m.LteGtInv
	}
	return 0
}

func (m *SInt32) GetLteGteInv() int32 {
	if m != nil {
		return m.LteGteInv
	}
	return 0
}

func (m *SInt32) GetIn() int32 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *SInt32) GetNotIn() int32 {
	if m != nil {
		return m.NotIn
	}
	return 0
}

func (m *SInt32) GetConst() int32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func init() {
	proto.RegisterType((*SInt32)(nil), "tests.kitchensink.SInt32")
}
func (m *SInt32) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SInt32) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.None != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.None)<<1)^uint32((m.None>>31))))
	}
	if m.Lt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.Lt)<<1)^uint32((m.Lt>>31))))
	}
	if m.Lte != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.Lte)<<1)^uint32((m.Lte>>31))))
	}
	if m.Gt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.Gt)<<1)^uint32((m.Gt>>31))))
	}
	if m.Gte != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.Gte)<<1)^uint32((m.Gte>>31))))
	}
	if m.LtGt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.LtGt)<<1)^uint32((m.LtGt>>31))))
	}
	if m.LtGte != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.LtGte)<<1)^uint32((m.LtGte>>31))))
	}
	if m.LteGt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.LteGt)<<1)^uint32((m.LteGt>>31))))
	}
	if m.LteGte != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.LteGte)<<1)^uint32((m.LteGte>>31))))
	}
	if m.LtGtInv != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.LtGtInv)<<1)^uint32((m.LtGtInv>>31))))
	}
	if m.LtGteInv != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.LtGteInv)<<1)^uint32((m.LtGteInv>>31))))
	}
	if m.LteGtInv != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.LteGtInv)<<1)^uint32((m.LteGtInv>>31))))
	}
	if m.LteGteInv != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.LteGteInv)<<1)^uint32((m.LteGteInv>>31))))
	}
	if m.In != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.In)<<1)^uint32((m.In>>31))))
	}
	if m.NotIn != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.NotIn)<<1)^uint32((m.NotIn>>31))))
	}
	if m.Const != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSint32(dAtA, i, uint64((uint32(m.Const)<<1)^uint32((m.Const>>31))))
	}
	return i, nil
}

func encodeFixed64Sint32(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Sint32(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSint32(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SInt32) Size() (n int) {
	var l int
	_ = l
	if m.None != 0 {
		n += 1 + sozSint32(uint64(m.None))
	}
	if m.Lt != 0 {
		n += 1 + sozSint32(uint64(m.Lt))
	}
	if m.Lte != 0 {
		n += 1 + sozSint32(uint64(m.Lte))
	}
	if m.Gt != 0 {
		n += 1 + sozSint32(uint64(m.Gt))
	}
	if m.Gte != 0 {
		n += 1 + sozSint32(uint64(m.Gte))
	}
	if m.LtGt != 0 {
		n += 1 + sozSint32(uint64(m.LtGt))
	}
	if m.LtGte != 0 {
		n += 1 + sozSint32(uint64(m.LtGte))
	}
	if m.LteGt != 0 {
		n += 1 + sozSint32(uint64(m.LteGt))
	}
	if m.LteGte != 0 {
		n += 1 + sozSint32(uint64(m.LteGte))
	}
	if m.LtGtInv != 0 {
		n += 1 + sozSint32(uint64(m.LtGtInv))
	}
	if m.LtGteInv != 0 {
		n += 1 + sozSint32(uint64(m.LtGteInv))
	}
	if m.LteGtInv != 0 {
		n += 1 + sozSint32(uint64(m.LteGtInv))
	}
	if m.LteGteInv != 0 {
		n += 1 + sozSint32(uint64(m.LteGteInv))
	}
	if m.In != 0 {
		n += 1 + sozSint32(uint64(m.In))
	}
	if m.NotIn != 0 {
		n += 1 + sozSint32(uint64(m.NotIn))
	}
	if m.Const != 0 {
		n += 2 + sozSint32(uint64(m.Const))
	}
	return n
}

func sovSint32(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSint32(x uint64) (n int) {
	return sovSint32(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SInt32) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSint32
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SInt32: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SInt32: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.None = v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Lt = v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Lte = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Gt = v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Gte = v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LtGt = v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGte", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LtGte = v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGt", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LteGt = v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGte", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LteGte = v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGtInv", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LtGtInv = v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGteInv", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LtGteInv = v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGtInv", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LteGtInv = v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGteInv", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.LteGteInv = v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.In = v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.NotIn = v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Const = v
		default:
			iNdEx = preIndex
			skippy, err := skipSint32(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSint32
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSint32(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSint32
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSint32
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSint32
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSint32
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSint32(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSint32 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSint32   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sint32.proto", fileDescriptorSint32) }

var fileDescriptorSint32 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd2, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0x07, 0x70, 0x92, 0x26, 0x69, 0x32, 0xed, 0xf7, 0xd9, 0x2e, 0x05, 0x57, 0x0b, 0x31, 0x14,
	0xc1, 0x88, 0x50, 0x4b, 0x7a, 0x29, 0xc5, 0x53, 0x0f, 0x96, 0xde, 0x64, 0xbd, 0x79, 0x29, 0xb5,
	0x5d, 0x62, 0x68, 0xd8, 0x88, 0x19, 0xfa, 0x50, 0x3e, 0x82, 0x27, 0x8f, 0x1e, 0x7d, 0x04, 0xe9,
	0xcd, 0xb7, 0x90, 0xd9, 0x58, 0x61, 0x73, 0x5b, 0x66, 0x7e, 0x33, 0xff, 0xa1, 0x0d, 0xb4, 0xcb,
	0x4c, 0xe1, 0x38, 0x19, 0x3e, 0xbf, 0x14, 0x58, 0xb0, 0x2e, 0xca, 0x12, 0xcb, 0xe1, 0x36, 0xc3,
	0xf5, 0x93, 0x54, 0x65, 0xa6, 0xb6, 0xa7, 0xc7, 0xbb, 0x55, 0x9e, 0x6d, 0x56, 0x28, 0xaf, 0x0f,
	0x8f, 0xca, 0x0e, 0x5e, 0x1d, 0xf0, 0xee, 0x17, 0x34, 0xcc, 0x18, 0x38, 0xaa, 0x50, 0x92, 0x5b,
	0x91, 0x15, 0x77, 0x85, 0x7e, 0xb3, 0x13, 0xb0, 0x73, 0xe4, 0x36, 0x55, 0x66, 0xc1, 0xdb, 0xf7,
	0x7b, 0xc3, 0x99, 0xda, 0x1d, 0x10, 0x76, 0x8e, 0xac, 0x0f, 0x8d, 0x1c, 0x25, 0x6f, 0x18, 0x3d,
	0x0e, 0x82, 0xaa, 0x34, 0x97, 0x22, 0x77, 0x8c, 0x5e, 0x04, 0xc2, 0x4e, 0xf5, 0x5c, 0x8a, 0x92,
	0xbb, 0x46, 0x2f, 0x06, 0x41, 0x55, 0x16, 0x81, 0x9b, 0xe3, 0x32, 0x45, 0xee, 0xe9, 0x76, 0x8b,
	0xda, 0xde, 0xd4, 0xe9, 0x84, 0x51, 0x4f, 0x38, 0x39, 0xce, 0x91, 0x0d, 0xc0, 0xd3, 0x42, 0xf2,
	0x66, 0x8d, 0xc4, 0x3d, 0xe1, 0x12, 0x91, 0x95, 0x91, 0xb4, 0xc6, 0x37, 0x0c, 0xa7, 0x35, 0x6e,
	0x8e, 0x72, 0x8e, 0xec, 0x1c, 0x9a, 0x95, 0x91, 0x3c, 0xa8, 0xa1, 0xb8, 0x27, 0x3c, 0x8d, 0x24,
	0xbb, 0x80, 0x40, 0xa7, 0x2d, 0x33, 0xb5, 0xe3, 0x60, 0x06, 0xc6, 0x51, 0x22, 0x9a, 0x14, 0xb8,
	0x50, 0x3b, 0x76, 0x09, 0x50, 0x9d, 0xa5, 0x65, 0xab, 0x26, 0xe3, 0x44, 0xf8, 0xfa, 0xb4, 0x3f,
	0x2a, 0x0f, 0x4b, 0xdb, 0x66, 0x38, 0x2d, 0xf5, 0x75, 0x38, 0xd1, 0x2b, 0x68, 0xfd, 0x1e, 0xa9,
	0xed, 0xbf, 0x9a, 0x8d, 0x13, 0x11, 0x54, 0x87, 0x12, 0xee, 0x83, 0x9d, 0x29, 0xfe, 0xdf, 0x30,
	0xa3, 0x9b, 0xd1, 0xad, 0xb0, 0x33, 0x45, 0x3f, 0x89, 0x2a, 0x28, 0x91, 0x1f, 0x19, 0x60, 0x72,
	0x37, 0x79, 0x10, 0xae, 0x2a, 0x70, 0xa1, 0xd8, 0x19, 0xb8, 0xeb, 0x42, 0x95, 0xc8, 0x3b, 0xc6,
	0x7f, 0xe3, 0x6f, 0x44, 0x55, 0x9f, 0xb5, 0x3f, 0xf6, 0xa1, 0xf5, 0xb9, 0x0f, 0xad, 0xaf, 0x7d,
	0x68, 0x3d, 0x7a, 0xfa, 0x0b, 0x1a, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xee, 0x88, 0x68,
	0x7d, 0x02, 0x00, 0x00,
}
