// Code generated by protoc-gen-gogo.
// source: sint32.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SInt32 struct {
	None      int32 `protobuf:"zigzag32,1,opt,name=none,proto3" json:"none,omitempty"`
	Lt        int32 `protobuf:"zigzag32,2,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte       int32 `protobuf:"zigzag32,3,opt,name=lte,proto3" json:"lte,omitempty"`
	Gt        int32 `protobuf:"zigzag32,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte       int32 `protobuf:"zigzag32,5,opt,name=gte,proto3" json:"gte,omitempty"`
	LtGt      int32 `protobuf:"zigzag32,6,opt,name=lt_gt,json=ltGt,proto3" json:"lt_gt,omitempty"`
	LtGte     int32 `protobuf:"zigzag32,7,opt,name=lt_gte,json=ltGte,proto3" json:"lt_gte,omitempty"`
	LteGt     int32 `protobuf:"zigzag32,8,opt,name=lte_gt,json=lteGt,proto3" json:"lte_gt,omitempty"`
	LteGte    int32 `protobuf:"zigzag32,9,opt,name=lte_gte,json=lteGte,proto3" json:"lte_gte,omitempty"`
	LtGtInv   int32 `protobuf:"zigzag32,10,opt,name=lt_gt_inv,json=ltGtInv,proto3" json:"lt_gt_inv,omitempty"`
	LtGteInv  int32 `protobuf:"zigzag32,11,opt,name=lt_gte_inv,json=ltGteInv,proto3" json:"lt_gte_inv,omitempty"`
	LteGtInv  int32 `protobuf:"zigzag32,12,opt,name=lte_gt_inv,json=lteGtInv,proto3" json:"lte_gt_inv,omitempty"`
	LteGteInv int32 `protobuf:"zigzag32,13,opt,name=lte_gte_inv,json=lteGteInv,proto3" json:"lte_gte_inv,omitempty"`
	In        int32 `protobuf:"zigzag32,14,opt,name=in,proto3" json:"in,omitempty"`
	NotIn     int32 `protobuf:"zigzag32,15,opt,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	Const     int32 `protobuf:"zigzag32,16,opt,name=const,proto3" json:"const,omitempty"`
}

func (m *SInt32) Reset()                    { *m = SInt32{} }
func (m *SInt32) String() string            { return proto.CompactTextString(m) }
func (*SInt32) ProtoMessage()               {}
func (*SInt32) Descriptor() ([]byte, []int) { return fileDescriptorSint32, []int{0} }

func (m *SInt32) GetNone() int32 {
	if m != nil {
		return m.None
	}
	return 0
}

func (m *SInt32) GetLt() int32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *SInt32) GetLte() int32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *SInt32) GetGt() int32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *SInt32) GetGte() int32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *SInt32) GetLtGt() int32 {
	if m != nil {
		return m.LtGt
	}
	return 0
}

func (m *SInt32) GetLtGte() int32 {
	if m != nil {
		return m.LtGte
	}
	return 0
}

func (m *SInt32) GetLteGt() int32 {
	if m != nil {
		return m.LteGt
	}
	return 0
}

func (m *SInt32) GetLteGte() int32 {
	if m != nil {
		return m.LteGte
	}
	return 0
}

func (m *SInt32) GetLtGtInv() int32 {
	if m != nil {
		return m.LtGtInv
	}
	return 0
}

func (m *SInt32) GetLtGteInv() int32 {
	if m != nil {
		return m.LtGteInv
	}
	return 0
}

func (m *SInt32) GetLteGtInv() int32 {
	if m != nil {
		return m.LteGtInv
	}
	return 0
}

func (m *SInt32) GetLteGteInv() int32 {
	if m != nil {
		return m.LteGteInv
	}
	return 0
}

func (m *SInt32) GetIn() int32 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *SInt32) GetNotIn() int32 {
	if m != nil {
		return m.NotIn
	}
	return 0
}

func (m *SInt32) GetConst() int32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func init() {
	proto.RegisterType((*SInt32)(nil), "tests.kitchensink.SInt32")
}

func init() { proto.RegisterFile("sint32.proto", fileDescriptorSint32) }

var fileDescriptorSint32 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd2, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0x07, 0x70, 0x9a, 0x26, 0x69, 0x32, 0xed, 0xf7, 0x7d, 0xed, 0x52, 0xf8, 0x56, 0x0b, 0x1a,
	0x8a, 0x60, 0x44, 0xa8, 0x25, 0xbd, 0x94, 0xe2, 0xc9, 0x83, 0xa5, 0x37, 0x19, 0x6f, 0x5e, 0x4a,
	0x6d, 0x97, 0x18, 0xba, 0x6c, 0xc4, 0x0c, 0x7d, 0x28, 0x1f, 0xc1, 0x93, 0xaf, 0xe3, 0x5b, 0xc8,
	0x6c, 0xac, 0xb0, 0xb9, 0x2d, 0x33, 0xbf, 0x99, 0xff, 0xd0, 0x06, 0x7a, 0x55, 0x61, 0x68, 0x96,
	0x4d, 0x5e, 0xdf, 0x4a, 0x2a, 0xc5, 0x80, 0x54, 0x45, 0xd5, 0x64, 0x5f, 0xd0, 0xf6, 0x45, 0x99,
	0xaa, 0x30, 0xfb, 0xd3, 0xff, 0x87, 0x8d, 0x2e, 0x76, 0x1b, 0x52, 0x37, 0xc7, 0x47, 0x6d, 0xc7,
	0xef, 0x3e, 0x84, 0x8f, 0x2b, 0x1e, 0x16, 0x02, 0x7c, 0x53, 0x1a, 0x25, 0x5b, 0x49, 0x2b, 0x1d,
	0xa0, 0x7d, 0x8b, 0x13, 0xf0, 0x34, 0x49, 0x8f, 0x2b, 0x77, 0xf1, 0xc7, 0xd7, 0x67, 0xdb, 0x5f,
	0x78, 0x7d, 0x40, 0x4f, 0x93, 0x18, 0x41, 0x5b, 0x93, 0x92, 0x6d, 0xa7, 0x27, 0x01, 0xb9, 0xca,
	0x73, 0x39, 0x49, 0xdf, 0xe9, 0x25, 0x80, 0x5e, 0x6e, 0xe7, 0x72, 0x52, 0x32, 0x70, 0x7a, 0x29,
	0x20, 0x57, 0x45, 0x02, 0x81, 0xa6, 0x75, 0x4e, 0x32, 0xb4, 0xed, 0x2e, 0xb7, 0xc3, 0x85, 0xdf,
	0x3f, 0x4b, 0x86, 0xe8, 0x6b, 0x5a, 0x92, 0x18, 0x43, 0x68, 0x85, 0x92, 0x9d, 0x06, 0x49, 0x87,
	0x18, 0x30, 0x51, 0xb5, 0x51, 0xbc, 0x26, 0x72, 0x8c, 0xe4, 0x35, 0x81, 0x26, 0xb5, 0x24, 0x71,
	0x01, 0x9d, 0xda, 0x28, 0x19, 0x37, 0x50, 0x3a, 0xc4, 0xd0, 0x22, 0x25, 0x2e, 0x21, 0xb6, 0x69,
	0xeb, 0xc2, 0x1c, 0x24, 0xb8, 0x81, 0x69, 0x92, 0x61, 0x87, 0x03, 0x57, 0xe6, 0x20, 0xae, 0x00,
	0xea, 0xb3, 0xac, 0xec, 0x36, 0x64, 0x9a, 0x61, 0x64, 0x4f, 0xfb, 0xa5, 0xea, 0xb8, 0xb4, 0xe7,
	0x86, 0xf3, 0xd2, 0xc8, 0x86, 0x33, 0xbd, 0x86, 0xee, 0xcf, 0x91, 0xd6, 0xfe, 0x69, 0xd8, 0x34,
	0xc3, 0xb8, 0x3e, 0x94, 0xf1, 0x08, 0xbc, 0xc2, 0xc8, 0xbf, 0x8e, 0x99, 0xde, 0x4e, 0xef, 0xd1,
	0x2b, 0x0c, 0xff, 0x24, 0xa6, 0xe4, 0x44, 0xf9, 0xcf, 0x01, 0xf3, 0x87, 0xf9, 0x13, 0x06, 0xa6,
	0xa4, 0x95, 0x11, 0xe7, 0x10, 0x6c, 0x4b, 0x53, 0x91, 0xec, 0x3b, 0xff, 0x4d, 0xb4, 0xc3, 0xba,
	0xfe, 0x1c, 0xda, 0x6f, 0x66, 0xf6, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x11, 0x45, 0x7c, 0xb1, 0x6f,
	0x02, 0x00, 0x00,
}
