// Code generated by protoc-gen-gogo.
// source: string.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type String struct {
	None        string `protobuf:"bytes,1,opt,name=none,proto3" json:"none,omitempty"`
	Min         string `protobuf:"bytes,2,opt,name=min,proto3" json:"min,omitempty"`
	Max         string `protobuf:"bytes,3,opt,name=max,proto3" json:"max,omitempty"`
	MinMax      string `protobuf:"bytes,4,opt,name=min_max,json=minMax,proto3" json:"min_max,omitempty"`
	EqLen       string `protobuf:"bytes,5,opt,name=eq_len,json=eqLen,proto3" json:"eq_len,omitempty"`
	MinBytes    string `protobuf:"bytes,6,opt,name=min_bytes,json=minBytes,proto3" json:"min_bytes,omitempty"`
	MaxBytes    string `protobuf:"bytes,7,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty"`
	MinMaxBytes string `protobuf:"bytes,8,opt,name=min_max_bytes,json=minMaxBytes,proto3" json:"min_max_bytes,omitempty"`
	EqBytes     string `protobuf:"bytes,9,opt,name=eq_bytes,json=eqBytes,proto3" json:"eq_bytes,omitempty"`
	Pattern     string `protobuf:"bytes,10,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Prefix      string `protobuf:"bytes,11,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Suffix      string `protobuf:"bytes,12,opt,name=suffix,proto3" json:"suffix,omitempty"`
	Contains    string `protobuf:"bytes,13,opt,name=contains,proto3" json:"contains,omitempty"`
	In          string `protobuf:"bytes,14,opt,name=in,proto3" json:"in,omitempty"`
	NotIn       string `protobuf:"bytes,15,opt,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	Const       string `protobuf:"bytes,16,opt,name=const,proto3" json:"const,omitempty"`
	Ip          string `protobuf:"bytes,17,opt,name=ip,proto3" json:"ip,omitempty"`
	IpV4        string `protobuf:"bytes,18,opt,name=ip_v4,json=ipV4,proto3" json:"ip_v4,omitempty"`
	IpV6        string `protobuf:"bytes,19,opt,name=ip_v6,json=ipV6,proto3" json:"ip_v6,omitempty"`
	Email       string `protobuf:"bytes,20,opt,name=email,proto3" json:"email,omitempty"`
	Host        string `protobuf:"bytes,21,opt,name=host,proto3" json:"host,omitempty"`
	Uri         string `protobuf:"bytes,22,opt,name=uri,proto3" json:"uri,omitempty"`
	UriRef      string `protobuf:"bytes,23,opt,name=uri_ref,json=uriRef,proto3" json:"uri_ref,omitempty"`
}

func (m *String) Reset()                    { *m = String{} }
func (m *String) String() string            { return proto.CompactTextString(m) }
func (*String) ProtoMessage()               {}
func (*String) Descriptor() ([]byte, []int) { return fileDescriptorString, []int{0} }

func (m *String) GetNone() string {
	if m != nil {
		return m.None
	}
	return ""
}

func (m *String) GetMin() string {
	if m != nil {
		return m.Min
	}
	return ""
}

func (m *String) GetMax() string {
	if m != nil {
		return m.Max
	}
	return ""
}

func (m *String) GetMinMax() string {
	if m != nil {
		return m.MinMax
	}
	return ""
}

func (m *String) GetEqLen() string {
	if m != nil {
		return m.EqLen
	}
	return ""
}

func (m *String) GetMinBytes() string {
	if m != nil {
		return m.MinBytes
	}
	return ""
}

func (m *String) GetMaxBytes() string {
	if m != nil {
		return m.MaxBytes
	}
	return ""
}

func (m *String) GetMinMaxBytes() string {
	if m != nil {
		return m.MinMaxBytes
	}
	return ""
}

func (m *String) GetEqBytes() string {
	if m != nil {
		return m.EqBytes
	}
	return ""
}

func (m *String) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *String) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *String) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *String) GetContains() string {
	if m != nil {
		return m.Contains
	}
	return ""
}

func (m *String) GetIn() string {
	if m != nil {
		return m.In
	}
	return ""
}

func (m *String) GetNotIn() string {
	if m != nil {
		return m.NotIn
	}
	return ""
}

func (m *String) GetConst() string {
	if m != nil {
		return m.Const
	}
	return ""
}

func (m *String) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *String) GetIpV4() string {
	if m != nil {
		return m.IpV4
	}
	return ""
}

func (m *String) GetIpV6() string {
	if m != nil {
		return m.IpV6
	}
	return ""
}

func (m *String) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *String) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *String) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *String) GetUriRef() string {
	if m != nil {
		return m.UriRef
	}
	return ""
}

func init() {
	proto.RegisterType((*String)(nil), "tests.kitchensink.String")
}

func init() { proto.RegisterFile("string.proto", fileDescriptorString) }

var fileDescriptorString = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xd3, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0x07, 0x70, 0xe5, 0xcd, 0x49, 0x9f, 0xb4, 0xeb, 0xe6, 0x8d, 0xcd, 0xbc, 0x4f, 0x03, 0xa6,
	0xc0, 0xa4, 0x4d, 0x82, 0x69, 0x07, 0x2e, 0x48, 0xbd, 0x81, 0xe0, 0x62, 0x24, 0x0e, 0xbb, 0x14,
	0xa7, 0x38, 0xd4, 0x5a, 0x63, 0xa7, 0x8e, 0x3b, 0x85, 0x9e, 0x38, 0x72, 0xe4, 0xf3, 0x70, 0xe2,
	0xce, 0x27, 0xe1, 0x5b, 0x20, 0x3b, 0x2d, 0x92, 0x6f, 0xd6, 0xff, 0xff, 0xcb, 0xe3, 0x27, 0x8a,
	0x02, 0xc3, 0xd6, 0x68, 0x21, 0xbf, 0x9e, 0x37, 0x5a, 0x19, 0x85, 0xf7, 0x0c, 0x6f, 0x4d, 0x7b,
	0x7e, 0x23, 0xcc, 0x6c, 0xce, 0x65, 0x2b, 0xe4, 0xcd, 0xbd, 0xa3, 0x5b, 0xb6, 0x10, 0x5f, 0x98,
	0xe1, 0x17, 0xdb, 0x43, 0x6f, 0x4f, 0xfe, 0x20, 0x40, 0x1f, 0xdd, 0xc3, 0x18, 0x43, 0x2c, 0x95,
	0xe4, 0x24, 0x38, 0x0e, 0x8a, 0x01, 0x75, 0x67, 0x7c, 0x1f, 0xa2, 0x5a, 0x48, 0x12, 0xda, 0x68,
	0x32, 0xf8, 0xf5, 0xf7, 0x77, 0x14, 0xeb, 0x70, 0x37, 0xa2, 0x36, 0x75, 0x25, 0xeb, 0x48, 0xe4,
	0x95, 0x04, 0xa8, 0x4d, 0xf1, 0x53, 0x48, 0x6b, 0x21, 0xa7, 0x16, 0xc4, 0x0e, 0xe4, 0x16, 0x20,
	0x1d, 0xef, 0x46, 0x04, 0x28, 0xaa, 0x85, 0xfc, 0xc0, 0x3a, 0x7c, 0x02, 0x88, 0x2f, 0xa7, 0x0b,
	0x2e, 0x49, 0xe2, 0xa3, 0x84, 0x24, 0x34, 0xe1, 0xcb, 0xf7, 0x5c, 0xe2, 0x53, 0x18, 0xd8, 0x49,
	0xe5, 0x37, 0xc3, 0x5b, 0x82, 0xbc, 0xcb, 0x8e, 0x63, 0x9a, 0xd5, 0x42, 0x4e, 0x6c, 0xe5, 0x1c,
	0xeb, 0x36, 0x2e, 0xf5, 0x5c, 0x91, 0xd3, 0xac, 0x66, 0x5d, 0xef, 0x2e, 0x60, 0xb4, 0xd9, 0x6c,
	0x63, 0x33, 0xef, 0xea, 0xe3, 0xb8, 0xc8, 0x69, 0xde, 0xef, 0xb7, 0x1d, 0x9c, 0xf1, 0xe5, 0xc6,
	0x0e, 0x7c, 0x8b, 0x0a, 0x44, 0x53, 0xbe, 0xec, 0xdd, 0x39, 0xa4, 0x0d, 0x33, 0x86, 0x6b, 0x49,
	0xc0, 0xb1, 0x03, 0xcb, 0xc6, 0x7a, 0xf4, 0x32, 0xaf, 0x94, 0x3a, 0x2b, 0x4a, 0x76, 0xa6, 0x9f,
	0xbf, 0xa1, 0x5b, 0x84, 0x9f, 0x01, 0x6a, 0x34, 0xaf, 0x44, 0x47, 0x72, 0xc7, 0x47, 0x96, 0x67,
	0x1a, 0xbd, 0x8e, 0x2b, 0xb1, 0x5e, 0xd3, 0x4d, 0x69, 0x59, 0xbb, 0xaa, 0x2c, 0x1b, 0x7a, 0x6c,
	0x12, 0x97, 0x2b, 0xcb, 0xfa, 0x12, 0x17, 0x90, 0xcd, 0x94, 0x34, 0x4c, 0xc8, 0x96, 0x8c, 0x1c,
	0x1c, 0x5a, 0x98, 0xea, 0xe4, 0x5d, 0x54, 0xb2, 0x35, 0xfd, 0xdf, 0xe2, 0x53, 0x08, 0x85, 0x24,
	0x3b, 0xce, 0x1c, 0x5a, 0xb3, 0xa7, 0xc7, 0x34, 0xaa, 0x94, 0xa2, 0x51, 0xc9, 0x34, 0x75, 0x3a,
	0x14, 0x12, 0xbf, 0x00, 0x24, 0x95, 0x99, 0x0a, 0x49, 0xc6, 0xce, 0xee, 0x5b, 0xbb, 0xa3, 0x87,
	0xd7, 0x6e, 0xbf, 0xeb, 0xfe, 0xfa, 0x44, 0x2a, 0xf3, 0xd6, 0xbe, 0x4b, 0x32, 0x53, 0xb2, 0x35,
	0x64, 0xd7, 0xd1, 0xb1, 0xa5, 0xa0, 0x33, 0x40, 0x95, 0x52, 0x76, 0x68, 0xdf, 0xe2, 0xbb, 0x10,
	0x8a, 0x86, 0xec, 0x79, 0x1f, 0xa7, 0x09, 0x68, 0x28, 0x1a, 0xfc, 0x08, 0x12, 0xd1, 0x4c, 0x6f,
	0x2f, 0x09, 0xf6, 0xda, 0x2e, 0xa0, 0xb1, 0x68, 0x3e, 0x5d, 0xe2, 0xc7, 0x7d, 0x7f, 0x45, 0xf6,
	0x5d, 0x0f, 0xb6, 0x4f, 0x74, 0xf4, 0x3d, 0xe8, 0xc1, 0x95, 0x05, 0xbc, 0x66, 0x62, 0x41, 0x0e,
	0xbc, 0x01, 0x9f, 0x03, 0xda, 0xe7, 0xf8, 0x21, 0xc4, 0x73, 0xd5, 0x1a, 0x72, 0xc7, 0xeb, 0xe7,
	0x01, 0x75, 0x31, 0x7e, 0x00, 0xd1, 0x4a, 0x0b, 0x72, 0xe8, 0x8d, 0xff, 0x11, 0x04, 0xd4, 0xc6,
	0xf8, 0x09, 0xa4, 0x2b, 0x2d, 0xa6, 0x9a, 0x57, 0xe4, 0xc8, 0x13, 0x3f, 0x83, 0x80, 0xa2, 0x95,
	0x16, 0x94, 0x57, 0x25, 0x72, 0x3f, 0xd5, 0xab, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x22,
	0x3e, 0xb9, 0x90, 0x03, 0x00, 0x00,
}
