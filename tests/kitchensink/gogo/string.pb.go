// Code generated by protoc-gen-gogo.
// source: string.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type String struct {
	None        string `protobuf:"bytes,1,opt,name=none,proto3" json:"none,omitempty"`
	Min         string `protobuf:"bytes,2,opt,name=min,proto3" json:"min,omitempty"`
	Max         string `protobuf:"bytes,3,opt,name=max,proto3" json:"max,omitempty"`
	MinMax      string `protobuf:"bytes,4,opt,name=min_max,json=minMax,proto3" json:"min_max,omitempty"`
	EqLen       string `protobuf:"bytes,5,opt,name=eq_len,json=eqLen,proto3" json:"eq_len,omitempty"`
	MinBytes    string `protobuf:"bytes,6,opt,name=min_bytes,json=minBytes,proto3" json:"min_bytes,omitempty"`
	MaxBytes    string `protobuf:"bytes,7,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty"`
	MinMaxBytes string `protobuf:"bytes,8,opt,name=min_max_bytes,json=minMaxBytes,proto3" json:"min_max_bytes,omitempty"`
	EqBytes     string `protobuf:"bytes,9,opt,name=eq_bytes,json=eqBytes,proto3" json:"eq_bytes,omitempty"`
	Pattern     string `protobuf:"bytes,10,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Prefix      string `protobuf:"bytes,11,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Suffix      string `protobuf:"bytes,12,opt,name=suffix,proto3" json:"suffix,omitempty"`
	Contains    string `protobuf:"bytes,13,opt,name=contains,proto3" json:"contains,omitempty"`
	In          string `protobuf:"bytes,14,opt,name=in,proto3" json:"in,omitempty"`
	NotIn       string `protobuf:"bytes,15,opt,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	Const       string `protobuf:"bytes,16,opt,name=const,proto3" json:"const,omitempty"`
	Ip          string `protobuf:"bytes,17,opt,name=ip,proto3" json:"ip,omitempty"`
	IpV4        string `protobuf:"bytes,18,opt,name=ip_v4,json=ipV4,proto3" json:"ip_v4,omitempty"`
	IpV6        string `protobuf:"bytes,19,opt,name=ip_v6,json=ipV6,proto3" json:"ip_v6,omitempty"`
	Email       string `protobuf:"bytes,20,opt,name=email,proto3" json:"email,omitempty"`
	Host        string `protobuf:"bytes,21,opt,name=host,proto3" json:"host,omitempty"`
	Uri         string `protobuf:"bytes,22,opt,name=uri,proto3" json:"uri,omitempty"`
	UriRef      string `protobuf:"bytes,23,opt,name=uri_ref,json=uriRef,proto3" json:"uri_ref,omitempty"`
}

func (m *String) Reset()                    { *m = String{} }
func (m *String) String() string            { return proto.CompactTextString(m) }
func (*String) ProtoMessage()               {}
func (*String) Descriptor() ([]byte, []int) { return fileDescriptorString, []int{0} }

func (m *String) GetNone() string {
	if m != nil {
		return m.None
	}
	return ""
}

func (m *String) GetMin() string {
	if m != nil {
		return m.Min
	}
	return ""
}

func (m *String) GetMax() string {
	if m != nil {
		return m.Max
	}
	return ""
}

func (m *String) GetMinMax() string {
	if m != nil {
		return m.MinMax
	}
	return ""
}

func (m *String) GetEqLen() string {
	if m != nil {
		return m.EqLen
	}
	return ""
}

func (m *String) GetMinBytes() string {
	if m != nil {
		return m.MinBytes
	}
	return ""
}

func (m *String) GetMaxBytes() string {
	if m != nil {
		return m.MaxBytes
	}
	return ""
}

func (m *String) GetMinMaxBytes() string {
	if m != nil {
		return m.MinMaxBytes
	}
	return ""
}

func (m *String) GetEqBytes() string {
	if m != nil {
		return m.EqBytes
	}
	return ""
}

func (m *String) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *String) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *String) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *String) GetContains() string {
	if m != nil {
		return m.Contains
	}
	return ""
}

func (m *String) GetIn() string {
	if m != nil {
		return m.In
	}
	return ""
}

func (m *String) GetNotIn() string {
	if m != nil {
		return m.NotIn
	}
	return ""
}

func (m *String) GetConst() string {
	if m != nil {
		return m.Const
	}
	return ""
}

func (m *String) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *String) GetIpV4() string {
	if m != nil {
		return m.IpV4
	}
	return ""
}

func (m *String) GetIpV6() string {
	if m != nil {
		return m.IpV6
	}
	return ""
}

func (m *String) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *String) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *String) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *String) GetUriRef() string {
	if m != nil {
		return m.UriRef
	}
	return ""
}

func init() {
	proto.RegisterType((*String)(nil), "tests.kitchensink.String")
}
func (m *String) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *String) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.None) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.None)))
		i += copy(dAtA[i:], m.None)
	}
	if len(m.Min) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.Min)))
		i += copy(dAtA[i:], m.Min)
	}
	if len(m.Max) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.Max)))
		i += copy(dAtA[i:], m.Max)
	}
	if len(m.MinMax) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.MinMax)))
		i += copy(dAtA[i:], m.MinMax)
	}
	if len(m.EqLen) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.EqLen)))
		i += copy(dAtA[i:], m.EqLen)
	}
	if len(m.MinBytes) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.MinBytes)))
		i += copy(dAtA[i:], m.MinBytes)
	}
	if len(m.MaxBytes) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.MaxBytes)))
		i += copy(dAtA[i:], m.MaxBytes)
	}
	if len(m.MinMaxBytes) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.MinMaxBytes)))
		i += copy(dAtA[i:], m.MinMaxBytes)
	}
	if len(m.EqBytes) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.EqBytes)))
		i += copy(dAtA[i:], m.EqBytes)
	}
	if len(m.Pattern) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.Pattern)))
		i += copy(dAtA[i:], m.Pattern)
	}
	if len(m.Prefix) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	if len(m.Suffix) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.Suffix)))
		i += copy(dAtA[i:], m.Suffix)
	}
	if len(m.Contains) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.Contains)))
		i += copy(dAtA[i:], m.Contains)
	}
	if len(m.In) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.In)))
		i += copy(dAtA[i:], m.In)
	}
	if len(m.NotIn) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.NotIn)))
		i += copy(dAtA[i:], m.NotIn)
	}
	if len(m.Const) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.Const)))
		i += copy(dAtA[i:], m.Const)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.IpV4) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.IpV4)))
		i += copy(dAtA[i:], m.IpV4)
	}
	if len(m.IpV6) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.IpV6)))
		i += copy(dAtA[i:], m.IpV6)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Uri) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.Uri)))
		i += copy(dAtA[i:], m.Uri)
	}
	if len(m.UriRef) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintString(dAtA, i, uint64(len(m.UriRef)))
		i += copy(dAtA[i:], m.UriRef)
	}
	return i, nil
}

func encodeFixed64String(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32String(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintString(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *String) Size() (n int) {
	var l int
	_ = l
	l = len(m.None)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.Min)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.Max)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.MinMax)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.EqLen)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.MinBytes)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.MaxBytes)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.MinMaxBytes)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.EqBytes)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.Contains)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.In)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.NotIn)
	if l > 0 {
		n += 1 + l + sovString(uint64(l))
	}
	l = len(m.Const)
	if l > 0 {
		n += 2 + l + sovString(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 2 + l + sovString(uint64(l))
	}
	l = len(m.IpV4)
	if l > 0 {
		n += 2 + l + sovString(uint64(l))
	}
	l = len(m.IpV6)
	if l > 0 {
		n += 2 + l + sovString(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 2 + l + sovString(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 2 + l + sovString(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 2 + l + sovString(uint64(l))
	}
	l = len(m.UriRef)
	if l > 0 {
		n += 2 + l + sovString(uint64(l))
	}
	return n
}

func sovString(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozString(x uint64) (n int) {
	return sovString(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *String) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowString
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: String: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: String: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.None = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Min = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Max = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EqLen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EqLen = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinMaxBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinMaxBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EqBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EqBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Const = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpV4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpV4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpV6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpV6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UriRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowString
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthString
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UriRef = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipString(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthString
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipString(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowString
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowString
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowString
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthString
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowString
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipString(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthString = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowString   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("string.proto", fileDescriptorString) }

var fileDescriptorString = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xd3, 0x3f, 0x6f, 0xd4, 0x30,
	0x18, 0x06, 0x70, 0xf9, 0x92, 0xf8, 0x72, 0x6f, 0xee, 0x7a, 0xad, 0x5b, 0x5a, 0xf3, 0xef, 0xa8,
	0x0a, 0x54, 0x81, 0x4a, 0xad, 0x04, 0x55, 0x07, 0x16, 0xa4, 0xdb, 0x40, 0xb0, 0x18, 0x89, 0xa1,
	0xcb, 0xe1, 0x14, 0x87, 0x5a, 0x6d, 0xec, 0x9c, 0xe3, 0xab, 0x42, 0x27, 0x46, 0x46, 0x3e, 0x0f,
	0x13, 0x23, 0x12, 0x0b, 0x1f, 0x01, 0x75, 0xe3, 0x5b, 0x20, 0x3b, 0x77, 0x48, 0xde, 0xac, 0xe7,
	0xf9, 0xe5, 0xf5, 0x1b, 0x45, 0x81, 0x61, 0x63, 0x8d, 0x54, 0x9f, 0x0e, 0x6b, 0xa3, 0xad, 0x26,
	0x1b, 0x56, 0x34, 0xb6, 0x39, 0xbc, 0x90, 0xf6, 0xec, 0x5c, 0xa8, 0x46, 0xaa, 0x8b, 0x3b, 0x3b,
	0x57, 0xfc, 0x52, 0x7e, 0xe4, 0x56, 0x1c, 0xad, 0x0e, 0x9d, 0xdd, 0xfb, 0x85, 0x01, 0xbf, 0xf3,
	0x0f, 0x13, 0x02, 0xb1, 0xd2, 0x4a, 0x50, 0xb4, 0x8b, 0xf2, 0x01, 0xf3, 0x67, 0x72, 0x17, 0xa2,
	0x4a, 0x2a, 0xda, 0x73, 0xd1, 0x74, 0xf0, 0xfd, 0xef, 0x8f, 0x28, 0x36, 0xbd, 0xf5, 0x88, 0xb9,
	0xd4, 0x97, 0xbc, 0xa5, 0x51, 0x50, 0x52, 0x60, 0x2e, 0x25, 0x8f, 0xa0, 0x5f, 0x49, 0x35, 0x73,
	0x20, 0xf6, 0x20, 0x73, 0x00, 0x9b, 0x78, 0x3d, 0xa2, 0xc0, 0x70, 0x25, 0xd5, 0x5b, 0xde, 0x92,
	0x3d, 0xc0, 0x62, 0x3e, 0xbb, 0x14, 0x8a, 0x26, 0x21, 0x4a, 0x68, 0xc2, 0x12, 0x31, 0x7f, 0x23,
	0x14, 0xd9, 0x87, 0x81, 0x9b, 0x54, 0x7c, 0xb6, 0xa2, 0xa1, 0x38, 0xb8, 0x6c, 0x37, 0x66, 0x69,
	0x25, 0xd5, 0xd4, 0x55, 0xde, 0xf1, 0x76, 0xe9, 0xfa, 0x81, 0xcb, 0x33, 0x96, 0x56, 0xbc, 0xed,
	0xdc, 0x11, 0x8c, 0x96, 0x9b, 0x2d, 0x6d, 0x1a, 0x5c, 0xbd, 0x1b, 0xe7, 0x19, 0xcb, 0xba, 0xfd,
	0x56, 0x83, 0x53, 0x31, 0x5f, 0xda, 0x41, 0x68, 0x71, 0x8e, 0x59, 0x5f, 0xcc, 0x3b, 0x77, 0x08,
	0xfd, 0x9a, 0x5b, 0x2b, 0x8c, 0xa2, 0xe0, 0xd9, 0x96, 0x63, 0x63, 0x33, 0x7a, 0x96, 0x95, 0x5a,
	0x1f, 0xe4, 0x05, 0x3f, 0x30, 0x4f, 0x5e, 0xb2, 0x15, 0x22, 0x8f, 0x01, 0xd7, 0x46, 0x94, 0xb2,
	0xa5, 0x99, 0xe7, 0x23, 0xc7, 0x53, 0x83, 0x5f, 0xc4, 0xa5, 0xbc, 0xbe, 0x66, 0xcb, 0xd2, 0xb1,
	0x66, 0x51, 0x3a, 0x36, 0x0c, 0xd8, 0x34, 0x2e, 0x16, 0x8e, 0x75, 0x25, 0xc9, 0x21, 0x3d, 0xd3,
	0xca, 0x72, 0xa9, 0x1a, 0x3a, 0xf2, 0x70, 0xe8, 0x60, 0xdf, 0x24, 0xaf, 0xa3, 0x82, 0x5f, 0xb3,
	0xff, 0x2d, 0xd9, 0x87, 0x9e, 0x54, 0x74, 0xcd, 0x9b, 0x6d, 0x67, 0x36, 0xcc, 0x98, 0x45, 0xa5,
	0xd6, 0x2c, 0x2a, 0xb8, 0x61, 0x5e, 0xf7, 0xa4, 0x22, 0x4f, 0x01, 0x2b, 0x6d, 0x67, 0x52, 0xd1,
	0xb1, 0xb7, 0x9b, 0xce, 0xae, 0x99, 0xe1, 0xa9, 0xdf, 0xef, 0xb4, 0xbb, 0x3e, 0x51, 0xda, 0xbe,
	0x72, 0xef, 0x92, 0x9c, 0x69, 0xd5, 0x58, 0xba, 0xee, 0xe9, 0xd8, 0x51, 0x30, 0x29, 0xe0, 0x52,
	0x6b, 0x37, 0xb4, 0x6b, 0xc9, 0x6d, 0xe8, 0xc9, 0x9a, 0x6e, 0x04, 0x1f, 0xa7, 0x46, 0xac, 0x27,
	0x6b, 0x32, 0x81, 0x44, 0xd6, 0xb3, 0xab, 0x63, 0x4a, 0x82, 0xb6, 0x45, 0x2c, 0x96, 0xf5, 0xfb,
	0x63, 0xf2, 0xa0, 0xeb, 0x4f, 0xe8, 0xa6, 0xef, 0xc1, 0xf5, 0x89, 0x89, 0xbe, 0xa0, 0x0e, 0x9c,
	0x38, 0x20, 0x2a, 0x2e, 0x2f, 0xe9, 0x56, 0x30, 0xe0, 0x03, 0x62, 0x5d, 0x4e, 0xee, 0x43, 0x7c,
	0xae, 0x1b, 0x4b, 0x6f, 0x05, 0xfd, 0x39, 0x62, 0x3e, 0x26, 0xf7, 0x20, 0x5a, 0x18, 0x49, 0xb7,
	0x83, 0xf1, 0x5f, 0x11, 0x62, 0x2e, 0x26, 0x0f, 0xa1, 0xbf, 0x30, 0x72, 0x66, 0x44, 0x49, 0x77,
	0x02, 0xf1, 0x0d, 0x21, 0x86, 0x17, 0x46, 0x32, 0x51, 0x4e, 0x87, 0x3f, 0x6f, 0x26, 0xe8, 0xf7,
	0xcd, 0x04, 0xfd, 0xb9, 0x99, 0xa0, 0x02, 0xfb, 0x5f, 0xec, 0xf9, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf3, 0x8c, 0xfa, 0x3b, 0x9e, 0x03, 0x00, 0x00,
}
