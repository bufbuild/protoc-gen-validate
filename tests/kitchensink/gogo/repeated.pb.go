// Code generated by protoc-gen-gogo.
// source: repeated.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Repeated struct {
	None        []int64           `protobuf:"varint,1,rep,packed,name=none" json:"none,omitempty"`
	MinItems    []int64           `protobuf:"varint,2,rep,packed,name=min_items,json=minItems" json:"min_items,omitempty"`
	MaxItems    []string          `protobuf:"bytes,3,rep,name=max_items,json=maxItems" json:"max_items,omitempty"`
	MinMaxItems [][]byte          `protobuf:"bytes,4,rep,name=min_max_items,json=minMaxItems" json:"min_max_items,omitempty"`
	EqItems     []*Repeated_Embed `protobuf:"bytes,5,rep,name=eq_items,json=eqItems" json:"eq_items,omitempty"`
	Unique      []int64           `protobuf:"varint,6,rep,packed,name=unique" json:"unique,omitempty"`
	UniqueBytes [][]byte          `protobuf:"bytes,7,rep,name=unique_bytes,json=uniqueBytes" json:"unique_bytes,omitempty"`
	ItemRules   []float64         `protobuf:"fixed64,8,rep,packed,name=item_rules,json=itemRules" json:"item_rules,omitempty"`
}

func (m *Repeated) Reset()                    { *m = Repeated{} }
func (m *Repeated) String() string            { return proto.CompactTextString(m) }
func (*Repeated) ProtoMessage()               {}
func (*Repeated) Descriptor() ([]byte, []int) { return fileDescriptorRepeated, []int{0} }

func (m *Repeated) GetNone() []int64 {
	if m != nil {
		return m.None
	}
	return nil
}

func (m *Repeated) GetMinItems() []int64 {
	if m != nil {
		return m.MinItems
	}
	return nil
}

func (m *Repeated) GetMaxItems() []string {
	if m != nil {
		return m.MaxItems
	}
	return nil
}

func (m *Repeated) GetMinMaxItems() [][]byte {
	if m != nil {
		return m.MinMaxItems
	}
	return nil
}

func (m *Repeated) GetEqItems() []*Repeated_Embed {
	if m != nil {
		return m.EqItems
	}
	return nil
}

func (m *Repeated) GetUnique() []int64 {
	if m != nil {
		return m.Unique
	}
	return nil
}

func (m *Repeated) GetUniqueBytes() [][]byte {
	if m != nil {
		return m.UniqueBytes
	}
	return nil
}

func (m *Repeated) GetItemRules() []float64 {
	if m != nil {
		return m.ItemRules
	}
	return nil
}

type Repeated_Embed struct {
}

func (m *Repeated_Embed) Reset()                    { *m = Repeated_Embed{} }
func (m *Repeated_Embed) String() string            { return proto.CompactTextString(m) }
func (*Repeated_Embed) ProtoMessage()               {}
func (*Repeated_Embed) Descriptor() ([]byte, []int) { return fileDescriptorRepeated, []int{0, 0} }

func init() {
	proto.RegisterType((*Repeated)(nil), "tests.kitchensink.Repeated")
	proto.RegisterType((*Repeated_Embed)(nil), "tests.kitchensink.Repeated.Embed")
}
func (m *Repeated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Repeated) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.None) > 0 {
		dAtA2 := make([]byte, len(m.None)*10)
		var j1 int
		for _, num1 := range m.None {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRepeated(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.MinItems) > 0 {
		dAtA4 := make([]byte, len(m.MinItems)*10)
		var j3 int
		for _, num1 := range m.MinItems {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintRepeated(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.MaxItems) > 0 {
		for _, s := range m.MaxItems {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.MinMaxItems) > 0 {
		for _, b := range m.MinMaxItems {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRepeated(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.EqItems) > 0 {
		for _, msg := range m.EqItems {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintRepeated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Unique) > 0 {
		dAtA6 := make([]byte, len(m.Unique)*10)
		var j5 int
		for _, num1 := range m.Unique {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintRepeated(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.UniqueBytes) > 0 {
		for _, b := range m.UniqueBytes {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRepeated(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.ItemRules) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRepeated(dAtA, i, uint64(len(m.ItemRules)*8))
		for _, num := range m.ItemRules {
			f7 := math.Float64bits(float64(num))
			dAtA[i] = uint8(f7)
			i++
			dAtA[i] = uint8(f7 >> 8)
			i++
			dAtA[i] = uint8(f7 >> 16)
			i++
			dAtA[i] = uint8(f7 >> 24)
			i++
			dAtA[i] = uint8(f7 >> 32)
			i++
			dAtA[i] = uint8(f7 >> 40)
			i++
			dAtA[i] = uint8(f7 >> 48)
			i++
			dAtA[i] = uint8(f7 >> 56)
			i++
		}
	}
	return i, nil
}

func (m *Repeated_Embed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Repeated_Embed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Repeated(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Repeated(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRepeated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Repeated) Size() (n int) {
	var l int
	_ = l
	if len(m.None) > 0 {
		l = 0
		for _, e := range m.None {
			l += sovRepeated(uint64(e))
		}
		n += 1 + sovRepeated(uint64(l)) + l
	}
	if len(m.MinItems) > 0 {
		l = 0
		for _, e := range m.MinItems {
			l += sovRepeated(uint64(e))
		}
		n += 1 + sovRepeated(uint64(l)) + l
	}
	if len(m.MaxItems) > 0 {
		for _, s := range m.MaxItems {
			l = len(s)
			n += 1 + l + sovRepeated(uint64(l))
		}
	}
	if len(m.MinMaxItems) > 0 {
		for _, b := range m.MinMaxItems {
			l = len(b)
			n += 1 + l + sovRepeated(uint64(l))
		}
	}
	if len(m.EqItems) > 0 {
		for _, e := range m.EqItems {
			l = e.Size()
			n += 1 + l + sovRepeated(uint64(l))
		}
	}
	if len(m.Unique) > 0 {
		l = 0
		for _, e := range m.Unique {
			l += sovRepeated(uint64(e))
		}
		n += 1 + sovRepeated(uint64(l)) + l
	}
	if len(m.UniqueBytes) > 0 {
		for _, b := range m.UniqueBytes {
			l = len(b)
			n += 1 + l + sovRepeated(uint64(l))
		}
	}
	if len(m.ItemRules) > 0 {
		n += 1 + sovRepeated(uint64(len(m.ItemRules)*8)) + len(m.ItemRules)*8
	}
	return n
}

func (m *Repeated_Embed) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovRepeated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRepeated(x uint64) (n int) {
	return sovRepeated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Repeated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepeated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Repeated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Repeated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepeated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.None = append(m.None, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepeated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRepeated
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepeated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.None = append(m.None, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepeated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MinItems = append(m.MinItems, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepeated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRepeated
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepeated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MinItems = append(m.MinItems, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MinItems", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxItems", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepeated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepeated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxItems = append(m.MaxItems, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinMaxItems", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepeated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRepeated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinMaxItems = append(m.MinMaxItems, make([]byte, postIndex-iNdEx))
			copy(m.MinMaxItems[len(m.MinMaxItems)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EqItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepeated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepeated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EqItems = append(m.EqItems, &Repeated_Embed{})
			if err := m.EqItems[len(m.EqItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepeated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Unique = append(m.Unique, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepeated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRepeated
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRepeated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Unique = append(m.Unique, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Unique", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepeated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRepeated
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueBytes = append(m.UniqueBytes, make([]byte, postIndex-iNdEx))
			copy(m.UniqueBytes[len(m.UniqueBytes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				v2 := float64(math.Float64frombits(v))
				m.ItemRules = append(m.ItemRules, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRepeated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRepeated
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					v2 := float64(math.Float64frombits(v))
					m.ItemRules = append(m.ItemRules, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemRules", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRepeated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepeated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Repeated_Embed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepeated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Embed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Embed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRepeated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepeated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRepeated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRepeated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepeated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepeated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRepeated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRepeated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRepeated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRepeated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRepeated   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("repeated.proto", fileDescriptorRepeated) }

var fileDescriptorRepeated = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd1, 0xcf, 0x4a, 0xfb, 0x40,
	0x10, 0x07, 0xf0, 0xdf, 0x76, 0x93, 0x66, 0x33, 0x69, 0x7f, 0xa4, 0x0b, 0x62, 0xe8, 0xa1, 0xc4,
	0x5e, 0xcc, 0xc5, 0x28, 0xea, 0x03, 0x48, 0xc0, 0x83, 0x82, 0x97, 0x7d, 0x81, 0x92, 0xda, 0x01,
	0x97, 0x36, 0xdb, 0x3f, 0xbb, 0x95, 0x7a, 0xf3, 0x19, 0xfa, 0x38, 0x9e, 0x3c, 0x7a, 0xf4, 0x11,
	0xa4, 0x37, 0xdf, 0x42, 0x36, 0x7f, 0x68, 0xc5, 0x3d, 0x0d, 0x7c, 0x3f, 0x33, 0xcc, 0xb0, 0xf0,
	0x7f, 0x85, 0x0b, 0xcc, 0x0d, 0x4e, 0xd2, 0xc5, 0x6a, 0x6e, 0xe6, 0xbc, 0x67, 0x50, 0x1b, 0x9d,
	0x4e, 0xa5, 0x79, 0x7c, 0x42, 0xa5, 0xa5, 0x9a, 0xf6, 0x8f, 0x9f, 0xf3, 0x99, 0x9c, 0xe4, 0x06,
	0xcf, 0x9b, 0xa2, 0xb2, 0xc3, 0x57, 0x0a, 0x4c, 0xd4, 0xed, 0x9c, 0x83, 0xa3, 0xe6, 0x0a, 0x23,
	0x12, 0xd3, 0x84, 0x8a, 0xb2, 0xe6, 0xa7, 0xe0, 0x17, 0x52, 0x8d, 0xa4, 0xc1, 0x42, 0x47, 0x2d,
	0x1b, 0x64, 0xf0, 0xf6, 0xfd, 0x4e, 0xdd, 0x2d, 0x69, 0x31, 0x22, 0x58, 0x21, 0xd5, 0x9d, 0xcd,
	0x4a, 0x98, 0x6f, 0x6a, 0x48, 0x63, 0x9a, 0xf8, 0x7b, 0x18, 0xb6, 0x04, 0x2b, 0xf2, 0x4d, 0x05,
	0x2f, 0xa0, 0x6b, 0x27, 0xee, 0xb1, 0x13, 0xd3, 0xa4, 0x93, 0x75, 0x2c, 0xf6, 0xb6, 0xc4, 0x61,
	0x34, 0x74, 0x44, 0x50, 0x48, 0xf5, 0xd0, 0x74, 0xdc, 0x03, 0xc3, 0x65, 0x8d, 0xdd, 0x98, 0x26,
	0xc1, 0xe5, 0x49, 0xfa, 0xe7, 0xc6, 0xb4, 0x39, 0x23, 0xbd, 0x2d, 0xc6, 0x38, 0x39, 0x98, 0xe7,
	0x86, 0xae, 0xf0, 0x70, 0x59, 0xcd, 0x1a, 0x42, 0x7b, 0xad, 0xe4, 0x72, 0x8d, 0x51, 0xfb, 0xf7,
	0x31, 0x11, 0x11, 0x75, 0xc2, 0xcf, 0xa0, 0x53, 0x55, 0xa3, 0xf1, 0x8b, 0x41, 0x1d, 0x79, 0xe5,
	0x82, 0x87, 0x32, 0xa8, 0xf2, 0xcc, 0xc6, 0xfc, 0x1a, 0xc0, 0xee, 0x36, 0x5a, 0xad, 0x67, 0xa8,
	0x23, 0x16, 0xd3, 0x84, 0x64, 0x47, 0x16, 0x87, 0x5b, 0xd2, 0x1d, 0x06, 0xdc, 0xef, 0xfd, 0x2b,
	0x1f, 0xbb, 0x11, 0xbe, 0x85, 0xc2, 0xba, 0xbe, 0x07, 0x6e, 0xbd, 0xe8, 0xc7, 0x6e, 0x40, 0x3e,
	0x77, 0x03, 0xf2, 0xb5, 0x1b, 0x90, 0x71, 0xbb, 0xfc, 0x97, 0xab, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xc7, 0x7d, 0xc6, 0x97, 0xd5, 0x01, 0x00, 0x00,
}
