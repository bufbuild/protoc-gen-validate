// Code generated by protoc-gen-gogo.
// source: float.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Float struct {
	None      float32 `protobuf:"fixed32,1,opt,name=none,proto3" json:"none,omitempty"`
	Lt        float32 `protobuf:"fixed32,2,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte       float32 `protobuf:"fixed32,3,opt,name=lte,proto3" json:"lte,omitempty"`
	Gt        float32 `protobuf:"fixed32,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte       float32 `protobuf:"fixed32,5,opt,name=gte,proto3" json:"gte,omitempty"`
	LtGt      float32 `protobuf:"fixed32,6,opt,name=lt_gt,json=ltGt,proto3" json:"lt_gt,omitempty"`
	LtGte     float32 `protobuf:"fixed32,7,opt,name=lt_gte,json=ltGte,proto3" json:"lt_gte,omitempty"`
	LteGt     float32 `protobuf:"fixed32,8,opt,name=lte_gt,json=lteGt,proto3" json:"lte_gt,omitempty"`
	LteGte    float32 `protobuf:"fixed32,9,opt,name=lte_gte,json=lteGte,proto3" json:"lte_gte,omitempty"`
	LtGtInv   float32 `protobuf:"fixed32,10,opt,name=lt_gt_inv,json=ltGtInv,proto3" json:"lt_gt_inv,omitempty"`
	LtGteInv  float32 `protobuf:"fixed32,11,opt,name=lt_gte_inv,json=ltGteInv,proto3" json:"lt_gte_inv,omitempty"`
	LteGtInv  float32 `protobuf:"fixed32,12,opt,name=lte_gt_inv,json=lteGtInv,proto3" json:"lte_gt_inv,omitempty"`
	LteGteInv float32 `protobuf:"fixed32,13,opt,name=lte_gte_inv,json=lteGteInv,proto3" json:"lte_gte_inv,omitempty"`
	In        float32 `protobuf:"fixed32,14,opt,name=in,proto3" json:"in,omitempty"`
	NotIn     float32 `protobuf:"fixed32,15,opt,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	Const     float32 `protobuf:"fixed32,16,opt,name=const,proto3" json:"const,omitempty"`
}

func (m *Float) Reset()                    { *m = Float{} }
func (m *Float) String() string            { return proto.CompactTextString(m) }
func (*Float) ProtoMessage()               {}
func (*Float) Descriptor() ([]byte, []int) { return fileDescriptorFloat, []int{0} }

func (m *Float) GetNone() float32 {
	if m != nil {
		return m.None
	}
	return 0
}

func (m *Float) GetLt() float32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Float) GetLte() float32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Float) GetGt() float32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Float) GetGte() float32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Float) GetLtGt() float32 {
	if m != nil {
		return m.LtGt
	}
	return 0
}

func (m *Float) GetLtGte() float32 {
	if m != nil {
		return m.LtGte
	}
	return 0
}

func (m *Float) GetLteGt() float32 {
	if m != nil {
		return m.LteGt
	}
	return 0
}

func (m *Float) GetLteGte() float32 {
	if m != nil {
		return m.LteGte
	}
	return 0
}

func (m *Float) GetLtGtInv() float32 {
	if m != nil {
		return m.LtGtInv
	}
	return 0
}

func (m *Float) GetLtGteInv() float32 {
	if m != nil {
		return m.LtGteInv
	}
	return 0
}

func (m *Float) GetLteGtInv() float32 {
	if m != nil {
		return m.LteGtInv
	}
	return 0
}

func (m *Float) GetLteGteInv() float32 {
	if m != nil {
		return m.LteGteInv
	}
	return 0
}

func (m *Float) GetIn() float32 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *Float) GetNotIn() float32 {
	if m != nil {
		return m.NotIn
	}
	return 0
}

func (m *Float) GetConst() float32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func init() {
	proto.RegisterType((*Float)(nil), "tests.kitchensink.Float")
}

func init() { proto.RegisterFile("float.proto", fileDescriptorFloat) }

var fileDescriptorFloat = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xc1, 0x6a, 0xe2, 0x40,
	0x18, 0xc7, 0xc7, 0x98, 0x49, 0xf4, 0x53, 0x77, 0xd7, 0x01, 0xd9, 0x61, 0x59, 0x17, 0x57, 0x70,
	0x91, 0x85, 0x28, 0x45, 0x3c, 0x8a, 0xa1, 0x87, 0x8a, 0xd7, 0xbc, 0x80, 0xb5, 0x76, 0x4c, 0x83,
	0xc3, 0xa4, 0x34, 0x1f, 0x3e, 0x47, 0xaf, 0xed, 0xb5, 0x50, 0xe8, 0x2b, 0xf4, 0xe4, 0xeb, 0xf4,
	0xde, 0x07, 0x28, 0x33, 0x53, 0x2b, 0x43, 0x6e, 0x43, 0xfe, 0xbf, 0xdf, 0xf7, 0xfd, 0x93, 0x0c,
	0x34, 0xb6, 0x32, 0x5f, 0xe3, 0xe8, 0xf6, 0x2e, 0xc7, 0x9c, 0xb5, 0x51, 0x14, 0x58, 0x8c, 0x76,
	0x19, 0x6e, 0x6e, 0x84, 0x2a, 0x32, 0xb5, 0xfb, 0xf5, 0x73, 0xbf, 0x96, 0xd9, 0xf5, 0x1a, 0xc5,
	0xf8, 0x78, 0xb0, 0x6c, 0xff, 0xdd, 0x07, 0x7a, 0xa1, 0x5d, 0xc6, 0xc0, 0x57, 0xb9, 0x12, 0xbc,
	0xd2, 0xab, 0x0c, 0xbd, 0xc4, 0x9c, 0xd9, 0x6f, 0xf0, 0x24, 0x72, 0x4f, 0x3f, 0x39, 0x6f, 0xbe,
	0xbe, 0x1d, 0xaa, 0x21, 0xd0, 0x0e, 0x21, 0x64, 0x9e, 0x78, 0x12, 0xd9, 0x1f, 0xa8, 0x4a, 0x14,
	0xbc, 0xea, 0xc4, 0x5d, 0x13, 0xeb, 0x40, 0xdb, 0x29, 0x72, 0xdf, 0x89, 0x07, 0xd6, 0x4e, 0x8d,
	0x9d, 0xa2, 0xe0, 0xd4, 0x89, 0x23, 0x6b, 0xa7, 0x28, 0xd8, 0x3f, 0xa0, 0x12, 0x57, 0x29, 0xf2,
	0xc0, 0x10, 0x6d, 0x4d, 0x34, 0x01, 0x3a, 0x93, 0xc9, 0x53, 0x3c, 0x20, 0xe4, 0x30, 0x4f, 0x7c,
	0x89, 0x0b, 0x64, 0x43, 0x08, 0x0c, 0x27, 0x78, 0x58, 0x06, 0x23, 0x03, 0x52, 0x0d, 0x0a, 0x4b,
	0x0a, 0x3d, 0xb2, 0xe6, 0x90, 0xdd, 0xd3, 0x48, 0x2a, 0x51, 0x2c, 0x90, 0xfd, 0x87, 0xd0, 0x92,
	0x82, 0xd7, 0xcb, 0xa8, 0x1d, 0x1a, 0x18, 0x54, 0xb0, 0x08, 0xea, 0x66, 0xff, 0x2a, 0x53, 0x7b,
	0x0e, 0x6e, 0x05, 0x42, 0x7a, 0xf1, 0x60, 0xbb, 0x7d, 0x8e, 0x93, 0x50, 0x57, 0x58, 0xaa, 0x3d,
	0x1b, 0x03, 0xd8, 0xba, 0x86, 0x6f, 0x94, 0xf9, 0xc8, 0xf0, 0x35, 0x53, 0xf9, 0x4b, 0x10, 0xc7,
	0x05, 0x4d, 0xb7, 0xce, 0x69, 0x41, 0xcd, 0xd4, 0xd1, 0xc2, 0x19, 0x34, 0x3e, 0xcb, 0x1b, 0xa3,
	0x55, 0x36, 0xec, 0x8a, 0xba, 0x7d, 0x01, 0xad, 0xfc, 0x05, 0x2f, 0x53, 0xfc, 0x9b, 0x43, 0x4e,
	0x09, 0xb9, 0x8c, 0xa7, 0x8f, 0x0f, 0x2f, 0x71, 0xe2, 0x65, 0x4a, 0x7f, 0x3c, 0x95, 0xeb, 0x0e,
	0xfc, 0xbb, 0x83, 0xcd, 0x34, 0x36, 0x33, 0x18, 0x55, 0x39, 0x2e, 0x15, 0xeb, 0x03, 0xdd, 0xe4,
	0xaa, 0x40, 0xfe, 0xc3, 0xf9, 0xb5, 0x2d, 0x42, 0xee, 0xe3, 0xc4, 0x46, 0x57, 0x81, 0xb9, 0x7d,
	0x93, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x18, 0x3d, 0x2e, 0xb8, 0x02, 0x00, 0x00,
}
