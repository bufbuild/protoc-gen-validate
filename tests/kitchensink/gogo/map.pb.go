// Code generated by protoc-gen-gogo.
// source: map.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Map_Enum int32

const (
	Map_DEFAULT Map_Enum = 0
)

var Map_Enum_name = map[int32]string{
	0: "DEFAULT",
}
var Map_Enum_value = map[string]int32{
	"DEFAULT": 0,
}

func (x Map_Enum) String() string {
	return proto.EnumName(Map_Enum_name, int32(x))
}
func (Map_Enum) EnumDescriptor() ([]byte, []int) { return fileDescriptorMap, []int{0, 0} }

type Map struct {
	None        map[string]int64      `protobuf:"bytes,1,rep,name=none" json:"none,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MinPairs    map[int64][]byte      `protobuf:"bytes,2,rep,name=min_pairs,json=minPairs" json:"min_pairs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MaxPairs    map[string]float64    `protobuf:"bytes,3,rep,name=max_pairs,json=maxPairs" json:"max_pairs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MinMaxPairs map[string]float32    `protobuf:"bytes,4,rep,name=min_max_pairs,json=minMaxPairs" json:"min_max_pairs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	EqPairs     map[int32]Map_Enum    `protobuf:"bytes,5,rep,name=eq_pairs,json=eqPairs" json:"eq_pairs,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=tests.kitchensink.Map_Enum"`
	NoSparse    map[uint64]*Map_Embed `protobuf:"bytes,6,rep,name=no_sparse,json=noSparse" json:"no_sparse,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	ValueRules  map[string]Map_Enum   `protobuf:"bytes,7,rep,name=value_rules,json=valueRules" json:"value_rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=tests.kitchensink.Map_Enum"`
	KeyRules    map[uint32]*Map_Embed `protobuf:"bytes,8,rep,name=key_rules,json=keyRules" json:"key_rules,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Map) Reset()                    { *m = Map{} }
func (m *Map) String() string            { return proto.CompactTextString(m) }
func (*Map) ProtoMessage()               {}
func (*Map) Descriptor() ([]byte, []int) { return fileDescriptorMap, []int{0} }

func (m *Map) GetNone() map[string]int64 {
	if m != nil {
		return m.None
	}
	return nil
}

func (m *Map) GetMinPairs() map[int64][]byte {
	if m != nil {
		return m.MinPairs
	}
	return nil
}

func (m *Map) GetMaxPairs() map[string]float64 {
	if m != nil {
		return m.MaxPairs
	}
	return nil
}

func (m *Map) GetMinMaxPairs() map[string]float32 {
	if m != nil {
		return m.MinMaxPairs
	}
	return nil
}

func (m *Map) GetEqPairs() map[int32]Map_Enum {
	if m != nil {
		return m.EqPairs
	}
	return nil
}

func (m *Map) GetNoSparse() map[uint64]*Map_Embed {
	if m != nil {
		return m.NoSparse
	}
	return nil
}

func (m *Map) GetValueRules() map[string]Map_Enum {
	if m != nil {
		return m.ValueRules
	}
	return nil
}

func (m *Map) GetKeyRules() map[uint32]*Map_Embed {
	if m != nil {
		return m.KeyRules
	}
	return nil
}

type Map_Embed struct {
}

func (m *Map_Embed) Reset()                    { *m = Map_Embed{} }
func (m *Map_Embed) String() string            { return proto.CompactTextString(m) }
func (*Map_Embed) ProtoMessage()               {}
func (*Map_Embed) Descriptor() ([]byte, []int) { return fileDescriptorMap, []int{0, 8} }

func init() {
	proto.RegisterType((*Map)(nil), "tests.kitchensink.Map")
	proto.RegisterType((*Map_Embed)(nil), "tests.kitchensink.Map.Embed")
	proto.RegisterEnum("tests.kitchensink.Map_Enum", Map_Enum_name, Map_Enum_value)
}

func init() { proto.RegisterFile("map.proto", fileDescriptorMap) }

var fileDescriptorMap = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xdd, 0x8a, 0xd3, 0x40,
	0x1c, 0xc5, 0x33, 0xf9, 0xd8, 0x24, 0xff, 0x74, 0x77, 0xd3, 0xf1, 0x2b, 0x54, 0x2f, 0x4a, 0x15,
	0x2d, 0x82, 0x11, 0xab, 0xa0, 0x28, 0x08, 0x8a, 0xf5, 0x42, 0xb7, 0x8b, 0x8c, 0x5f, 0x5b, 0x6f,
	0xca, 0xac, 0x3b, 0x60, 0x48, 0x33, 0x49, 0x93, 0xb4, 0x6c, 0x6f, 0xf7, 0x31, 0xfa, 0x28, 0x5e,
	0x79, 0xe9, 0xab, 0xf8, 0x16, 0x92, 0x49, 0xec, 0x4e, 0x6b, 0xd3, 0x05, 0xbd, 0x9b, 0xe4, 0x7f,
	0xce, 0x6f, 0xce, 0x9f, 0x1c, 0x02, 0x76, 0x44, 0x13, 0x3f, 0x49, 0xe3, 0x3c, 0xc6, 0xcd, 0x9c,
	0x65, 0x79, 0xe6, 0x87, 0x41, 0xfe, 0xf5, 0x1b, 0xe3, 0x59, 0xc0, 0xc3, 0xd6, 0xb5, 0x19, 0x1d,
	0x07, 0x27, 0x34, 0x67, 0xf7, 0xff, 0x1c, 0x4a, 0x6d, 0xe7, 0x0c, 0x40, 0x1b, 0xd0, 0x04, 0x3f,
	0x02, 0x9d, 0xc7, 0x9c, 0x79, 0xa8, 0xad, 0x75, 0x9d, 0x5e, 0xdb, 0xff, 0x0b, 0xe1, 0x0f, 0x68,
	0xe2, 0x1f, 0xc6, 0x9c, 0xf5, 0x79, 0x9e, 0xce, 0x89, 0x50, 0xe3, 0x01, 0xd8, 0x51, 0xc0, 0x47,
	0x09, 0x0d, 0xd2, 0xcc, 0x53, 0x85, 0xf5, 0x56, 0x8d, 0x75, 0x10, 0xf0, 0x77, 0x85, 0x4c, 0xd8,
	0x5f, 0xc2, 0xf7, 0x5f, 0x3f, 0x34, 0x63, 0x81, 0x54, 0x0b, 0x11, 0x2b, 0xaa, 0x46, 0x02, 0x47,
	0x4f, 0x2b, 0x9c, 0xb6, 0x1d, 0x47, 0x4f, 0x37, 0xe1, 0x5c, 0x95, 0x58, 0x51, 0x35, 0xc2, 0x43,
	0xd8, 0x2d, 0xd2, 0x9d, 0x23, 0x75, 0x81, 0xbc, 0x53, 0x9f, 0x70, 0x95, 0xda, 0x28, 0xa8, 0xe6,
	0x02, 0xe9, 0x96, 0xe6, 0xea, 0xc4, 0x89, 0xce, 0xe7, 0xf8, 0x00, 0x2c, 0x36, 0xa9, 0xa8, 0x86,
	0xa0, 0xde, 0xac, 0xa1, 0xf6, 0x27, 0x1b, 0x89, 0x86, 0x6b, 0x10, 0x93, 0x4d, 0x96, 0x7b, 0xf3,
	0x78, 0x94, 0x25, 0x34, 0xcd, 0x98, 0xb7, 0xb3, 0x75, 0xef, 0xc3, 0xf8, 0xbd, 0x90, 0xad, 0xed,
	0xed, 0x21, 0x62, 0xf1, 0x6a, 0x84, 0x8f, 0xc0, 0x99, 0xd1, 0xf1, 0x94, 0x8d, 0xd2, 0xe9, 0x98,
	0x65, 0x9e, 0x29, 0x80, 0xb7, 0x6b, 0x80, 0x9f, 0x0a, 0x25, 0x29, 0x84, 0x25, 0x72, 0xbf, 0x40,
	0xc2, 0x02, 0x99, 0x77, 0x8d, 0x33, 0xa4, 0xba, 0x88, 0xc0, 0x6c, 0xa9, 0xc0, 0x43, 0xb0, 0x43,
	0x36, 0xaf, 0xb8, 0xd6, 0xd6, 0xa0, 0x6f, 0xd9, 0x5c, 0xa2, 0x5e, 0x2d, 0xa8, 0xcd, 0x05, 0xda,
	0xeb, 0x34, 0xde, 0xc0, 0x95, 0x23, 0x55, 0x51, 0xee, 0xfd, 0x54, 0x14, 0x85, 0x58, 0x61, 0x25,
	0x6b, 0x3d, 0x06, 0x7b, 0xd9, 0x2e, 0xec, 0x82, 0x16, 0xb2, 0xb9, 0x87, 0xda, 0xa8, 0x6b, 0x93,
	0xe2, 0x88, 0x2f, 0x83, 0x21, 0x72, 0x78, 0x6a, 0x1b, 0x75, 0x35, 0x52, 0x3e, 0x3c, 0x55, 0x9f,
	0xa0, 0xd6, 0x33, 0xd8, 0x5d, 0xe9, 0x96, 0x6c, 0xd6, 0x36, 0x98, 0x1b, 0xeb, 0x66, 0xf9, 0x9b,
	0x5f, 0x74, 0x33, 0x92, 0xcd, 0xcf, 0xc1, 0x5d, 0xef, 0xcc, 0x45, 0x7e, 0x55, 0xf6, 0x7f, 0x86,
	0x86, 0xdc, 0x0e, 0xd9, 0xdb, 0x2c, 0xbd, 0x0f, 0x64, 0xef, 0x5e, 0xef, 0x7a, 0x5d, 0xc7, 0xf8,
	0x34, 0x92, 0xc1, 0x43, 0xd8, 0x5d, 0xe9, 0x89, 0x4c, 0xd6, 0x4b, 0x72, 0x4f, 0x26, 0x3b, 0xbd,
	0x1b, 0x75, 0xe4, 0xe8, 0x98, 0x9d, 0xc8, 0xe8, 0x2f, 0xb0, 0xbf, 0xd6, 0x98, 0x0d, 0x2b, 0xff,
	0x7b, 0xec, 0x95, 0xd6, 0xc8, 0x64, 0xf3, 0xff, 0x62, 0x9b, 0x60, 0x88, 0x77, 0x9d, 0x4b, 0xa0,
	0x17, 0xd7, 0x62, 0x07, 0xcc, 0x57, 0xfd, 0xd7, 0x2f, 0x3e, 0x1e, 0x7c, 0x70, 0x95, 0xe3, 0x1d,
	0xf1, 0x2f, 0x7c, 0xf8, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x83, 0xfe, 0x5f, 0x44, 0x05, 0x00,
	0x00,
}
