// Code generated by protoc-gen-gogo.
// source: message.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Message struct {
	None     *Message_Embed `protobuf:"bytes,1,opt,name=none" json:"none,omitempty"`
	Required *Message_Embed `protobuf:"bytes,2,opt,name=required" json:"required,omitempty"`
	Skip     *Message_Embed `protobuf:"bytes,3,opt,name=skip" json:"skip,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func (m *Message) GetNone() *Message_Embed {
	if m != nil {
		return m.None
	}
	return nil
}

func (m *Message) GetRequired() *Message_Embed {
	if m != nil {
		return m.Required
	}
	return nil
}

func (m *Message) GetSkip() *Message_Embed {
	if m != nil {
		return m.Skip
	}
	return nil
}

type Message_Embed struct {
}

func (m *Message_Embed) Reset()                    { *m = Message_Embed{} }
func (m *Message_Embed) String() string            { return proto.CompactTextString(m) }
func (*Message_Embed) ProtoMessage()               {}
func (*Message_Embed) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0, 0} }

func init() {
	proto.RegisterType((*Message)(nil), "tests.kitchensink.Message")
	proto.RegisterType((*Message_Embed)(nil), "tests.kitchensink.Message.Embed")
}

func init() { proto.RegisterFile("message.proto", fileDescriptorMessage) }

var fileDescriptorMessage = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2c, 0x49, 0x2d, 0x2e, 0x29,
	0xd6, 0xcb, 0xce, 0x2c, 0x49, 0xce, 0x48, 0xcd, 0x2b, 0xce, 0xcc, 0xcb, 0x96, 0x12, 0x2f, 0x4b,
	0xcc, 0xc9, 0x4c, 0x49, 0x2c, 0x49, 0xd5, 0x87, 0x31, 0x20, 0x6a, 0x95, 0xae, 0x30, 0x72, 0xb1,
	0xfb, 0x42, 0x74, 0x0b, 0x99, 0x70, 0xb1, 0xe4, 0xe5, 0xe7, 0xa5, 0x4a, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x1b, 0x29, 0xe8, 0x61, 0x18, 0xa3, 0x07, 0x55, 0xa9, 0xe7, 0x9a, 0x9b, 0x94, 0x9a, 0x12,
	0x04, 0x56, 0x2d, 0xe4, 0xc1, 0xc5, 0x51, 0x94, 0x5a, 0x58, 0x9a, 0x59, 0x94, 0x9a, 0x22, 0xc1,
	0x44, 0x9c, 0x4e, 0x27, 0xae, 0x5d, 0x2f, 0x0f, 0x30, 0xb3, 0x76, 0x31, 0x32, 0x09, 0x30, 0x06,
	0xc1, 0x75, 0x0b, 0x39, 0x70, 0xb1, 0x14, 0x67, 0x67, 0x16, 0x48, 0x30, 0x93, 0x6a, 0x0a, 0x07,
	0x63, 0x10, 0x58, 0xa7, 0x14, 0x3b, 0x17, 0x2b, 0x58, 0x2a, 0x89, 0x0d, 0xec, 0x3b, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0x1e, 0xc0, 0x44, 0x1a, 0x01, 0x00, 0x00,
}
