// Code generated by protoc-gen-gogo.
// source: bytes.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Bytes struct {
	None     []byte `protobuf:"bytes,1,opt,name=none,proto3" json:"none,omitempty"`
	Min      []byte `protobuf:"bytes,2,opt,name=min,proto3" json:"min,omitempty"`
	Max      []byte `protobuf:"bytes,3,opt,name=max,proto3" json:"max,omitempty"`
	MinMax   []byte `protobuf:"bytes,4,opt,name=min_max,json=minMax,proto3" json:"min_max,omitempty"`
	EqLen    []byte `protobuf:"bytes,5,opt,name=eq_len,json=eqLen,proto3" json:"eq_len,omitempty"`
	Pattern  []byte `protobuf:"bytes,6,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Prefix   []byte `protobuf:"bytes,7,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Suffix   []byte `protobuf:"bytes,8,opt,name=suffix,proto3" json:"suffix,omitempty"`
	Contains []byte `protobuf:"bytes,9,opt,name=contains,proto3" json:"contains,omitempty"`
	In       []byte `protobuf:"bytes,10,opt,name=in,proto3" json:"in,omitempty"`
	NotIn    []byte `protobuf:"bytes,11,opt,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	Const    []byte `protobuf:"bytes,12,opt,name=const,proto3" json:"const,omitempty"`
	Ip       []byte `protobuf:"bytes,13,opt,name=ip,proto3" json:"ip,omitempty"`
	IpV4     []byte `protobuf:"bytes,14,opt,name=ip_v4,json=ipV4,proto3" json:"ip_v4,omitempty"`
	IpV6     []byte `protobuf:"bytes,15,opt,name=ip_v6,json=ipV6,proto3" json:"ip_v6,omitempty"`
}

func (m *Bytes) Reset()                    { *m = Bytes{} }
func (m *Bytes) String() string            { return proto.CompactTextString(m) }
func (*Bytes) ProtoMessage()               {}
func (*Bytes) Descriptor() ([]byte, []int) { return fileDescriptorBytes, []int{0} }

func (m *Bytes) GetNone() []byte {
	if m != nil {
		return m.None
	}
	return nil
}

func (m *Bytes) GetMin() []byte {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *Bytes) GetMax() []byte {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *Bytes) GetMinMax() []byte {
	if m != nil {
		return m.MinMax
	}
	return nil
}

func (m *Bytes) GetEqLen() []byte {
	if m != nil {
		return m.EqLen
	}
	return nil
}

func (m *Bytes) GetPattern() []byte {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (m *Bytes) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *Bytes) GetSuffix() []byte {
	if m != nil {
		return m.Suffix
	}
	return nil
}

func (m *Bytes) GetContains() []byte {
	if m != nil {
		return m.Contains
	}
	return nil
}

func (m *Bytes) GetIn() []byte {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *Bytes) GetNotIn() []byte {
	if m != nil {
		return m.NotIn
	}
	return nil
}

func (m *Bytes) GetConst() []byte {
	if m != nil {
		return m.Const
	}
	return nil
}

func (m *Bytes) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *Bytes) GetIpV4() []byte {
	if m != nil {
		return m.IpV4
	}
	return nil
}

func (m *Bytes) GetIpV6() []byte {
	if m != nil {
		return m.IpV6
	}
	return nil
}

func init() {
	proto.RegisterType((*Bytes)(nil), "tests.kitchensink.Bytes")
}

func init() { proto.RegisterFile("bytes.proto", fileDescriptorBytes) }

var fileDescriptorBytes = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xd2, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0xc0, 0x71, 0x66, 0x32, 0x49, 0xbb, 0xaf, 0xed, 0x76, 0x37, 0x8a, 0x46, 0x05, 0x91, 0xe2,
	0x4a, 0xdd, 0x85, 0x0a, 0xba, 0xec, 0xc1, 0x8b, 0x30, 0x37, 0x17, 0x05, 0xc9, 0x41, 0xbc, 0xd5,
	0x4c, 0xcd, 0xe0, 0x63, 0xb7, 0x2f, 0xb3, 0x33, 0xd9, 0xa5, 0xe6, 0x9b, 0xe8, 0x47, 0xf1, 0xe4,
	0xd7, 0xf1, 0x5b, 0x48, 0xd2, 0x56, 0x98, 0xdb, 0xe3, 0xfd, 0x7f, 0x33, 0x39, 0x24, 0x30, 0xaa,
	0x7e, 0x78, 0xdb, 0x2d, 0x9a, 0xd6, 0x79, 0x27, 0x8f, 0xbd, 0xed, 0x7c, 0xb7, 0xb8, 0x42, 0xbf,
	0xfa, 0x6e, 0xa9, 0x43, 0xba, 0x7a, 0xfc, 0xf0, 0xce, 0x5c, 0xe3, 0x37, 0xe3, 0xed, 0xab, 0xfd,
	0xb0, 0xb5, 0xb3, 0x5f, 0x05, 0xf0, 0x32, 0x7e, 0x2b, 0x25, 0x14, 0xe4, 0xc8, 0xaa, 0xec, 0x59,
	0x36, 0x1f, 0xeb, 0x34, 0xcb, 0x27, 0xc0, 0xd6, 0x48, 0x2a, 0x8f, 0xab, 0xf2, 0xe0, 0xf7, 0xdf,
	0x3f, 0xac, 0x08, 0xf9, 0x11, 0xd3, 0x71, 0x9b, 0xa2, 0xd9, 0x28, 0xd6, 0x8b, 0x0a, 0x74, 0xdc,
	0xca, 0xe7, 0x30, 0x58, 0x23, 0x2d, 0x23, 0x28, 0x12, 0x18, 0x45, 0x20, 0x42, 0x71, 0xc4, 0x14,
	0x68, 0xb1, 0x46, 0xfa, 0x68, 0x36, 0x72, 0x06, 0xc2, 0xde, 0x2c, 0xaf, 0x2d, 0x29, 0xde, 0x47,
	0x5c, 0x71, 0xcd, 0xed, 0xcd, 0x07, 0x4b, 0x72, 0x01, 0x83, 0xc6, 0x78, 0x6f, 0x5b, 0x52, 0x22,
	0xa1, 0xfb, 0x11, 0x4d, 0xc3, 0x64, 0x36, 0xaa, 0x9d, 0x3b, 0x9b, 0x57, 0xe6, 0xac, 0x7d, 0xf9,
	0x4e, 0xef, 0x51, 0xfc, 0x67, 0xd3, 0xda, 0x1a, 0x37, 0x6a, 0x90, 0x38, 0x44, 0xce, 0x03, 0x3b,
	0xcd, 0x7e, 0xea, 0x5d, 0x91, 0x27, 0x20, 0xba, 0xdb, 0x3a, 0x9a, 0x61, 0x32, 0x93, 0x68, 0x86,
	0x41, 0xbc, 0x2e, 0xaa, 0xdb, 0x10, 0xf4, 0x2e, 0xca, 0x39, 0x0c, 0x57, 0x8e, 0xbc, 0x41, 0xea,
	0xd4, 0x41, 0x82, 0xe3, 0x08, 0x07, 0x81, 0xbf, 0x65, 0x95, 0x09, 0xfa, 0x7f, 0x95, 0x2f, 0x20,
	0x47, 0x52, 0x90, 0xcc, 0x83, 0x68, 0x8e, 0xc3, 0xb4, 0x64, 0xb5, 0x73, 0x25, 0xab, 0x4c, 0x5b,
	0x26, 0x9d, 0x23, 0xc9, 0x53, 0x10, 0xe4, 0xfc, 0x12, 0x49, 0x8d, 0x92, 0xbd, 0x17, 0xed, 0x61,
	0x18, 0x5f, 0x16, 0x35, 0x86, 0x70, 0xb9, 0x3d, 0x9e, 0x93, 0xf3, 0xef, 0x49, 0x9e, 0x00, 0x5f,
	0x39, 0xea, 0xbc, 0x1a, 0x27, 0x3a, 0x8d, 0x14, 0xc2, 0x10, 0x44, 0xed, 0x5c, 0x65, 0x5a, 0xbd,
	0xad, 0xf2, 0x11, 0xe4, 0xd8, 0xa8, 0x49, 0xef, 0x16, 0x3e, 0x65, 0x3a, 0xc7, 0x46, 0x3e, 0x05,
	0x8e, 0xcd, 0xf2, 0xee, 0x5c, 0x1d, 0xf6, 0xea, 0x97, 0x4c, 0x17, 0xd8, 0x7c, 0x3e, 0xdf, 0xf7,
	0x0b, 0x35, 0xed, 0xf5, 0xaf, 0xdb, 0x7e, 0x51, 0x89, 0xf4, 0x46, 0xde, 0xfc, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0x21, 0xd2, 0x38, 0x34, 0x5e, 0x02, 0x00, 0x00,
}
