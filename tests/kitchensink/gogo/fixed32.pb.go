// Code generated by protoc-gen-gogo.
// source: fixed32.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Fixed32 struct {
	None      uint32 `protobuf:"fixed32,1,opt,name=none,proto3" json:"none,omitempty"`
	Lt        uint32 `protobuf:"fixed32,2,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte       uint32 `protobuf:"fixed32,3,opt,name=lte,proto3" json:"lte,omitempty"`
	Gt        uint32 `protobuf:"fixed32,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte       uint32 `protobuf:"fixed32,5,opt,name=gte,proto3" json:"gte,omitempty"`
	LtGt      uint32 `protobuf:"fixed32,6,opt,name=lt_gt,json=ltGt,proto3" json:"lt_gt,omitempty"`
	LtGte     uint32 `protobuf:"fixed32,7,opt,name=lt_gte,json=ltGte,proto3" json:"lt_gte,omitempty"`
	LteGt     uint32 `protobuf:"fixed32,8,opt,name=lte_gt,json=lteGt,proto3" json:"lte_gt,omitempty"`
	LteGte    uint32 `protobuf:"fixed32,9,opt,name=lte_gte,json=lteGte,proto3" json:"lte_gte,omitempty"`
	LtGtInv   uint32 `protobuf:"fixed32,10,opt,name=lt_gt_inv,json=ltGtInv,proto3" json:"lt_gt_inv,omitempty"`
	LtGteInv  uint32 `protobuf:"fixed32,11,opt,name=lt_gte_inv,json=ltGteInv,proto3" json:"lt_gte_inv,omitempty"`
	LteGtInv  uint32 `protobuf:"fixed32,12,opt,name=lte_gt_inv,json=lteGtInv,proto3" json:"lte_gt_inv,omitempty"`
	LteGteInv uint32 `protobuf:"fixed32,13,opt,name=lte_gte_inv,json=lteGteInv,proto3" json:"lte_gte_inv,omitempty"`
	In        uint32 `protobuf:"fixed32,14,opt,name=in,proto3" json:"in,omitempty"`
	NotIn     uint32 `protobuf:"fixed32,15,opt,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	Const     uint32 `protobuf:"fixed32,16,opt,name=const,proto3" json:"const,omitempty"`
}

func (m *Fixed32) Reset()                    { *m = Fixed32{} }
func (m *Fixed32) String() string            { return proto.CompactTextString(m) }
func (*Fixed32) ProtoMessage()               {}
func (*Fixed32) Descriptor() ([]byte, []int) { return fileDescriptorFixed32, []int{0} }

func (m *Fixed32) GetNone() uint32 {
	if m != nil {
		return m.None
	}
	return 0
}

func (m *Fixed32) GetLt() uint32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Fixed32) GetLte() uint32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Fixed32) GetGt() uint32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Fixed32) GetGte() uint32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Fixed32) GetLtGt() uint32 {
	if m != nil {
		return m.LtGt
	}
	return 0
}

func (m *Fixed32) GetLtGte() uint32 {
	if m != nil {
		return m.LtGte
	}
	return 0
}

func (m *Fixed32) GetLteGt() uint32 {
	if m != nil {
		return m.LteGt
	}
	return 0
}

func (m *Fixed32) GetLteGte() uint32 {
	if m != nil {
		return m.LteGte
	}
	return 0
}

func (m *Fixed32) GetLtGtInv() uint32 {
	if m != nil {
		return m.LtGtInv
	}
	return 0
}

func (m *Fixed32) GetLtGteInv() uint32 {
	if m != nil {
		return m.LtGteInv
	}
	return 0
}

func (m *Fixed32) GetLteGtInv() uint32 {
	if m != nil {
		return m.LteGtInv
	}
	return 0
}

func (m *Fixed32) GetLteGteInv() uint32 {
	if m != nil {
		return m.LteGteInv
	}
	return 0
}

func (m *Fixed32) GetIn() uint32 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *Fixed32) GetNotIn() uint32 {
	if m != nil {
		return m.NotIn
	}
	return 0
}

func (m *Fixed32) GetConst() uint32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func init() {
	proto.RegisterType((*Fixed32)(nil), "tests.kitchensink.Fixed32")
}

func init() { proto.RegisterFile("fixed32.proto", fileDescriptorFixed32) }

var fileDescriptorFixed32 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcf, 0x6a, 0x22, 0x41,
	0x10, 0xc6, 0xdb, 0x71, 0xfe, 0x68, 0xa9, 0xeb, 0xda, 0xac, 0x6c, 0xef, 0xb2, 0xca, 0xae, 0x8b,
	0x8b, 0x2c, 0x8c, 0x12, 0xc5, 0xa3, 0x97, 0x1c, 0x22, 0x7a, 0xf4, 0x05, 0xc4, 0x68, 0x65, 0x32,
	0x38, 0xf4, 0x84, 0x4c, 0x21, 0x79, 0xb6, 0x9c, 0xf2, 0x3a, 0x79, 0x81, 0x9c, 0x43, 0x57, 0xc7,
	0x48, 0x33, 0xb7, 0xc6, 0xef, 0xf7, 0xab, 0xfa, 0xec, 0x1e, 0x68, 0xdd, 0xa5, 0x4f, 0x78, 0x98,
	0x4d, 0xc7, 0x0f, 0x8f, 0x39, 0xe5, 0xb2, 0x43, 0x58, 0x50, 0x31, 0x3e, 0xa6, 0xb4, 0xbf, 0x47,
	0x5d, 0xa4, 0xfa, 0xf8, 0xf3, 0xfb, 0x69, 0x97, 0xa5, 0x87, 0x1d, 0xe1, 0xe4, 0x7c, 0xb0, 0xec,
	0xe0, 0xcd, 0x87, 0xe8, 0xc6, 0xda, 0x52, 0x82, 0xaf, 0x73, 0x8d, 0xaa, 0xf2, 0xbb, 0x32, 0x8a,
	0x36, 0x7c, 0x96, 0xbf, 0xc0, 0xcb, 0x48, 0x79, 0xe6, 0x97, 0xeb, 0xe6, 0xf3, 0xeb, 0x4b, 0x35,
	0x5a, 0x07, 0xdd, 0x40, 0x08, 0xb1, 0xf1, 0x32, 0x92, 0x7d, 0xa8, 0x66, 0x84, 0xaa, 0xea, 0xc4,
	0x3d, 0x8e, 0x4d, 0x60, 0xec, 0x84, 0x94, 0xef, 0xc4, 0x43, 0x6b, 0x27, 0x6c, 0x27, 0x84, 0x2a,
	0x70, 0xe2, 0xd8, 0xda, 0x09, 0xa1, 0xfc, 0x07, 0x41, 0x46, 0xdb, 0x84, 0x54, 0xc8, 0x44, 0xc7,
	0x10, 0xcd, 0x35, 0x74, 0xdb, 0x42, 0x88, 0x21, 0x18, 0xcc, 0xcf, 0x68, 0x49, 0x72, 0x04, 0x21,
	0x73, 0xa8, 0xa2, 0x32, 0x18, 0x33, 0x18, 0x18, 0x10, 0x2d, 0x89, 0x66, 0x64, 0xcd, 0x21, 0x7b,
	0x97, 0x91, 0x41, 0x46, 0xb8, 0x24, 0xf9, 0x1f, 0x22, 0x4b, 0xa2, 0xaa, 0x97, 0x51, 0x3b, 0x34,
	0x64, 0x14, 0x65, 0x0c, 0x75, 0xde, 0xbf, 0x4d, 0xf5, 0x49, 0x81, 0x5b, 0xe1, 0x9b, 0x19, 0xfc,
	0xc3, 0xd0, 0x91, 0xa9, 0xb0, 0xd2, 0x27, 0x39, 0x01, 0xb0, 0x75, 0x99, 0x6f, 0x94, 0xf9, 0x98,
	0xf9, 0x1a, 0x57, 0xfe, 0x14, 0xf0, 0xbc, 0xa0, 0xe9, 0xd6, 0xb9, 0x2c, 0xa8, 0x71, 0x1d, 0x23,
	0x5c, 0x41, 0xe3, 0xa3, 0x3c, 0x1b, 0xad, 0xb2, 0x61, 0x57, 0xd4, 0xed, 0x1f, 0x30, 0xca, 0x1f,
	0xf0, 0x52, 0xad, 0xbe, 0x38, 0xe4, 0xbc, 0x2f, 0x84, 0x98, 0xff, 0xe5, 0xe7, 0x4a, 0xb5, 0xb9,
	0x3c, 0x9d, 0x9b, 0x0e, 0xaa, 0xed, 0x60, 0x8b, 0x91, 0x10, 0x62, 0x11, 0xf3, 0xe5, 0xe9, 0x9c,
	0x56, 0x5a, 0x0e, 0x20, 0xd8, 0xe7, 0xba, 0x20, 0xf5, 0xd5, 0x79, 0xda, 0xd6, 0x94, 0x19, 0x8e,
	0x6e, 0x43, 0xfe, 0xfe, 0x66, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0x07, 0x10, 0x48, 0x54, 0xbc,
	0x02, 0x00, 0x00,
}
