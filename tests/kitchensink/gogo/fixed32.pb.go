// Code generated by protoc-gen-gogo.
// source: fixed32.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Fixed32 struct {
	None      uint32 `protobuf:"fixed32,1,opt,name=none,proto3" json:"none,omitempty"`
	Lt        uint32 `protobuf:"fixed32,2,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte       uint32 `protobuf:"fixed32,3,opt,name=lte,proto3" json:"lte,omitempty"`
	Gt        uint32 `protobuf:"fixed32,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte       uint32 `protobuf:"fixed32,5,opt,name=gte,proto3" json:"gte,omitempty"`
	LtGt      uint32 `protobuf:"fixed32,6,opt,name=lt_gt,json=ltGt,proto3" json:"lt_gt,omitempty"`
	LtGte     uint32 `protobuf:"fixed32,7,opt,name=lt_gte,json=ltGte,proto3" json:"lt_gte,omitempty"`
	LteGt     uint32 `protobuf:"fixed32,8,opt,name=lte_gt,json=lteGt,proto3" json:"lte_gt,omitempty"`
	LteGte    uint32 `protobuf:"fixed32,9,opt,name=lte_gte,json=lteGte,proto3" json:"lte_gte,omitempty"`
	LtGtInv   uint32 `protobuf:"fixed32,10,opt,name=lt_gt_inv,json=ltGtInv,proto3" json:"lt_gt_inv,omitempty"`
	LtGteInv  uint32 `protobuf:"fixed32,11,opt,name=lt_gte_inv,json=ltGteInv,proto3" json:"lt_gte_inv,omitempty"`
	LteGtInv  uint32 `protobuf:"fixed32,12,opt,name=lte_gt_inv,json=lteGtInv,proto3" json:"lte_gt_inv,omitempty"`
	LteGteInv uint32 `protobuf:"fixed32,13,opt,name=lte_gte_inv,json=lteGteInv,proto3" json:"lte_gte_inv,omitempty"`
	In        uint32 `protobuf:"fixed32,14,opt,name=in,proto3" json:"in,omitempty"`
	NotIn     uint32 `protobuf:"fixed32,15,opt,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	Const     uint32 `protobuf:"fixed32,16,opt,name=const,proto3" json:"const,omitempty"`
}

func (m *Fixed32) Reset()                    { *m = Fixed32{} }
func (m *Fixed32) String() string            { return proto.CompactTextString(m) }
func (*Fixed32) ProtoMessage()               {}
func (*Fixed32) Descriptor() ([]byte, []int) { return fileDescriptorFixed32, []int{0} }

func (m *Fixed32) GetNone() uint32 {
	if m != nil {
		return m.None
	}
	return 0
}

func (m *Fixed32) GetLt() uint32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Fixed32) GetLte() uint32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Fixed32) GetGt() uint32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Fixed32) GetGte() uint32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Fixed32) GetLtGt() uint32 {
	if m != nil {
		return m.LtGt
	}
	return 0
}

func (m *Fixed32) GetLtGte() uint32 {
	if m != nil {
		return m.LtGte
	}
	return 0
}

func (m *Fixed32) GetLteGt() uint32 {
	if m != nil {
		return m.LteGt
	}
	return 0
}

func (m *Fixed32) GetLteGte() uint32 {
	if m != nil {
		return m.LteGte
	}
	return 0
}

func (m *Fixed32) GetLtGtInv() uint32 {
	if m != nil {
		return m.LtGtInv
	}
	return 0
}

func (m *Fixed32) GetLtGteInv() uint32 {
	if m != nil {
		return m.LtGteInv
	}
	return 0
}

func (m *Fixed32) GetLteGtInv() uint32 {
	if m != nil {
		return m.LteGtInv
	}
	return 0
}

func (m *Fixed32) GetLteGteInv() uint32 {
	if m != nil {
		return m.LteGteInv
	}
	return 0
}

func (m *Fixed32) GetIn() uint32 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *Fixed32) GetNotIn() uint32 {
	if m != nil {
		return m.NotIn
	}
	return 0
}

func (m *Fixed32) GetConst() uint32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func init() {
	proto.RegisterType((*Fixed32)(nil), "tests.kitchensink.Fixed32")
}
func (m *Fixed32) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fixed32) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.None != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.None))
	}
	if m.Lt != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.Lt))
	}
	if m.Lte != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.Lte))
	}
	if m.Gt != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.Gt))
	}
	if m.Gte != 0 {
		dAtA[i] = 0x2d
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.Gte))
	}
	if m.LtGt != 0 {
		dAtA[i] = 0x35
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.LtGt))
	}
	if m.LtGte != 0 {
		dAtA[i] = 0x3d
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.LtGte))
	}
	if m.LteGt != 0 {
		dAtA[i] = 0x45
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.LteGt))
	}
	if m.LteGte != 0 {
		dAtA[i] = 0x4d
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.LteGte))
	}
	if m.LtGtInv != 0 {
		dAtA[i] = 0x55
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.LtGtInv))
	}
	if m.LtGteInv != 0 {
		dAtA[i] = 0x5d
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.LtGteInv))
	}
	if m.LteGtInv != 0 {
		dAtA[i] = 0x65
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.LteGtInv))
	}
	if m.LteGteInv != 0 {
		dAtA[i] = 0x6d
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.LteGteInv))
	}
	if m.In != 0 {
		dAtA[i] = 0x75
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.In))
	}
	if m.NotIn != 0 {
		dAtA[i] = 0x7d
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.NotIn))
	}
	if m.Const != 0 {
		dAtA[i] = 0x85
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed32Fixed32(dAtA, i, uint32(m.Const))
	}
	return i, nil
}

func encodeFixed64Fixed32(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Fixed32(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFixed32(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Fixed32) Size() (n int) {
	var l int
	_ = l
	if m.None != 0 {
		n += 5
	}
	if m.Lt != 0 {
		n += 5
	}
	if m.Lte != 0 {
		n += 5
	}
	if m.Gt != 0 {
		n += 5
	}
	if m.Gte != 0 {
		n += 5
	}
	if m.LtGt != 0 {
		n += 5
	}
	if m.LtGte != 0 {
		n += 5
	}
	if m.LteGt != 0 {
		n += 5
	}
	if m.LteGte != 0 {
		n += 5
	}
	if m.LtGtInv != 0 {
		n += 5
	}
	if m.LtGteInv != 0 {
		n += 5
	}
	if m.LteGtInv != 0 {
		n += 5
	}
	if m.LteGteInv != 0 {
		n += 5
	}
	if m.In != 0 {
		n += 5
	}
	if m.NotIn != 0 {
		n += 5
	}
	if m.Const != 0 {
		n += 6
	}
	return n
}

func sovFixed32(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFixed32(x uint64) (n int) {
	return sovFixed32(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Fixed32) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFixed32
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fixed32: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fixed32: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			m.None = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.None = uint32(dAtA[iNdEx-4])
			m.None |= uint32(dAtA[iNdEx-3]) << 8
			m.None |= uint32(dAtA[iNdEx-2]) << 16
			m.None |= uint32(dAtA[iNdEx-1]) << 24
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Lt = uint32(dAtA[iNdEx-4])
			m.Lt |= uint32(dAtA[iNdEx-3]) << 8
			m.Lt |= uint32(dAtA[iNdEx-2]) << 16
			m.Lt |= uint32(dAtA[iNdEx-1]) << 24
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Lte = uint32(dAtA[iNdEx-4])
			m.Lte |= uint32(dAtA[iNdEx-3]) << 8
			m.Lte |= uint32(dAtA[iNdEx-2]) << 16
			m.Lte |= uint32(dAtA[iNdEx-1]) << 24
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Gt = uint32(dAtA[iNdEx-4])
			m.Gt |= uint32(dAtA[iNdEx-3]) << 8
			m.Gt |= uint32(dAtA[iNdEx-2]) << 16
			m.Gt |= uint32(dAtA[iNdEx-1]) << 24
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Gte = uint32(dAtA[iNdEx-4])
			m.Gte |= uint32(dAtA[iNdEx-3]) << 8
			m.Gte |= uint32(dAtA[iNdEx-2]) << 16
			m.Gte |= uint32(dAtA[iNdEx-1]) << 24
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGt", wireType)
			}
			m.LtGt = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.LtGt = uint32(dAtA[iNdEx-4])
			m.LtGt |= uint32(dAtA[iNdEx-3]) << 8
			m.LtGt |= uint32(dAtA[iNdEx-2]) << 16
			m.LtGt |= uint32(dAtA[iNdEx-1]) << 24
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGte", wireType)
			}
			m.LtGte = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.LtGte = uint32(dAtA[iNdEx-4])
			m.LtGte |= uint32(dAtA[iNdEx-3]) << 8
			m.LtGte |= uint32(dAtA[iNdEx-2]) << 16
			m.LtGte |= uint32(dAtA[iNdEx-1]) << 24
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGt", wireType)
			}
			m.LteGt = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.LteGt = uint32(dAtA[iNdEx-4])
			m.LteGt |= uint32(dAtA[iNdEx-3]) << 8
			m.LteGt |= uint32(dAtA[iNdEx-2]) << 16
			m.LteGt |= uint32(dAtA[iNdEx-1]) << 24
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGte", wireType)
			}
			m.LteGte = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.LteGte = uint32(dAtA[iNdEx-4])
			m.LteGte |= uint32(dAtA[iNdEx-3]) << 8
			m.LteGte |= uint32(dAtA[iNdEx-2]) << 16
			m.LteGte |= uint32(dAtA[iNdEx-1]) << 24
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGtInv", wireType)
			}
			m.LtGtInv = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.LtGtInv = uint32(dAtA[iNdEx-4])
			m.LtGtInv |= uint32(dAtA[iNdEx-3]) << 8
			m.LtGtInv |= uint32(dAtA[iNdEx-2]) << 16
			m.LtGtInv |= uint32(dAtA[iNdEx-1]) << 24
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGteInv", wireType)
			}
			m.LtGteInv = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.LtGteInv = uint32(dAtA[iNdEx-4])
			m.LtGteInv |= uint32(dAtA[iNdEx-3]) << 8
			m.LtGteInv |= uint32(dAtA[iNdEx-2]) << 16
			m.LtGteInv |= uint32(dAtA[iNdEx-1]) << 24
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGtInv", wireType)
			}
			m.LteGtInv = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.LteGtInv = uint32(dAtA[iNdEx-4])
			m.LteGtInv |= uint32(dAtA[iNdEx-3]) << 8
			m.LteGtInv |= uint32(dAtA[iNdEx-2]) << 16
			m.LteGtInv |= uint32(dAtA[iNdEx-1]) << 24
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGteInv", wireType)
			}
			m.LteGteInv = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.LteGteInv = uint32(dAtA[iNdEx-4])
			m.LteGteInv |= uint32(dAtA[iNdEx-3]) << 8
			m.LteGteInv |= uint32(dAtA[iNdEx-2]) << 16
			m.LteGteInv |= uint32(dAtA[iNdEx-1]) << 24
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			m.In = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.In = uint32(dAtA[iNdEx-4])
			m.In |= uint32(dAtA[iNdEx-3]) << 8
			m.In |= uint32(dAtA[iNdEx-2]) << 16
			m.In |= uint32(dAtA[iNdEx-1]) << 24
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			m.NotIn = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.NotIn = uint32(dAtA[iNdEx-4])
			m.NotIn |= uint32(dAtA[iNdEx-3]) << 8
			m.NotIn |= uint32(dAtA[iNdEx-2]) << 16
			m.NotIn |= uint32(dAtA[iNdEx-1]) << 24
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Const = uint32(dAtA[iNdEx-4])
			m.Const |= uint32(dAtA[iNdEx-3]) << 8
			m.Const |= uint32(dAtA[iNdEx-2]) << 16
			m.Const |= uint32(dAtA[iNdEx-1]) << 24
		default:
			iNdEx = preIndex
			skippy, err := skipFixed32(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFixed32
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFixed32(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFixed32
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFixed32
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFixed32
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFixed32
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFixed32
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFixed32(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFixed32 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFixed32   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fixed32.proto", fileDescriptorFixed32) }

var fileDescriptorFixed32 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcf, 0x8e, 0xda, 0x30,
	0x10, 0xc6, 0x9d, 0x90, 0x3f, 0x30, 0x84, 0x52, 0xac, 0xa2, 0xba, 0x55, 0x89, 0x5a, 0x2a, 0x2a,
	0x54, 0x29, 0xa0, 0x82, 0x38, 0x72, 0xe1, 0x50, 0x04, 0x47, 0x5e, 0x00, 0x51, 0x70, 0xd3, 0x88,
	0xc8, 0xa9, 0x9a, 0x11, 0xea, 0xb3, 0xed, 0x69, 0x8f, 0x7b, 0xdc, 0x47, 0x58, 0x71, 0xdb, 0x17,
	0xd8, 0xf3, 0xca, 0xe3, 0x65, 0x91, 0x95, 0x9b, 0xc5, 0xf7, 0xfb, 0xcd, 0x7c, 0xd8, 0x81, 0xd6,
	0xef, 0xec, 0xbf, 0x3c, 0x4c, 0x27, 0xa3, 0xbf, 0xff, 0x0a, 0x2c, 0x78, 0x07, 0x65, 0x89, 0xe5,
	0xe8, 0x98, 0xe1, 0xfe, 0x8f, 0x54, 0x65, 0xa6, 0x8e, 0x1f, 0xdf, 0x9f, 0x76, 0x79, 0x76, 0xd8,
	0xa1, 0x1c, 0x5f, 0x0e, 0x86, 0xed, 0x3f, 0x79, 0x10, 0xfe, 0x34, 0x36, 0xe7, 0xe0, 0xa9, 0x42,
	0x49, 0xe1, 0x7c, 0x76, 0x86, 0xe1, 0x86, 0xce, 0xfc, 0x13, 0xb8, 0x39, 0x0a, 0x57, 0xff, 0xb2,
	0x88, 0x6e, 0x1e, 0x6f, 0x6b, 0xe1, 0xda, 0xef, 0xfa, 0x8c, 0xb1, 0x8d, 0x9b, 0x23, 0x8f, 0xa1,
	0x96, 0xa3, 0x14, 0x35, 0x2b, 0xee, 0x51, 0xac, 0x03, 0x6d, 0xa7, 0x28, 0x3c, 0x2b, 0x1e, 0x18,
	0x3b, 0x25, 0x3b, 0x45, 0x29, 0x7c, 0x2b, 0x4e, 0x8c, 0x9d, 0xa2, 0xe4, 0xdf, 0xc0, 0xcf, 0x71,
	0x9b, 0xa2, 0x08, 0x88, 0xe8, 0x68, 0x22, 0x5a, 0x43, 0xb7, 0xcd, 0x18, 0x1b, 0x80, 0xc6, 0xbc,
	0x1c, 0x97, 0xc8, 0x87, 0x10, 0x10, 0x27, 0x45, 0x58, 0x05, 0x13, 0x02, 0x7d, 0x0d, 0x4a, 0x43,
	0x4a, 0x3d, 0xb2, 0x6e, 0x91, 0xbd, 0xeb, 0x48, 0x3f, 0x47, 0xb9, 0x44, 0xfe, 0x1d, 0x42, 0x43,
	0x4a, 0xd1, 0xa8, 0xa2, 0x66, 0x68, 0x40, 0xa8, 0xe4, 0x09, 0x34, 0x68, 0xff, 0x36, 0x53, 0x27,
	0x01, 0x76, 0x85, 0x77, 0x7a, 0xf0, 0x07, 0x4d, 0x87, 0xba, 0xc2, 0x4a, 0x9d, 0xf8, 0x18, 0xc0,
	0xd4, 0x25, 0xbe, 0x59, 0xe5, 0x13, 0xe2, 0xeb, 0x54, 0xf9, 0x55, 0x90, 0x97, 0x05, 0x91, 0x5d,
	0xe7, 0xba, 0xa0, 0x4e, 0x75, 0xb4, 0xf0, 0x03, 0x9a, 0x2f, 0xe5, 0xc9, 0x68, 0x55, 0x0d, 0xb3,
	0xa2, 0x61, 0xfe, 0x80, 0x56, 0xbe, 0x80, 0x9b, 0x29, 0xf1, 0xc6, 0x22, 0x67, 0x31, 0x63, 0x6c,
	0xf6, 0x95, 0x9e, 0x2b, 0x53, 0xfa, 0xf2, 0x54, 0xa1, 0x3b, 0x88, 0xb6, 0x85, 0xcd, 0x87, 0x8c,
	0xb1, 0x79, 0x42, 0x97, 0xa7, 0x0a, 0x5c, 0x29, 0xde, 0x07, 0x7f, 0x5f, 0xa8, 0x12, 0xc5, 0x5b,
	0xeb, 0x69, 0x5b, 0x13, 0x62, 0x28, 0x5a, 0x44, 0x77, 0xe7, 0xd8, 0xb9, 0x3f, 0xc7, 0xce, 0xc3,
	0x39, 0x76, 0x7e, 0x05, 0xf4, 0x35, 0x4e, 0x9f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x87, 0x1f, 0x10,
	0xa3, 0xca, 0x02, 0x00, 0x00,
}
