// Code generated by protoc-gen-gogo.
// source: any.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf4 "github.com/gogo/protobuf/types"
import _ "github.com/lyft/protoc-gen-validate/validate"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Any struct {
	None     *google_protobuf4.Any `protobuf:"bytes,1,opt,name=none" json:"none,omitempty"`
	Required *google_protobuf4.Any `protobuf:"bytes,2,opt,name=required" json:"required,omitempty"`
	In       *google_protobuf4.Any `protobuf:"bytes,3,opt,name=in" json:"in,omitempty"`
	NotIn    *google_protobuf4.Any `protobuf:"bytes,4,opt,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *Any) Reset()                    { *m = Any{} }
func (m *Any) String() string            { return proto.CompactTextString(m) }
func (*Any) ProtoMessage()               {}
func (*Any) Descriptor() ([]byte, []int) { return fileDescriptorAny, []int{0} }

func (m *Any) GetNone() *google_protobuf4.Any {
	if m != nil {
		return m.None
	}
	return nil
}

func (m *Any) GetRequired() *google_protobuf4.Any {
	if m != nil {
		return m.Required
	}
	return nil
}

func (m *Any) GetIn() *google_protobuf4.Any {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *Any) GetNotIn() *google_protobuf4.Any {
	if m != nil {
		return m.NotIn
	}
	return nil
}

func init() {
	proto.RegisterType((*Any)(nil), "tests.kitchensink.Any")
}
func (m *Any) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Any) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.None != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAny(dAtA, i, uint64(m.None.Size()))
		n1, err := m.None.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Required != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAny(dAtA, i, uint64(m.Required.Size()))
		n2, err := m.Required.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.In != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAny(dAtA, i, uint64(m.In.Size()))
		n3, err := m.In.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.NotIn != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAny(dAtA, i, uint64(m.NotIn.Size()))
		n4, err := m.NotIn.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeFixed64Any(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Any(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAny(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Any) Size() (n int) {
	var l int
	_ = l
	if m.None != nil {
		l = m.None.Size()
		n += 1 + l + sovAny(uint64(l))
	}
	if m.Required != nil {
		l = m.Required.Size()
		n += 1 + l + sovAny(uint64(l))
	}
	if m.In != nil {
		l = m.In.Size()
		n += 1 + l + sovAny(uint64(l))
	}
	if m.NotIn != nil {
		l = m.NotIn.Size()
		n += 1 + l + sovAny(uint64(l))
	}
	return n
}

func sovAny(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAny(x uint64) (n int) {
	return sovAny(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Any) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAny
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Any: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Any: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAny
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAny
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.None == nil {
				m.None = &google_protobuf4.Any{}
			}
			if err := m.None.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAny
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAny
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Required == nil {
				m.Required = &google_protobuf4.Any{}
			}
			if err := m.Required.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAny
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAny
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.In == nil {
				m.In = &google_protobuf4.Any{}
			}
			if err := m.In.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAny
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAny
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotIn == nil {
				m.NotIn = &google_protobuf4.Any{}
			}
			if err := m.NotIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAny(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAny
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAny(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAny
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAny
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAny
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAny
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAny
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAny(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAny = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAny   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("any.proto", fileDescriptorAny) }

var fileDescriptorAny = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xcc, 0xab, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2c, 0x49, 0x2d, 0x2e, 0x29, 0xd6, 0xcb, 0xce, 0x2c,
	0x49, 0xce, 0x48, 0xcd, 0x2b, 0xce, 0xcc, 0xcb, 0x96, 0x92, 0x4c, 0xcf, 0xcf, 0x4f, 0xcf, 0x49,
	0xd5, 0x07, 0x2b, 0x48, 0x2a, 0x4d, 0xd3, 0x87, 0xab, 0x96, 0x12, 0x2f, 0x4b, 0xcc, 0xc9, 0x4c,
	0x49, 0x2c, 0x49, 0xd5, 0x87, 0x31, 0x20, 0x12, 0x4a, 0xaf, 0x18, 0xb9, 0x98, 0x1d, 0xf3, 0x2a,
	0x85, 0x34, 0xb8, 0x58, 0xf2, 0xf2, 0xf3, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0x44,
	0xf4, 0x20, 0x46, 0xe9, 0xc1, 0x8c, 0xd2, 0x73, 0xcc, 0xab, 0x0c, 0x02, 0xab, 0x10, 0xb2, 0xe1,
	0xe2, 0x28, 0x4a, 0x2d, 0x2c, 0xcd, 0x2c, 0x4a, 0x4d, 0x91, 0x60, 0xc2, 0xad, 0xda, 0x89, 0x6b,
	0xd7, 0xcb, 0x03, 0xcc, 0xac, 0x8b, 0x18, 0x99, 0x38, 0x18, 0x83, 0xe0, 0x3a, 0x84, 0x2c, 0xb8,
	0x98, 0x32, 0xf3, 0x24, 0x98, 0xf1, 0xe8, 0x13, 0x02, 0xe9, 0xe3, 0x5d, 0xc4, 0xc8, 0x25, 0xc4,
	0x9c, 0x96, 0x9f, 0x2f, 0xc4, 0x9c, 0x94, 0x58, 0x14, 0xc4, 0x94, 0x99, 0x27, 0xe4, 0xc8, 0xc5,
	0x96, 0x97, 0x5f, 0x12, 0x9f, 0x99, 0x27, 0xc1, 0x82, 0x47, 0xb7, 0x08, 0x48, 0x37, 0xff, 0x22,
	0x46, 0x1e, 0x29, 0x96, 0xb4, 0xcc, 0xaa, 0x2a, 0x29, 0x96, 0xa4, 0xd2, 0xaa, 0xaa, 0x20, 0xd6,
	0xbc, 0xfc, 0x12, 0xcf, 0x3c, 0x27, 0x9e, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0x31, 0x89, 0x0d, 0xac, 0xd1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x9f,
	0x70, 0x8d, 0x55, 0x01, 0x00, 0x00,
}
