// Code generated by protoc-gen-gogo.
// source: any.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf4 "github.com/gogo/protobuf/types"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Any struct {
	None     *google_protobuf4.Any `protobuf:"bytes,1,opt,name=none" json:"none,omitempty"`
	Required *google_protobuf4.Any `protobuf:"bytes,2,opt,name=required" json:"required,omitempty"`
	In       *google_protobuf4.Any `protobuf:"bytes,3,opt,name=in" json:"in,omitempty"`
	NotIn    *google_protobuf4.Any `protobuf:"bytes,4,opt,name=not_in,json=notIn" json:"not_in,omitempty"`
}

func (m *Any) Reset()                    { *m = Any{} }
func (m *Any) String() string            { return proto.CompactTextString(m) }
func (*Any) ProtoMessage()               {}
func (*Any) Descriptor() ([]byte, []int) { return fileDescriptorAny, []int{0} }

func (m *Any) GetNone() *google_protobuf4.Any {
	if m != nil {
		return m.None
	}
	return nil
}

func (m *Any) GetRequired() *google_protobuf4.Any {
	if m != nil {
		return m.Required
	}
	return nil
}

func (m *Any) GetIn() *google_protobuf4.Any {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *Any) GetNotIn() *google_protobuf4.Any {
	if m != nil {
		return m.NotIn
	}
	return nil
}

func init() {
	proto.RegisterType((*Any)(nil), "tests.kitchensink.Any")
}

func init() { proto.RegisterFile("any.proto", fileDescriptorAny) }

var fileDescriptorAny = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xcc, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x71, 0x36, 0x9b, 0x96, 0x3a, 0x2a, 0xe2, 0x50, 0x30, 0xe6, 0x24, 0x9e, 0x7a, 0xda,
	0x80, 0x5e, 0x3c, 0x78, 0x89, 0x37, 0xaf, 0x79, 0x01, 0xc9, 0xda, 0x4d, 0x1d, 0x5a, 0x66, 0x74,
	0xb3, 0x11, 0xb2, 0x8f, 0x93, 0xc7, 0xf0, 0xe4, 0xeb, 0xe8, 0x53, 0x48, 0x53, 0xda, 0x9b, 0xbd,
	0x0d, 0xcc, 0xff, 0xf7, 0xc1, 0x49, 0xcd, 0xbd, 0x79, 0xf7, 0x12, 0x04, 0x2f, 0x83, 0x6b, 0x43,
	0x6b, 0xd6, 0x14, 0x5e, 0xdf, 0x1c, 0xb7, 0xc4, 0xeb, 0xfc, 0x7a, 0x25, 0xb2, 0xda, 0xb8, 0x62,
	0x0c, 0x6c, 0xd7, 0x14, 0x87, 0x3a, 0xbf, 0xfa, 0xac, 0x37, 0xb4, 0xac, 0x83, 0x2b, 0xf6, 0xc7,
	0xee, 0x71, 0xfb, 0xab, 0x40, 0x97, 0xdc, 0xe3, 0x02, 0x52, 0x16, 0x76, 0x99, 0xba, 0x51, 0x8b,
	0xd3, 0xbb, 0xb9, 0xd9, 0x4d, 0x99, 0xfd, 0x94, 0x29, 0xb9, 0xaf, 0xc6, 0x02, 0x1f, 0x61, 0xe6,
	0xdd, 0x47, 0x47, 0xde, 0x2d, 0xb3, 0xe4, 0xff, 0xfa, 0x09, 0xbe, 0x7e, 0xbe, 0xf5, 0x64, 0x50,
	0xc9, 0x4c, 0x55, 0x07, 0x81, 0x0f, 0x90, 0x10, 0x67, 0xfa, 0x88, 0xc3, 0xad, 0x3b, 0x1f, 0x14,
	0xa0, 0x6e, 0x44, 0x50, 0xdb, 0xda, 0x57, 0x09, 0x31, 0x96, 0x30, 0x65, 0x09, 0x2f, 0xc4, 0x59,
	0x7a, 0x44, 0xcf, 0xb7, 0xfa, 0x62, 0x50, 0x67, 0x79, 0xda, 0x50, 0x8c, 0x79, 0x6a, 0xbb, 0x18,
	0xab, 0x09, 0x4b, 0x78, 0x66, 0x3b, 0x1d, 0xd3, 0xfb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee,
	0xcf, 0x36, 0xeb, 0x47, 0x01, 0x00, 0x00,
}
