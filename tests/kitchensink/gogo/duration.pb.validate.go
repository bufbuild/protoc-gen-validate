// Code generated by protoc-gen-validate
// source: duration.proto
// DO NOT EDIT!!!

package tests_kitchensink

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)

	_ = types.DynamicAny{}
)

// Validate checks the field values on Duration with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Duration) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetNone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DurationValidationError{
				Field:  "None",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	if d := m.GetLt(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "Lt",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		lt := time.Duration(5*time.Second + 0*time.Nanosecond)

		if dur >= lt {
			return DurationValidationError{
				Field:  "Lt",
				Reason: "value must be less than 5s",
			}
		}

	}

	if d := m.GetLte(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "Lte",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		lte := time.Duration(5*time.Second + 0*time.Nanosecond)

		if dur > lte {
			return DurationValidationError{
				Field:  "Lte",
				Reason: "value must be less than or equal to 5s",
			}
		}

	}

	if d := m.GetGt(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "Gt",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		gt := time.Duration(5*time.Second + 0*time.Nanosecond)

		if dur <= gt {
			return DurationValidationError{
				Field:  "Gt",
				Reason: "value must be greater than 5s",
			}
		}

	}

	if d := m.GetGte(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "Gte",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		gte := time.Duration(5*time.Second + 0*time.Nanosecond)

		if dur < gte {
			return DurationValidationError{
				Field:  "Gte",
				Reason: "value must be greater than or equal to 5s",
			}
		}

	}

	if d := m.GetLtGt(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "LtGt",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		lt := time.Duration(15*time.Second + 0*time.Nanosecond)
		gt := time.Duration(10*time.Second + 0*time.Nanosecond)

		if dur <= gt || dur >= lt {
			return DurationValidationError{
				Field:  "LtGt",
				Reason: "value must be inside range (10s, 15s)",
			}
		}

	}

	if d := m.GetLtGte(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "LtGte",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		lt := time.Duration(15*time.Second + 0*time.Nanosecond)
		gte := time.Duration(10*time.Second + 0*time.Nanosecond)

		if dur < gte || dur >= lt {
			return DurationValidationError{
				Field:  "LtGte",
				Reason: "value must be inside range [10s, 15s)",
			}
		}

	}

	if d := m.GetLteGt(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "LteGt",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		lte := time.Duration(15*time.Second + 0*time.Nanosecond)
		gt := time.Duration(10*time.Second + 0*time.Nanosecond)

		if dur <= gt || dur > lte {
			return DurationValidationError{
				Field:  "LteGt",
				Reason: "value must be inside range (10s, 15s]",
			}
		}

	}

	if d := m.GetLteGte(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "LteGte",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		lte := time.Duration(15*time.Second + 0*time.Nanosecond)
		gte := time.Duration(10*time.Second + 0*time.Nanosecond)

		if dur < gte || dur > lte {
			return DurationValidationError{
				Field:  "LteGte",
				Reason: "value must be inside range [10s, 15s]",
			}
		}

	}

	if d := m.GetLtGtInv(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "LtGtInv",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		lt := time.Duration(20*time.Second + 0*time.Nanosecond)
		gt := time.Duration(25*time.Second + 0*time.Nanosecond)

		if dur >= lt && dur <= gt {
			return DurationValidationError{
				Field:  "LtGtInv",
				Reason: "value must be outside range [20s, 25s]",
			}
		}

	}

	if d := m.GetLtGteInv(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "LtGteInv",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		lt := time.Duration(20*time.Second + 0*time.Nanosecond)
		gte := time.Duration(25*time.Second + 0*time.Nanosecond)

		if dur >= lt && dur < gte {
			return DurationValidationError{
				Field:  "LtGteInv",
				Reason: "value must be outside range [20s, 25s)",
			}
		}

	}

	if d := m.GetLteGtInv(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "LteGtInv",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		lte := time.Duration(20*time.Second + 0*time.Nanosecond)
		gt := time.Duration(25*time.Second + 0*time.Nanosecond)

		if dur > lte && dur <= gt {
			return DurationValidationError{
				Field:  "LteGtInv",
				Reason: "value must be outside range (20s, 25s]",
			}
		}

	}

	if d := m.GetLteGteInv(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "LteGteInv",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		lte := time.Duration(20*time.Second + 0*time.Nanosecond)
		gte := time.Duration(25*time.Second + 0*time.Nanosecond)

		if dur > lte && dur < gte {
			return DurationValidationError{
				Field:  "LteGteInv",
				Reason: "value must be outside range (20s, 25s)",
			}
		}

	}

	if m.GetRequired() == nil {
		return DurationValidationError{
			Field:  "Required",
			Reason: "value is required",
		}
	}

	if d := m.GetIn(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "In",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		if _, ok := _Duration_In_InLookup[dur]; !ok {
			return DurationValidationError{
				Field:  "In",
				Reason: "value must be in list [seconds:123 ]",
			}
		}

	}

	if d := m.GetNotIn(); d != nil {
		dur, err := types.DurationFromProto(d)
		if err != nil {
			return DurationValidationError{
				Field:  "NotIn",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		if _, ok := _Duration_NotIn_NotInLookup[dur]; ok {
			return DurationValidationError{
				Field:  "NotIn",
				Reason: "value must not be in list [seconds:123 ]",
			}
		}

	}

	if d := m.GetGogo1(); d != nil {
		dur := *d

		lt := time.Duration(5*time.Second + 0*time.Nanosecond)

		if dur >= lt {
			return DurationValidationError{
				Field:  "Gogo1",
				Reason: "value must be less than 5s",
			}
		}

	}

	if d := m.GetGogo2(); true {
		dur, err := types.DurationFromProto(&d)
		if err != nil {
			return DurationValidationError{
				Field:  "Gogo2",
				Reason: "value is not a valid duration",
				Cause:  err,
			}
		}

		lt := time.Duration(5*time.Second + 0*time.Nanosecond)

		if dur >= lt {
			return DurationValidationError{
				Field:  "Gogo2",
				Reason: "value must be less than 5s",
			}
		}

	}

	if true {
		dur := m.GetGogo3()

		lt := time.Duration(5*time.Second + 0*time.Nanosecond)

		if dur >= lt {
			return DurationValidationError{
				Field:  "Gogo3",
				Reason: "value must be less than 5s",
			}
		}

	}

	return nil
}

// DurationValidationError is the validation error returned by
// Duration.Validate if the designated constraints aren't met.
type DurationValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e DurationValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDuration.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = DurationValidationError{}

var _Duration_In_InLookup = map[time.Duration]struct{}{
	123000000000: {},
}

var _Duration_NotIn_NotInLookup = map[time.Duration]struct{}{
	123000000000: {},
}
