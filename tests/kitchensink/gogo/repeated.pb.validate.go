// Code generated by protoc-gen-validate
// source: repeated.proto
// DO NOT EDIT!!!

package tests_kitchensink

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)

	_ = types.DynamicAny{}
)

// Validate checks the field values on Repeated with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Repeated) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetMinItems()) < 1 {
		return RepeatedValidationError{
			Field:  "MinItems",
			Reason: "value must contain at least 1 item(s)",
		}
	}

	if len(m.GetMaxItems()) > 2 {
		return RepeatedValidationError{
			Field:  "MaxItems",
			Reason: "value must contain no more than 2 item(s)",
		}
	}

	if l := len(m.GetMinMaxItems()); l < 3 || l > 4 {
		return RepeatedValidationError{
			Field:  "MinMaxItems",
			Reason: "value must contain between 3 and 4 items, inclusive",
		}
	}

	if len(m.GetEqItems()) != 5 {
		return RepeatedValidationError{
			Field:  "EqItems",
			Reason: "value must contain exactly 5 item(s)",
		}
	}

	for idx, item := range m.GetEqItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RepeatedValidationError{
					Field:  fmt.Sprintf("EqItems[%v]", idx),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	_Repeated_Unique_Unique := make(map[int64]struct{}, len(m.GetUnique()))

	for idx, item := range m.GetUnique() {
		_, _ = idx, item

		if _, exists := _Repeated_Unique_Unique[item]; exists {
			return RepeatedValidationError{
				Field:  fmt.Sprintf("Unique[%v]", idx),
				Reason: "repeated value must contain unique items",
			}
		} else {
			_Repeated_Unique_Unique[item] = struct{}{}
		}

		// no validation rules for Unique[idx]
	}

	_Repeated_UniqueBytes_Unique := make(map[string]struct{}, len(m.GetUniqueBytes()))

	for idx, item := range m.GetUniqueBytes() {
		_, _ = idx, item

		if _, exists := _Repeated_UniqueBytes_Unique[string(item)]; exists {
			return RepeatedValidationError{
				Field:  fmt.Sprintf("UniqueBytes[%v]", idx),
				Reason: "repeated value must contain unique items",
			}
		} else {
			_Repeated_UniqueBytes_Unique[string(item)] = struct{}{}
		}

		// no validation rules for UniqueBytes[idx]
	}

	for idx, item := range m.GetItemRules() {
		_, _ = idx, item

		if item >= 3 {
			return RepeatedValidationError{
				Field:  fmt.Sprintf("ItemRules[%v]", idx),
				Reason: "value must be less than 3",
			}
		}

	}

	return nil
}

// RepeatedValidationError is the validation error returned by
// Repeated.Validate if the designated constraints aren't met.
type RepeatedValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e RepeatedValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeated.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = RepeatedValidationError{}

// Validate checks the field values on Repeated_Embed with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Repeated_Embed) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// Repeated_EmbedValidationError is the validation error returned by
// Repeated_Embed.Validate if the designated constraints aren't met.
type Repeated_EmbedValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e Repeated_EmbedValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeated_Embed.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = Repeated_EmbedValidationError{}
