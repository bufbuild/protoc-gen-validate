// Code generated by protoc-gen-validate
// source: oneof.proto
// DO NOT EDIT!!!

package tests_kitchensink

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)

	_ = types.DynamicAny{}
)

// Validate checks the field values on OneOf with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OneOf) Validate() error {
	if m == nil {
		return nil
	}

	switch m.None.(type) {

	case *OneOf_String_:

		if utf8.RuneCountInString(m.GetString_()) < 5 {
			return OneOfValidationError{
				Field:  "String_",
				Reason: "value length must be at least 5 runes",
			}
		}

	case *OneOf_MsgNone:

		if v, ok := interface{}(m.GetMsgNone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OneOfValidationError{
					Field:  "MsgNone",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	switch m.Required.(type) {

	case *OneOf_Bytes:
		// no validation rules for Bytes

	case *OneOf_MsgReq:

		if m.GetMsgReq() == nil {
			return OneOfValidationError{
				Field:  "MsgReq",
				Reason: "value is required",
			}
		}

		if v, ok := interface{}(m.GetMsgReq()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OneOfValidationError{
					Field:  "MsgReq",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	case *OneOf_Enum_:

		if _, ok := OneOf_Enum_name[int32(m.GetEnum())]; !ok {
			return OneOfValidationError{
				Field:  "Enum",
				Reason: "value must be one of the defined enum values",
			}
		}

	case *OneOf_Embed_:

		if v, ok := interface{}(m.GetEmbed()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OneOfValidationError{
					Field:  "Embed",
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	case *OneOf_OtherEmbed_:
		// no validation rules for OtherEmbed

	default:
		return OneOfValidationError{
			Field:  "Required",
			Reason: "value is required",
		}

	}

	return nil
}

// OneOfValidationError is the validation error returned by OneOf.Validate if
// the designated constraints aren't met.
type OneOfValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e OneOfValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneOf.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = OneOfValidationError{}

// Validate checks the field values on OneOf_Embed with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OneOf_Embed) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// OneOf_EmbedValidationError is the validation error returned by
// OneOf_Embed.Validate if the designated constraints aren't met.
type OneOf_EmbedValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e OneOf_EmbedValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneOf_Embed.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = OneOf_EmbedValidationError{}

// Validate checks the field values on OneOf_OtherEmbed with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OneOf_OtherEmbed) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// OneOf_OtherEmbedValidationError is the validation error returned by
// OneOf_OtherEmbed.Validate if the designated constraints aren't met.
type OneOf_OtherEmbedValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e OneOf_OtherEmbedValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneOf_OtherEmbed.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = OneOf_OtherEmbedValidationError{}
