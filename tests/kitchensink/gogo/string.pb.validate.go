// Code generated by protoc-gen-validate
// source: string.proto
// DO NOT EDIT!!!

package tests_kitchensink

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)

	_ = types.DynamicAny{}
)

// Validate checks the field values on String with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *String) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for None

	if utf8.RuneCountInString(m.GetMin()) < 3 {
		return StringValidationError{
			Field:  "Min",
			Reason: "value length must be at least 3 runes",
		}
	}

	if utf8.RuneCountInString(m.GetMax()) > 10 {
		return StringValidationError{
			Field:  "Max",
			Reason: "value length must be at most 10 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetMinMax()); l < 3 || l > 10 {
		return StringValidationError{
			Field:  "MinMax",
			Reason: "value length must be between 3 and 10 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetEqLen()) != 5 {
		return StringValidationError{
			Field:  "EqLen",
			Reason: "value length must be 5 runes",
		}
	}

	if len(m.GetMinBytes()) < 4 {
		return StringValidationError{
			Field:  "MinBytes",
			Reason: "value length must be at least 4 bytes",
		}
	}

	if len(m.GetMaxBytes()) > 11 {
		return StringValidationError{
			Field:  "MaxBytes",
			Reason: "value length must be at most 11 bytes",
		}
	}

	if l := len(m.GetMinMaxBytes()); l < 4 || l > 11 {
		return StringValidationError{
			Field:  "MinMaxBytes",
			Reason: "value length must be between 4 and 11 bytes, inclusive",
		}
	}

	if len(m.GetEqBytes()) != 6 {
		return StringValidationError{
			Field:  "EqBytes",
			Reason: "value length must be 6 bytes",
		}
	}

	if !_String__Pattern_Pattern.MatchString(m.GetPattern()) {
		return StringValidationError{
			Field:  "Pattern",
			Reason: "value does not match regex pattern \"foo+(ba+r)?\"",
		}
	}

	if !strings.HasPrefix(m.GetPrefix(), "fizz") {
		return StringValidationError{
			Field:  "Prefix",
			Reason: "value does not have prefix \"fizz\"",
		}
	}

	if !strings.HasSuffix(m.GetSuffix(), "buzz") {
		return StringValidationError{
			Field:  "Suffix",
			Reason: "value does not have suffix \"buzz\"",
		}
	}

	if !strings.Contains(m.GetContains(), "baz") {
		return StringValidationError{
			Field:  "Contains",
			Reason: "value does not contain substring \"baz\"",
		}
	}

	if _, ok := _String__In_InLookup[m.GetIn()]; !ok {
		return StringValidationError{
			Field:  "In",
			Reason: "value must be in list [foo bar baz]",
		}
	}

	if _, ok := _String__NotIn_NotInLookup[m.GetNotIn()]; ok {
		return StringValidationError{
			Field:  "NotIn",
			Reason: "value must not be in list [fizz buzz]",
		}
	}

	if m.GetConst() != "foobar" {
		return StringValidationError{
			Field:  "Const",
			Reason: "value must equal foobar",
		}
	}

	if ip := net.ParseIP(m.GetIp()); ip == nil {
		return StringValidationError{
			Field:  "Ip",
			Reason: "value must be a valid IP address",
		}
	}

	if ip := net.ParseIP(m.GetIpV4()); ip == nil || ip.To4() == nil {
		return StringValidationError{
			Field:  "IpV4",
			Reason: "value must be a valid IPv4 address",
		}
	}

	if ip := net.ParseIP(m.GetIpV6()); ip == nil || ip.To4() != nil {
		return StringValidationError{
			Field:  "IpV6",
			Reason: "value must be a valid IPv6 address",
		}
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return StringValidationError{
			Field:  "Email",
			Reason: "value must be a valid email address",
			Cause:  err,
		}
	}

	if err := m._validateHostname(m.GetHost()); err != nil {
		return StringValidationError{
			Field:  "Host",
			Reason: "value must be a valid hostname",
			Cause:  err,
		}
	}

	if uri, err := url.Parse(m.GetUri()); err != nil {
		return StringValidationError{
			Field:  "Uri",
			Reason: "value must be a valid URI",
			Cause:  err,
		}
	} else if !uri.IsAbs() {
		return StringValidationError{
			Field:  "Uri",
			Reason: "value must be absolute",
		}
	}

	if _, err := url.Parse(m.GetUriRef()); err != nil {
		return StringValidationError{
			Field:  "UriRef",
			Reason: "value must be a valid URI",
			Cause:  err,
		}
	}

	return nil
}

func (m *String) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *String) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// StringValidationError is the validation error returned by String.Validate if
// the designated constraints aren't met.
type StringValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e StringValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sString.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = StringValidationError{}

var _String__Pattern_Pattern = regexp.MustCompile("foo+(ba+r)?")

var _String__In_InLookup = map[string]struct{}{
	"foo": {},
	"bar": {},
	"baz": {},
}

var _String__NotIn_NotInLookup = map[string]struct{}{
	"fizz": {},
	"buzz": {},
}
