// Code generated by protoc-gen-gogo.
// source: fixed64.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Fixed64 struct {
	None      uint64 `protobuf:"fixed64,1,opt,name=none,proto3" json:"none,omitempty"`
	Lt        uint64 `protobuf:"fixed64,2,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte       uint64 `protobuf:"fixed64,3,opt,name=lte,proto3" json:"lte,omitempty"`
	Gt        uint64 `protobuf:"fixed64,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte       uint64 `protobuf:"fixed64,5,opt,name=gte,proto3" json:"gte,omitempty"`
	LtGt      uint64 `protobuf:"fixed64,6,opt,name=lt_gt,json=ltGt,proto3" json:"lt_gt,omitempty"`
	LtGte     uint64 `protobuf:"fixed64,7,opt,name=lt_gte,json=ltGte,proto3" json:"lt_gte,omitempty"`
	LteGt     uint64 `protobuf:"fixed64,8,opt,name=lte_gt,json=lteGt,proto3" json:"lte_gt,omitempty"`
	LteGte    uint64 `protobuf:"fixed64,9,opt,name=lte_gte,json=lteGte,proto3" json:"lte_gte,omitempty"`
	LtGtInv   uint64 `protobuf:"fixed64,10,opt,name=lt_gt_inv,json=ltGtInv,proto3" json:"lt_gt_inv,omitempty"`
	LtGteInv  uint64 `protobuf:"fixed64,11,opt,name=lt_gte_inv,json=ltGteInv,proto3" json:"lt_gte_inv,omitempty"`
	LteGtInv  uint64 `protobuf:"fixed64,12,opt,name=lte_gt_inv,json=lteGtInv,proto3" json:"lte_gt_inv,omitempty"`
	LteGteInv uint64 `protobuf:"fixed64,13,opt,name=lte_gte_inv,json=lteGteInv,proto3" json:"lte_gte_inv,omitempty"`
	In        uint64 `protobuf:"fixed64,14,opt,name=in,proto3" json:"in,omitempty"`
	NotIn     uint64 `protobuf:"fixed64,15,opt,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	Const     uint64 `protobuf:"fixed64,16,opt,name=const,proto3" json:"const,omitempty"`
}

func (m *Fixed64) Reset()                    { *m = Fixed64{} }
func (m *Fixed64) String() string            { return proto.CompactTextString(m) }
func (*Fixed64) ProtoMessage()               {}
func (*Fixed64) Descriptor() ([]byte, []int) { return fileDescriptorFixed64, []int{0} }

func (m *Fixed64) GetNone() uint64 {
	if m != nil {
		return m.None
	}
	return 0
}

func (m *Fixed64) GetLt() uint64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Fixed64) GetLte() uint64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Fixed64) GetGt() uint64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Fixed64) GetGte() uint64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Fixed64) GetLtGt() uint64 {
	if m != nil {
		return m.LtGt
	}
	return 0
}

func (m *Fixed64) GetLtGte() uint64 {
	if m != nil {
		return m.LtGte
	}
	return 0
}

func (m *Fixed64) GetLteGt() uint64 {
	if m != nil {
		return m.LteGt
	}
	return 0
}

func (m *Fixed64) GetLteGte() uint64 {
	if m != nil {
		return m.LteGte
	}
	return 0
}

func (m *Fixed64) GetLtGtInv() uint64 {
	if m != nil {
		return m.LtGtInv
	}
	return 0
}

func (m *Fixed64) GetLtGteInv() uint64 {
	if m != nil {
		return m.LtGteInv
	}
	return 0
}

func (m *Fixed64) GetLteGtInv() uint64 {
	if m != nil {
		return m.LteGtInv
	}
	return 0
}

func (m *Fixed64) GetLteGteInv() uint64 {
	if m != nil {
		return m.LteGteInv
	}
	return 0
}

func (m *Fixed64) GetIn() uint64 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *Fixed64) GetNotIn() uint64 {
	if m != nil {
		return m.NotIn
	}
	return 0
}

func (m *Fixed64) GetConst() uint64 {
	if m != nil {
		return m.Const
	}
	return 0
}

func init() {
	proto.RegisterType((*Fixed64)(nil), "tests.kitchensink.Fixed64")
}
func (m *Fixed64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fixed64) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.None != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.None))
	}
	if m.Lt != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.Lt))
	}
	if m.Lte != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.Lte))
	}
	if m.Gt != 0 {
		dAtA[i] = 0x21
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.Gt))
	}
	if m.Gte != 0 {
		dAtA[i] = 0x29
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.Gte))
	}
	if m.LtGt != 0 {
		dAtA[i] = 0x31
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.LtGt))
	}
	if m.LtGte != 0 {
		dAtA[i] = 0x39
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.LtGte))
	}
	if m.LteGt != 0 {
		dAtA[i] = 0x41
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.LteGt))
	}
	if m.LteGte != 0 {
		dAtA[i] = 0x49
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.LteGte))
	}
	if m.LtGtInv != 0 {
		dAtA[i] = 0x51
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.LtGtInv))
	}
	if m.LtGteInv != 0 {
		dAtA[i] = 0x59
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.LtGteInv))
	}
	if m.LteGtInv != 0 {
		dAtA[i] = 0x61
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.LteGtInv))
	}
	if m.LteGteInv != 0 {
		dAtA[i] = 0x69
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.LteGteInv))
	}
	if m.In != 0 {
		dAtA[i] = 0x71
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.In))
	}
	if m.NotIn != 0 {
		dAtA[i] = 0x79
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.NotIn))
	}
	if m.Const != 0 {
		dAtA[i] = 0x81
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed64Fixed64(dAtA, i, uint64(m.Const))
	}
	return i, nil
}

func encodeFixed64Fixed64(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Fixed64(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFixed64(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Fixed64) Size() (n int) {
	var l int
	_ = l
	if m.None != 0 {
		n += 9
	}
	if m.Lt != 0 {
		n += 9
	}
	if m.Lte != 0 {
		n += 9
	}
	if m.Gt != 0 {
		n += 9
	}
	if m.Gte != 0 {
		n += 9
	}
	if m.LtGt != 0 {
		n += 9
	}
	if m.LtGte != 0 {
		n += 9
	}
	if m.LteGt != 0 {
		n += 9
	}
	if m.LteGte != 0 {
		n += 9
	}
	if m.LtGtInv != 0 {
		n += 9
	}
	if m.LtGteInv != 0 {
		n += 9
	}
	if m.LteGtInv != 0 {
		n += 9
	}
	if m.LteGteInv != 0 {
		n += 9
	}
	if m.In != 0 {
		n += 9
	}
	if m.NotIn != 0 {
		n += 9
	}
	if m.Const != 0 {
		n += 10
	}
	return n
}

func sovFixed64(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFixed64(x uint64) (n int) {
	return sovFixed64(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Fixed64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFixed64
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fixed64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fixed64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field None", wireType)
			}
			m.None = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.None = uint64(dAtA[iNdEx-8])
			m.None |= uint64(dAtA[iNdEx-7]) << 8
			m.None |= uint64(dAtA[iNdEx-6]) << 16
			m.None |= uint64(dAtA[iNdEx-5]) << 24
			m.None |= uint64(dAtA[iNdEx-4]) << 32
			m.None |= uint64(dAtA[iNdEx-3]) << 40
			m.None |= uint64(dAtA[iNdEx-2]) << 48
			m.None |= uint64(dAtA[iNdEx-1]) << 56
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lt", wireType)
			}
			m.Lt = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Lt = uint64(dAtA[iNdEx-8])
			m.Lt |= uint64(dAtA[iNdEx-7]) << 8
			m.Lt |= uint64(dAtA[iNdEx-6]) << 16
			m.Lt |= uint64(dAtA[iNdEx-5]) << 24
			m.Lt |= uint64(dAtA[iNdEx-4]) << 32
			m.Lt |= uint64(dAtA[iNdEx-3]) << 40
			m.Lt |= uint64(dAtA[iNdEx-2]) << 48
			m.Lt |= uint64(dAtA[iNdEx-1]) << 56
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lte", wireType)
			}
			m.Lte = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Lte = uint64(dAtA[iNdEx-8])
			m.Lte |= uint64(dAtA[iNdEx-7]) << 8
			m.Lte |= uint64(dAtA[iNdEx-6]) << 16
			m.Lte |= uint64(dAtA[iNdEx-5]) << 24
			m.Lte |= uint64(dAtA[iNdEx-4]) << 32
			m.Lte |= uint64(dAtA[iNdEx-3]) << 40
			m.Lte |= uint64(dAtA[iNdEx-2]) << 48
			m.Lte |= uint64(dAtA[iNdEx-1]) << 56
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			m.Gt = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Gt = uint64(dAtA[iNdEx-8])
			m.Gt |= uint64(dAtA[iNdEx-7]) << 8
			m.Gt |= uint64(dAtA[iNdEx-6]) << 16
			m.Gt |= uint64(dAtA[iNdEx-5]) << 24
			m.Gt |= uint64(dAtA[iNdEx-4]) << 32
			m.Gt |= uint64(dAtA[iNdEx-3]) << 40
			m.Gt |= uint64(dAtA[iNdEx-2]) << 48
			m.Gt |= uint64(dAtA[iNdEx-1]) << 56
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gte", wireType)
			}
			m.Gte = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Gte = uint64(dAtA[iNdEx-8])
			m.Gte |= uint64(dAtA[iNdEx-7]) << 8
			m.Gte |= uint64(dAtA[iNdEx-6]) << 16
			m.Gte |= uint64(dAtA[iNdEx-5]) << 24
			m.Gte |= uint64(dAtA[iNdEx-4]) << 32
			m.Gte |= uint64(dAtA[iNdEx-3]) << 40
			m.Gte |= uint64(dAtA[iNdEx-2]) << 48
			m.Gte |= uint64(dAtA[iNdEx-1]) << 56
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGt", wireType)
			}
			m.LtGt = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.LtGt = uint64(dAtA[iNdEx-8])
			m.LtGt |= uint64(dAtA[iNdEx-7]) << 8
			m.LtGt |= uint64(dAtA[iNdEx-6]) << 16
			m.LtGt |= uint64(dAtA[iNdEx-5]) << 24
			m.LtGt |= uint64(dAtA[iNdEx-4]) << 32
			m.LtGt |= uint64(dAtA[iNdEx-3]) << 40
			m.LtGt |= uint64(dAtA[iNdEx-2]) << 48
			m.LtGt |= uint64(dAtA[iNdEx-1]) << 56
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGte", wireType)
			}
			m.LtGte = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.LtGte = uint64(dAtA[iNdEx-8])
			m.LtGte |= uint64(dAtA[iNdEx-7]) << 8
			m.LtGte |= uint64(dAtA[iNdEx-6]) << 16
			m.LtGte |= uint64(dAtA[iNdEx-5]) << 24
			m.LtGte |= uint64(dAtA[iNdEx-4]) << 32
			m.LtGte |= uint64(dAtA[iNdEx-3]) << 40
			m.LtGte |= uint64(dAtA[iNdEx-2]) << 48
			m.LtGte |= uint64(dAtA[iNdEx-1]) << 56
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGt", wireType)
			}
			m.LteGt = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.LteGt = uint64(dAtA[iNdEx-8])
			m.LteGt |= uint64(dAtA[iNdEx-7]) << 8
			m.LteGt |= uint64(dAtA[iNdEx-6]) << 16
			m.LteGt |= uint64(dAtA[iNdEx-5]) << 24
			m.LteGt |= uint64(dAtA[iNdEx-4]) << 32
			m.LteGt |= uint64(dAtA[iNdEx-3]) << 40
			m.LteGt |= uint64(dAtA[iNdEx-2]) << 48
			m.LteGt |= uint64(dAtA[iNdEx-1]) << 56
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGte", wireType)
			}
			m.LteGte = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.LteGte = uint64(dAtA[iNdEx-8])
			m.LteGte |= uint64(dAtA[iNdEx-7]) << 8
			m.LteGte |= uint64(dAtA[iNdEx-6]) << 16
			m.LteGte |= uint64(dAtA[iNdEx-5]) << 24
			m.LteGte |= uint64(dAtA[iNdEx-4]) << 32
			m.LteGte |= uint64(dAtA[iNdEx-3]) << 40
			m.LteGte |= uint64(dAtA[iNdEx-2]) << 48
			m.LteGte |= uint64(dAtA[iNdEx-1]) << 56
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGtInv", wireType)
			}
			m.LtGtInv = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.LtGtInv = uint64(dAtA[iNdEx-8])
			m.LtGtInv |= uint64(dAtA[iNdEx-7]) << 8
			m.LtGtInv |= uint64(dAtA[iNdEx-6]) << 16
			m.LtGtInv |= uint64(dAtA[iNdEx-5]) << 24
			m.LtGtInv |= uint64(dAtA[iNdEx-4]) << 32
			m.LtGtInv |= uint64(dAtA[iNdEx-3]) << 40
			m.LtGtInv |= uint64(dAtA[iNdEx-2]) << 48
			m.LtGtInv |= uint64(dAtA[iNdEx-1]) << 56
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LtGteInv", wireType)
			}
			m.LtGteInv = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.LtGteInv = uint64(dAtA[iNdEx-8])
			m.LtGteInv |= uint64(dAtA[iNdEx-7]) << 8
			m.LtGteInv |= uint64(dAtA[iNdEx-6]) << 16
			m.LtGteInv |= uint64(dAtA[iNdEx-5]) << 24
			m.LtGteInv |= uint64(dAtA[iNdEx-4]) << 32
			m.LtGteInv |= uint64(dAtA[iNdEx-3]) << 40
			m.LtGteInv |= uint64(dAtA[iNdEx-2]) << 48
			m.LtGteInv |= uint64(dAtA[iNdEx-1]) << 56
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGtInv", wireType)
			}
			m.LteGtInv = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.LteGtInv = uint64(dAtA[iNdEx-8])
			m.LteGtInv |= uint64(dAtA[iNdEx-7]) << 8
			m.LteGtInv |= uint64(dAtA[iNdEx-6]) << 16
			m.LteGtInv |= uint64(dAtA[iNdEx-5]) << 24
			m.LteGtInv |= uint64(dAtA[iNdEx-4]) << 32
			m.LteGtInv |= uint64(dAtA[iNdEx-3]) << 40
			m.LteGtInv |= uint64(dAtA[iNdEx-2]) << 48
			m.LteGtInv |= uint64(dAtA[iNdEx-1]) << 56
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LteGteInv", wireType)
			}
			m.LteGteInv = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.LteGteInv = uint64(dAtA[iNdEx-8])
			m.LteGteInv |= uint64(dAtA[iNdEx-7]) << 8
			m.LteGteInv |= uint64(dAtA[iNdEx-6]) << 16
			m.LteGteInv |= uint64(dAtA[iNdEx-5]) << 24
			m.LteGteInv |= uint64(dAtA[iNdEx-4]) << 32
			m.LteGteInv |= uint64(dAtA[iNdEx-3]) << 40
			m.LteGteInv |= uint64(dAtA[iNdEx-2]) << 48
			m.LteGteInv |= uint64(dAtA[iNdEx-1]) << 56
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			m.In = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.In = uint64(dAtA[iNdEx-8])
			m.In |= uint64(dAtA[iNdEx-7]) << 8
			m.In |= uint64(dAtA[iNdEx-6]) << 16
			m.In |= uint64(dAtA[iNdEx-5]) << 24
			m.In |= uint64(dAtA[iNdEx-4]) << 32
			m.In |= uint64(dAtA[iNdEx-3]) << 40
			m.In |= uint64(dAtA[iNdEx-2]) << 48
			m.In |= uint64(dAtA[iNdEx-1]) << 56
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotIn", wireType)
			}
			m.NotIn = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.NotIn = uint64(dAtA[iNdEx-8])
			m.NotIn |= uint64(dAtA[iNdEx-7]) << 8
			m.NotIn |= uint64(dAtA[iNdEx-6]) << 16
			m.NotIn |= uint64(dAtA[iNdEx-5]) << 24
			m.NotIn |= uint64(dAtA[iNdEx-4]) << 32
			m.NotIn |= uint64(dAtA[iNdEx-3]) << 40
			m.NotIn |= uint64(dAtA[iNdEx-2]) << 48
			m.NotIn |= uint64(dAtA[iNdEx-1]) << 56
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			m.Const = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Const = uint64(dAtA[iNdEx-8])
			m.Const |= uint64(dAtA[iNdEx-7]) << 8
			m.Const |= uint64(dAtA[iNdEx-6]) << 16
			m.Const |= uint64(dAtA[iNdEx-5]) << 24
			m.Const |= uint64(dAtA[iNdEx-4]) << 32
			m.Const |= uint64(dAtA[iNdEx-3]) << 40
			m.Const |= uint64(dAtA[iNdEx-2]) << 48
			m.Const |= uint64(dAtA[iNdEx-1]) << 56
		default:
			iNdEx = preIndex
			skippy, err := skipFixed64(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFixed64
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFixed64(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFixed64
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFixed64
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFixed64
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFixed64
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFixed64
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFixed64(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFixed64 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFixed64   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fixed64.proto", fileDescriptorFixed64) }

var fileDescriptorFixed64 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbd, 0x6e, 0xea, 0x30,
	0x14, 0xc7, 0x6f, 0x02, 0x49, 0xc8, 0x01, 0x2e, 0x60, 0x21, 0x5d, 0xe7, 0x0e, 0x11, 0x70, 0xa5,
	0x2b, 0x32, 0x94, 0x16, 0xfa, 0x25, 0x56, 0x86, 0x22, 0xd6, 0xbc, 0x00, 0xa2, 0xe0, 0xa6, 0x11,
	0x91, 0x53, 0x35, 0x47, 0xa8, 0xcf, 0xd6, 0xa9, 0x63, 0xc7, 0xce, 0x9d, 0x2a, 0xb6, 0xbe, 0x45,
	0x65, 0xe7, 0x4b, 0x16, 0xc9, 0x64, 0xc5, 0xbf, 0xdf, 0xf9, 0x9f, 0x63, 0x1b, 0xda, 0x0f, 0xe1,
	0x0b, 0xdb, 0xdd, 0x5c, 0x4d, 0x9e, 0x9e, 0x63, 0x8c, 0x49, 0x0f, 0x59, 0x82, 0xc9, 0x64, 0x1f,
	0xe2, 0xf6, 0x91, 0xf1, 0x24, 0xe4, 0xfb, 0xbf, 0x7f, 0x0e, 0x9b, 0x28, 0xdc, 0x6d, 0x90, 0x9d,
	0xe7, 0x8b, 0x94, 0x1d, 0x7d, 0x1a, 0x60, 0xdd, 0xa5, 0x36, 0x21, 0x50, 0xe7, 0x31, 0x67, 0x54,
	0x1b, 0x68, 0x63, 0xd3, 0x97, 0x6b, 0x32, 0x00, 0x3d, 0x42, 0xaa, 0x8b, 0x3f, 0x8b, 0xee, 0xeb,
	0xf7, 0x5b, 0xad, 0xe9, 0xdb, 0x3d, 0xe3, 0x57, 0xfa, 0xf9, 0x7a, 0x84, 0x64, 0x04, 0xb5, 0x08,
	0x19, 0xad, 0x29, 0x88, 0x53, 0x20, 0x62, 0x53, 0x54, 0x09, 0x90, 0xd6, 0x15, 0x64, 0x58, 0x56,
	0x09, 0x64, 0x95, 0x00, 0x19, 0x35, 0x14, 0xc4, 0x2b, 0xab, 0x04, 0xc8, 0xc8, 0x04, 0x8c, 0x08,
	0xd7, 0x01, 0x52, 0x53, 0x52, 0x8e, 0xa0, 0xfa, 0x3e, 0xe9, 0x75, 0x32, 0x6a, 0x08, 0x39, 0x5e,
	0x8f, 0x70, 0x89, 0xe4, 0x02, 0x4c, 0xc9, 0x33, 0x6a, 0x55, 0x0b, 0x5e, 0x21, 0x18, 0x42, 0x60,
	0xa9, 0xc1, 0x44, 0x44, 0x43, 0x31, 0x9c, 0xd3, 0x08, 0x23, 0x42, 0xb6, 0x44, 0x32, 0x03, 0x2b,
	0x35, 0x18, 0xb5, 0xab, 0x95, 0x32, 0xc4, 0x94, 0x0a, 0x23, 0xd7, 0x60, 0xcb, 0xbe, 0xd6, 0x21,
	0x3f, 0x50, 0x50, 0x5b, 0xeb, 0xe7, 0x41, 0x4e, 0x6e, 0x59, 0xa2, 0xb5, 0x15, 0x3f, 0x90, 0x5b,
	0x80, 0x74, 0x1c, 0xe9, 0x35, 0xab, 0x3d, 0xaf, 0xf0, 0x1a, 0x72, 0xa4, 0x42, 0x64, 0x79, 0x60,
	0x4b, 0x6d, 0xf3, 0x34, 0xb0, 0x21, 0xdb, 0x14, 0xe2, 0x1c, 0x9a, 0xd9, 0x70, 0xd2, 0x6c, 0x57,
	0x9b, 0x65, 0xa4, 0x9d, 0x0e, 0x28, 0x54, 0x0f, 0xf4, 0x90, 0xd3, 0xdf, 0x8a, 0x31, 0x75, 0x33,
	0x70, 0xfa, 0xaf, 0xb8, 0xfa, 0x90, 0x8b, 0x43, 0xe7, 0xb1, 0xe8, 0x8d, 0x76, 0x14, 0x7c, 0x3e,
	0xce, 0xa8, 0xf9, 0x59, 0x71, 0xe8, 0x3c, 0xc6, 0x15, 0x27, 0xff, 0xc1, 0xd8, 0xc6, 0x3c, 0x41,
	0xda, 0x55, 0x9e, 0x8b, 0x3d, 0x2b, 0x38, 0xb9, 0xbd, 0x68, 0xbd, 0x1f, 0x5d, 0xed, 0xe3, 0xe8,
	0x6a, 0x5f, 0x47, 0x57, 0xbb, 0x37, 0xe5, 0x8b, 0xbf, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0xfb,
	0xba, 0x83, 0x53, 0x2e, 0x03, 0x00, 0x00,
}
