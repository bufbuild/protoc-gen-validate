// Code generated by protoc-gen-gogo.
// source: int32.proto
// DO NOT EDIT!

package tests_kitchensink

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Int32 struct {
	None      int32 `protobuf:"varint,1,opt,name=none,proto3" json:"none,omitempty"`
	Lt        int32 `protobuf:"varint,2,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte       int32 `protobuf:"varint,3,opt,name=lte,proto3" json:"lte,omitempty"`
	Gt        int32 `protobuf:"varint,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte       int32 `protobuf:"varint,5,opt,name=gte,proto3" json:"gte,omitempty"`
	LtGt      int32 `protobuf:"varint,6,opt,name=lt_gt,json=ltGt,proto3" json:"lt_gt,omitempty"`
	LtGte     int32 `protobuf:"varint,7,opt,name=lt_gte,json=ltGte,proto3" json:"lt_gte,omitempty"`
	LteGt     int32 `protobuf:"varint,8,opt,name=lte_gt,json=lteGt,proto3" json:"lte_gt,omitempty"`
	LteGte    int32 `protobuf:"varint,9,opt,name=lte_gte,json=lteGte,proto3" json:"lte_gte,omitempty"`
	LtGtInv   int32 `protobuf:"varint,10,opt,name=lt_gt_inv,json=ltGtInv,proto3" json:"lt_gt_inv,omitempty"`
	LtGteInv  int32 `protobuf:"varint,11,opt,name=lt_gte_inv,json=ltGteInv,proto3" json:"lt_gte_inv,omitempty"`
	LteGtInv  int32 `protobuf:"varint,12,opt,name=lte_gt_inv,json=lteGtInv,proto3" json:"lte_gt_inv,omitempty"`
	LteGteInv int32 `protobuf:"varint,13,opt,name=lte_gte_inv,json=lteGteInv,proto3" json:"lte_gte_inv,omitempty"`
	In        int32 `protobuf:"varint,14,opt,name=in,proto3" json:"in,omitempty"`
	NotIn     int32 `protobuf:"varint,15,opt,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	Const     int32 `protobuf:"varint,16,opt,name=const,proto3" json:"const,omitempty"`
}

func (m *Int32) Reset()                    { *m = Int32{} }
func (m *Int32) String() string            { return proto.CompactTextString(m) }
func (*Int32) ProtoMessage()               {}
func (*Int32) Descriptor() ([]byte, []int) { return fileDescriptorInt32, []int{0} }

func (m *Int32) GetNone() int32 {
	if m != nil {
		return m.None
	}
	return 0
}

func (m *Int32) GetLt() int32 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *Int32) GetLte() int32 {
	if m != nil {
		return m.Lte
	}
	return 0
}

func (m *Int32) GetGt() int32 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *Int32) GetGte() int32 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *Int32) GetLtGt() int32 {
	if m != nil {
		return m.LtGt
	}
	return 0
}

func (m *Int32) GetLtGte() int32 {
	if m != nil {
		return m.LtGte
	}
	return 0
}

func (m *Int32) GetLteGt() int32 {
	if m != nil {
		return m.LteGt
	}
	return 0
}

func (m *Int32) GetLteGte() int32 {
	if m != nil {
		return m.LteGte
	}
	return 0
}

func (m *Int32) GetLtGtInv() int32 {
	if m != nil {
		return m.LtGtInv
	}
	return 0
}

func (m *Int32) GetLtGteInv() int32 {
	if m != nil {
		return m.LtGteInv
	}
	return 0
}

func (m *Int32) GetLteGtInv() int32 {
	if m != nil {
		return m.LteGtInv
	}
	return 0
}

func (m *Int32) GetLteGteInv() int32 {
	if m != nil {
		return m.LteGteInv
	}
	return 0
}

func (m *Int32) GetIn() int32 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *Int32) GetNotIn() int32 {
	if m != nil {
		return m.NotIn
	}
	return 0
}

func (m *Int32) GetConst() int32 {
	if m != nil {
		return m.Const
	}
	return 0
}

func init() {
	proto.RegisterType((*Int32)(nil), "tests.kitchensink.Int32")
}

func init() { proto.RegisterFile("int32.proto", fileDescriptorInt32) }

var fileDescriptorInt32 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd2, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0x07, 0x70, 0x9a, 0x66, 0xd3, 0x64, 0xf2, 0x7d, 0x5f, 0xfb, 0x2d, 0x82, 0x9b, 0x16, 0x34,
	0x54, 0xc1, 0x88, 0x58, 0x4b, 0x7b, 0xe9, 0xd9, 0x4b, 0xe9, 0x75, 0x5e, 0xa0, 0xd4, 0xba, 0xc4,
	0xd0, 0x65, 0x23, 0x66, 0xe8, 0x3b, 0xf9, 0x0a, 0x9e, 0x7c, 0x1d, 0xdf, 0x42, 0x66, 0x63, 0x85,
	0xcd, 0x6d, 0x99, 0xf9, 0xcd, 0xfc, 0x87, 0x36, 0x90, 0x56, 0x96, 0x96, 0x8b, 0xd9, 0xeb, 0x5b,
	0x4d, 0xb5, 0xfc, 0x4f, 0xba, 0xa1, 0x66, 0x76, 0xa8, 0x68, 0xff, 0xa2, 0x6d, 0x53, 0xd9, 0xc3,
	0xf8, 0xfc, 0xb8, 0x33, 0xd5, 0xf3, 0x8e, 0xf4, 0xc3, 0xe9, 0xd1, 0xda, 0xe9, 0x7b, 0x08, 0x62,
	0xc3, 0xb3, 0x52, 0x42, 0x68, 0x6b, 0xab, 0x55, 0x2f, 0xef, 0x15, 0x02, 0xdd, 0x5b, 0x66, 0x10,
	0x18, 0x52, 0x01, 0x57, 0x1e, 0x93, 0x8f, 0xaf, 0xcf, 0x7e, 0x38, 0x0e, 0x46, 0x02, 0x03, 0x43,
	0x72, 0x02, 0x7d, 0x43, 0x5a, 0xf5, 0xbd, 0x9e, 0x12, 0xc8, 0x55, 0x9e, 0x2b, 0x49, 0x85, 0x5e,
	0x2f, 0x17, 0x18, 0x94, 0x6e, 0xae, 0x24, 0xad, 0x84, 0xd7, 0x2b, 0x04, 0x72, 0x55, 0xe6, 0x20,
	0x0c, 0x6d, 0x4b, 0x52, 0x91, 0x6b, 0xa7, 0xdc, 0x8e, 0xc6, 0xe1, 0x68, 0x98, 0x03, 0x86, 0x86,
	0xd6, 0x24, 0xa7, 0x10, 0x39, 0xa1, 0xd5, 0xa0, 0x43, 0x0a, 0x40, 0xc1, 0x44, 0xb7, 0x46, 0xf3,
	0x9a, 0xd8, 0x33, 0x8a, 0xd7, 0x08, 0x43, 0x7a, 0x4d, 0xf2, 0x1a, 0x06, 0xad, 0xd1, 0x2a, 0xe9,
	0xa0, 0x02, 0x30, 0x72, 0x48, 0xcb, 0x1b, 0x48, 0x5c, 0xda, 0xb6, 0xb2, 0x47, 0x05, 0x7e, 0xe0,
	0x59, 0x9e, 0xe1, 0x80, 0x03, 0x37, 0xf6, 0x28, 0x6f, 0x01, 0xda, 0xb3, 0x9c, 0x4c, 0x3b, 0xb2,
	0xc8, 0x30, 0x76, 0xa7, 0xfd, 0x52, 0x7d, 0x5a, 0xfa, 0xc7, 0x0f, 0xe7, 0xa5, 0xb1, 0x0b, 0x67,
	0x7a, 0x07, 0xe9, 0xcf, 0x91, 0xce, 0xfe, 0xed, 0xd8, 0x22, 0xc3, 0xa4, 0x3d, 0x94, 0xf1, 0x04,
	0x82, 0xca, 0xaa, 0x7f, 0x9e, 0x99, 0x5f, 0xcc, 0xaf, 0x30, 0xa8, 0x2c, 0xff, 0x24, 0xb6, 0xe6,
	0x44, 0x35, 0xf4, 0xc0, 0xaa, 0x58, 0xdd, 0xa3, 0xb0, 0x35, 0x6d, 0xac, 0xbc, 0x04, 0xb1, 0xaf,
	0x6d, 0x43, 0x6a, 0xe4, 0xfd, 0x37, 0xf1, 0x02, 0xdb, 0xfa, 0x53, 0xe4, 0x3e, 0x99, 0xe5, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xed, 0xbe, 0xd6, 0x6d, 0x02, 0x00, 0x00,
}
