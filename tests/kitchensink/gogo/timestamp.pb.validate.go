// Code generated by protoc-gen-validate
// source: timestamp.proto
// DO NOT EDIT!!!

package tests_kitchensink

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)

	_ = types.DynamicAny{}
)

// Validate checks the field values on Timestamp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Timestamp) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetNone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampValidationError{
				Field:  "None",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	if t := m.GetLt(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "Lt",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		lt := time.Unix(5, 0)

		if ts.Sub(lt) >= 0 {
			return TimestampValidationError{
				Field:  "Lt",
				Reason: "value must be less than 1970-01-01 00:00:05 +0000 UTC",
			}
		}

	}

	if t := m.GetLte(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "Lte",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		lte := time.Unix(5, 0)

		if ts.Sub(lte) > 0 {
			return TimestampValidationError{
				Field:  "Lte",
				Reason: "value must be less than or equal to 1970-01-01 00:00:05 +0000 UTC",
			}
		}

	}

	if t := m.GetGt(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "Gt",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		gt := time.Unix(5, 0)

		if ts.Sub(gt) <= 0 {
			return TimestampValidationError{
				Field:  "Gt",
				Reason: "value must be greater than 1970-01-01 00:00:05 +0000 UTC",
			}
		}

	}

	if t := m.GetGte(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "Gte",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		gte := time.Unix(5, 0)

		if ts.Sub(gte) < 0 {
			return TimestampValidationError{
				Field:  "Gte",
				Reason: "value must be greater than or equal to 1970-01-01 00:00:05 +0000 UTC",
			}
		}

	}

	if t := m.GetLtGt(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "LtGt",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		lt := time.Unix(15, 0)
		gt := time.Unix(10, 0)

		if ts.Sub(gt) <= 0 || ts.Sub(lt) >= 0 {
			return TimestampValidationError{
				Field:  "LtGt",
				Reason: "value must be inside range (1970-01-01 00:00:10 +0000 UTC, 1970-01-01 00:00:15 +0000 UTC)",
			}
		}

	}

	if t := m.GetLtGte(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "LtGte",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		lt := time.Unix(15, 0)
		gte := time.Unix(10, 0)

		if ts.Sub(gte) < 0 || ts.Sub(lt) >= 0 {
			return TimestampValidationError{
				Field:  "LtGte",
				Reason: "value must be inside range [1970-01-01 00:00:10 +0000 UTC, 1970-01-01 00:00:15 +0000 UTC)",
			}
		}

	}

	if t := m.GetLteGt(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "LteGt",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		lte := time.Unix(15, 0)
		gt := time.Unix(10, 0)

		if ts.Sub(gt) <= 0 || ts.Sub(lte) > 0 {
			return TimestampValidationError{
				Field:  "LteGt",
				Reason: "value must be inside range (1970-01-01 00:00:10 +0000 UTC, 1970-01-01 00:00:15 +0000 UTC]",
			}
		}

	}

	if t := m.GetLteGte(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "LteGte",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		lte := time.Unix(15, 0)
		gte := time.Unix(10, 0)

		if ts.Sub(gte) < 0 || ts.Sub(lte) > 0 {
			return TimestampValidationError{
				Field:  "LteGte",
				Reason: "value must be inside range [1970-01-01 00:00:10 +0000 UTC, 1970-01-01 00:00:15 +0000 UTC]",
			}
		}

	}

	if t := m.GetLtGtInv(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "LtGtInv",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		lt := time.Unix(20, 0)
		gt := time.Unix(25, 0)

		if ts.Sub(lt) >= 0 && ts.Sub(gt) <= 0 {
			return TimestampValidationError{
				Field:  "LtGtInv",
				Reason: "value must be outside range [1970-01-01 00:00:20 +0000 UTC, 1970-01-01 00:00:25 +0000 UTC]",
			}
		}

	}

	if t := m.GetLtGteInv(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "LtGteInv",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		lt := time.Unix(20, 0)
		gte := time.Unix(25, 0)

		if ts.Sub(lt) >= 0 && ts.Sub(gte) < 0 {
			return TimestampValidationError{
				Field:  "LtGteInv",
				Reason: "value must be outside range [1970-01-01 00:00:20 +0000 UTC, 1970-01-01 00:00:25 +0000 UTC)",
			}
		}

	}

	if t := m.GetLteGtInv(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "LteGtInv",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		lte := time.Unix(20, 0)
		gt := time.Unix(25, 0)

		if ts.Sub(lte) > 0 && ts.Sub(gt) <= 0 {
			return TimestampValidationError{
				Field:  "LteGtInv",
				Reason: "value must be outside range (1970-01-01 00:00:20 +0000 UTC, 1970-01-01 00:00:25 +0000 UTC]",
			}
		}

	}

	if t := m.GetLteGteInv(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "LteGteInv",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		lte := time.Unix(20, 0)
		gte := time.Unix(25, 0)

		if ts.Sub(lte) > 0 && ts.Sub(gte) < 0 {
			return TimestampValidationError{
				Field:  "LteGteInv",
				Reason: "value must be outside range (1970-01-01 00:00:20 +0000 UTC, 1970-01-01 00:00:25 +0000 UTC)",
			}
		}

	}

	if m.GetRequired() == nil {
		return TimestampValidationError{
			Field:  "Required",
			Reason: "value is required",
		}
	}

	if t := m.GetLtNow(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "LtNow",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		now := time.Now()

		if ts.Sub(now) >= 0 {
			return TimestampValidationError{
				Field:  "LtNow",
				Reason: "value must be less than now",
			}
		}

	}

	if t := m.GetGtNow(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "GtNow",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		now := time.Now()

		if ts.Sub(now) <= 0 {
			return TimestampValidationError{
				Field:  "GtNow",
				Reason: "value must be greater than now",
			}
		}

	}

	if t := m.GetLtNowWithin(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "LtNowWithin",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		now := time.Now()
		within := time.Duration(300*time.Second + 0*time.Nanosecond)

		if ts.Sub(now) >= 0 || ts.Sub(now.Add(-within)) < 0 {
			return TimestampValidationError{
				Field:  "LtNowWithin",
				Reason: "value must be less than now within 5m0s",
			}
		}

	}

	if t := m.GetGtNowWithin(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "GtNowWithin",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		now := time.Now()
		within := time.Duration(3000*time.Second + 0*time.Nanosecond)

		if ts.Sub(now) >= 0 || ts.Sub(now.Add(within)) > 0 {
			return TimestampValidationError{
				Field:  "GtNowWithin",
				Reason: "value must be greater than now within 50m0s",
			}
		}

	}

	if t := m.GetWithin(); t != nil {
		ts, err := types.TimestampFromProto(t)
		if err != nil {
			return TimestampValidationError{
				Field:  "Within",
				Reason: "value is not a valid timestamp",
				Cause:  err,
			}
		}

		now := time.Now()
		within := time.Duration(30000*time.Second + 0*time.Nanosecond)

		if ts.Sub(now.Add(within)) >= 0 || ts.Sub(now.Add(-within)) <= 0 {
			return TimestampValidationError{
				Field:  "Within",
				Reason: "value must be within 8h20m0s of now",
			}
		}

	}

	return nil
}

// TimestampValidationError is the validation error returned by
// Timestamp.Validate if the designated constraints aren't met.
type TimestampValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e TimestampValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestamp.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = TimestampValidationError{}
