// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tests/harness/cases/wkt_wrappers.proto

package cases

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on WrapperNone with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WrapperNone) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WrapperNoneValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WrapperNoneValidationError is the validation error returned by
// WrapperNone.Validate if the designated constraints aren't met.
type WrapperNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WrapperNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WrapperNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WrapperNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WrapperNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WrapperNoneValidationError) ErrorName() string { return "WrapperNoneValidationError" }

// Error satisfies the builtin error interface
func (e WrapperNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWrapperNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WrapperNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WrapperNoneValidationError{}

// Validate checks the field values on WrapperFloat with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WrapperFloat) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WrapperFloatValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WrapperFloatValidationError is the validation error returned by
// WrapperFloat.Validate if the designated constraints aren't met.
type WrapperFloatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WrapperFloatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WrapperFloatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WrapperFloatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WrapperFloatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WrapperFloatValidationError) ErrorName() string { return "WrapperFloatValidationError" }

// Error satisfies the builtin error interface
func (e WrapperFloatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWrapperFloat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WrapperFloatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WrapperFloatValidationError{}

// Validate checks the field values on WrapperDouble with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WrapperDouble) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WrapperDoubleValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WrapperDoubleValidationError is the validation error returned by
// WrapperDouble.Validate if the designated constraints aren't met.
type WrapperDoubleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WrapperDoubleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WrapperDoubleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WrapperDoubleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WrapperDoubleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WrapperDoubleValidationError) ErrorName() string { return "WrapperDoubleValidationError" }

// Error satisfies the builtin error interface
func (e WrapperDoubleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWrapperDouble.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WrapperDoubleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WrapperDoubleValidationError{}

// Validate checks the field values on WrapperInt64 with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WrapperInt64) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WrapperInt64ValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WrapperInt64ValidationError is the validation error returned by
// WrapperInt64.Validate if the designated constraints aren't met.
type WrapperInt64ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WrapperInt64ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WrapperInt64ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WrapperInt64ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WrapperInt64ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WrapperInt64ValidationError) ErrorName() string { return "WrapperInt64ValidationError" }

// Error satisfies the builtin error interface
func (e WrapperInt64ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWrapperInt64.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WrapperInt64ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WrapperInt64ValidationError{}

// Validate checks the field values on WrapperInt32 with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WrapperInt32) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WrapperInt32ValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WrapperInt32ValidationError is the validation error returned by
// WrapperInt32.Validate if the designated constraints aren't met.
type WrapperInt32ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WrapperInt32ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WrapperInt32ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WrapperInt32ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WrapperInt32ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WrapperInt32ValidationError) ErrorName() string { return "WrapperInt32ValidationError" }

// Error satisfies the builtin error interface
func (e WrapperInt32ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWrapperInt32.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WrapperInt32ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WrapperInt32ValidationError{}

// Validate checks the field values on WrapperUInt64 with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WrapperUInt64) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WrapperUInt64ValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WrapperUInt64ValidationError is the validation error returned by
// WrapperUInt64.Validate if the designated constraints aren't met.
type WrapperUInt64ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WrapperUInt64ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WrapperUInt64ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WrapperUInt64ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WrapperUInt64ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WrapperUInt64ValidationError) ErrorName() string { return "WrapperUInt64ValidationError" }

// Error satisfies the builtin error interface
func (e WrapperUInt64ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWrapperUInt64.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WrapperUInt64ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WrapperUInt64ValidationError{}

// Validate checks the field values on WrapperUInt32 with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WrapperUInt32) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WrapperUInt32ValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WrapperUInt32ValidationError is the validation error returned by
// WrapperUInt32.Validate if the designated constraints aren't met.
type WrapperUInt32ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WrapperUInt32ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WrapperUInt32ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WrapperUInt32ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WrapperUInt32ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WrapperUInt32ValidationError) ErrorName() string { return "WrapperUInt32ValidationError" }

// Error satisfies the builtin error interface
func (e WrapperUInt32ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWrapperUInt32.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WrapperUInt32ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WrapperUInt32ValidationError{}

// Validate checks the field values on WrapperBool with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WrapperBool) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WrapperBoolValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WrapperBoolValidationError is the validation error returned by
// WrapperBool.Validate if the designated constraints aren't met.
type WrapperBoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WrapperBoolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WrapperBoolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WrapperBoolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WrapperBoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WrapperBoolValidationError) ErrorName() string { return "WrapperBoolValidationError" }

// Error satisfies the builtin error interface
func (e WrapperBoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWrapperBool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WrapperBoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WrapperBoolValidationError{}

// Validate checks the field values on WrapperString with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WrapperString) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WrapperStringValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WrapperStringValidationError is the validation error returned by
// WrapperString.Validate if the designated constraints aren't met.
type WrapperStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WrapperStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WrapperStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WrapperStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WrapperStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WrapperStringValidationError) ErrorName() string { return "WrapperStringValidationError" }

// Error satisfies the builtin error interface
func (e WrapperStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWrapperString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WrapperStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WrapperStringValidationError{}

// Validate checks the field values on WrapperBytes with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WrapperBytes) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WrapperBytesValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WrapperBytesValidationError is the validation error returned by
// WrapperBytes.Validate if the designated constraints aren't met.
type WrapperBytesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WrapperBytesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WrapperBytesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WrapperBytesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WrapperBytesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WrapperBytesValidationError) ErrorName() string { return "WrapperBytesValidationError" }

// Error satisfies the builtin error interface
func (e WrapperBytesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWrapperBytes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WrapperBytesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WrapperBytesValidationError{}

// Validate checks the field values on WrapperRequired with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *WrapperRequired) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() == nil {
		return WrapperRequiredValidationError{
			field:  "Val",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WrapperRequiredValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WrapperRequiredValidationError is the validation error returned by
// WrapperRequired.Validate if the designated constraints aren't met.
type WrapperRequiredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WrapperRequiredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WrapperRequiredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WrapperRequiredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WrapperRequiredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WrapperRequiredValidationError) ErrorName() string { return "WrapperRequiredValidationError" }

// Error satisfies the builtin error interface
func (e WrapperRequiredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWrapperRequired.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WrapperRequiredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WrapperRequiredValidationError{}
