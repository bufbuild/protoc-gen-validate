
#-*- coding: utf-8 -*-
#Code generated by protoc-gen-validate. DO NOT EDIT.
#Source: tests/harness/cases/messages.proto
import datetime
import struct
import re
from validate_email import validate_email
import ipaddress
try:
	import urlparse
except ImportError:
	import urllib.parse as urlparse
import uuid
from tests.harness.cases.messages_pb2 import *
from google.protobuf.timestamp_pb2 import Timestamp
from google.protobuf.duration_pb2 import Duration
from google.protobuf.internal import enum_type_wrapper
EMPTY_TIMESTAMP = Timestamp()
EMPTY_DURATION = Duration()

class UnimplementedException(Exception):
	def __init__(self):
		self.name = "UnimplementedException"

def unicode_len(s):
	try:
		return len(s.decode('utf-8'))
	except:
		return len(s)

def byte_len(s):
	try:
		return len(s.encode('utf-8'))
	except:
		return len(s)




	
 	
	
 
	
 	
	
 





def validate_TestMsg(m):
	# Validate checks the field values with the rules defined in the proto definition for this message. If any rules are violated, an error is returned.
	
	
		
	

	if m.const != "foo":
		return False, '''[value must equal  foo]'''




	

	
	
	

	

	
	
	

	

	
		
	
	
	

	
	try:
		if not validate_TestMsg(m.nested):
			return False, '''[embedded message failed validation]'''
	except NameError:
		raise UnimplementedException()
	

	
	
	return True, ""



	
 	
	
 





def validate_MessageNone(m):
	# Validate checks the field values with the rules defined in the proto definition for this message. If any rules are violated, an error is returned.
	
	
		
	
	
	

	
	try:
		if not validate_NoneMsg(m.val):
			return False, '''[embedded message failed validation]'''
	except NameError:
		raise UnimplementedException()
	

	
	
	return True, ""



	
 	
	
 





def validate_MessageDisabled(m):
	# Validate is disabled. This method will always return nil.
	return True, ""
	
	
		
	


	
	
	if m.val <= 123:
		return False, '''[value must be greater than  123]'''
	

	


	
	
	return True, ""



	
 	
	
 





def validate_Message(m):
	# Validate checks the field values with the rules defined in the proto definition for this message. If any rules are violated, an error is returned.
	
	
		
	
	
	

	
	try:
		if not validate_TestMsg(m.val):
			return False, '''[embedded message failed validation]'''
	except NameError:
		raise UnimplementedException()
	

	
	
	return True, ""



	
 	
	
 





def validate_MessageCrossPackage(m):
	# Validate checks the field values with the rules defined in the proto definition for this message. If any rules are violated, an error is returned.
	
	
		
	
	
	

	
	try:
		if not validate_Embed(m.val):
			return False, '''[embedded message failed validation]'''
	except NameError:
		raise UnimplementedException()
	

	
	
	return True, ""



	
 	
	
 





def validate_MessageSkip(m):
	# Validate checks the field values with the rules defined in the proto definition for this message. If any rules are violated, an error is returned.
	
	
		
	
	
	

	
	# Skipping validation for val
	

	
	
	return True, ""



	
 	
	
 





def validate_MessageRequired(m):
	# Validate checks the field values with the rules defined in the proto definition for this message. If any rules are violated, an error is returned.
	
	
		
	
	
	
	if m.val:
		print "HERE"
		return False, '''[value is required]'''
	

	
	try:
		if not validate_TestMsg(m.val):
			return False, '''[embedded message failed validation]'''
	except NameError:
		raise UnimplementedException()
	

	
	
	return True, ""








def validate_MessageWith3dInside(m):
	# Validate checks the field values with the rules defined in the proto definition for this message. If any rules are violated, an error is returned.
	
	
	
	return True, ""








def validate_NoneMsg(m):
	# Validate checks the field values with the rules defined in the proto definition for this message. If any rules are violated, an error is returned.
	
	
	
	return True, ""


