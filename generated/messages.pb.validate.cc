// Code generated by protoc-gen-validate
// source: tests/harness/cases/messages.proto
// DO NOT EDIT!!!

#include "tests/harness/cases/messages.pb.validate.h"

#include <google/protobuf/message.h>
#include <google/protobuf/util/time_util.h>

namespace pgv {

namespace protobuf = google::protobuf;
namespace protobuf_wkt = google::protobuf;

namespace validate {
using std::string;

pgv::Validator<::tests::harness::cases::TestMsg> validator___tests__harness__cases__TestMsg(static_cast<bool(*)(const ::tests::harness::cases::TestMsg&, pgv::ValidationMsg*)>(::tests::harness::cases::Validate));


pgv::Validator<::tests::harness::cases::MessageNone> validator___tests__harness__cases__MessageNone(static_cast<bool(*)(const ::tests::harness::cases::MessageNone&, pgv::ValidationMsg*)>(::tests::harness::cases::Validate));



pgv::Validator<::tests::harness::cases::Message> validator___tests__harness__cases__Message(static_cast<bool(*)(const ::tests::harness::cases::Message&, pgv::ValidationMsg*)>(::tests::harness::cases::Validate));


pgv::Validator<::tests::harness::cases::MessageCrossPackage> validator___tests__harness__cases__MessageCrossPackage(static_cast<bool(*)(const ::tests::harness::cases::MessageCrossPackage&, pgv::ValidationMsg*)>(::tests::harness::cases::Validate));


pgv::Validator<::tests::harness::cases::MessageSkip> validator___tests__harness__cases__MessageSkip(static_cast<bool(*)(const ::tests::harness::cases::MessageSkip&, pgv::ValidationMsg*)>(::tests::harness::cases::Validate));


pgv::Validator<::tests::harness::cases::MessageRequired> validator___tests__harness__cases__MessageRequired(static_cast<bool(*)(const ::tests::harness::cases::MessageRequired&, pgv::ValidationMsg*)>(::tests::harness::cases::Validate));


pgv::Validator<::tests::harness::cases::MessageWith3dInside> validator___tests__harness__cases__MessageWith3dInside(static_cast<bool(*)(const ::tests::harness::cases::MessageWith3dInside&, pgv::ValidationMsg*)>(::tests::harness::cases::Validate));


pgv::Validator<::tests::harness::cases::MessageNone_NoneMsg> validator___tests__harness__cases__MessageNone_NoneMsg(static_cast<bool(*)(const ::tests::harness::cases::MessageNone_NoneMsg&, pgv::ValidationMsg*)>(::tests::harness::cases::Validate));




} // namespace validate
} // namespace pgv


namespace tests {
namespace harness {
namespace cases {


// Validate checks the field values on ::tests::harness::cases::TestMsg with
// the rules defined in the proto definition for this message. If any rules
// are violated, the return value is false and an error message is written to
// the input string argument.

	

	

	

	

	


	

	

	

	

	



bool Validate(const ::tests::harness::cases::TestMsg& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	
		if (m.const_() != "foo") {
			{
std::ostringstream msg("invalid ");
msg << "TestMsgValidationError" << "." << "Const";
msg << ": " << "[\"value must equal \" \"foo\"]";
*err = msg.str();
return false;
}
		}
	

	

	

	

	

	

	

	

	

	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_nested() && !pgv::Validator<::tests::harness::cases::TestMsg>::CheckMessage(m.nested(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "TestMsgValidationError" << "." << "Nested";
msg << ": " << "[\"embedded message failed validation\"]";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

	return true;
}





// Validate checks the field values on ::tests::harness::cases::MessageNone
// with the rules defined in the proto definition for this message. If any
// rules are violated, the return value is false and an error message is
// written to the input string argument.

	

	

	

	

	



bool Validate(const ::tests::harness::cases::MessageNone& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_val() && !pgv::Validator<::tests::harness::cases::MessageNone_NoneMsg>::CheckMessage(m.val(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "MessageNoneValidationError" << "." << "Val";
msg << ": " << "[\"embedded message failed validation\"]";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

	return true;
}





// Validate is disabled for ::tests::harness::cases::MessageDisabled. This
// method will always return true.

	

	

	

	

	



bool Validate(const ::tests::harness::cases::MessageDisabled& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	return true;
}





// Validate checks the field values on ::tests::harness::cases::Message with
// the rules defined in the proto definition for this message. If any rules
// are violated, the return value is false and an error message is written to
// the input string argument.

	

	

	

	

	



bool Validate(const ::tests::harness::cases::Message& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_val() && !pgv::Validator<::tests::harness::cases::TestMsg>::CheckMessage(m.val(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "MessageValidationError" << "." << "Val";
msg << ": " << "[\"embedded message failed validation\"]";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

	return true;
}





// Validate checks the field values on
// ::tests::harness::cases::MessageCrossPackage with the rules defined in the
// proto definition for this message. If any rules are violated, the return
// value is false and an error message is written to the input string argument.

	

	

	

	

	



bool Validate(const ::tests::harness::cases::MessageCrossPackage& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_val() && !pgv::Validator<::tests::harness::cases::other_package::Embed>::CheckMessage(m.val(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "MessageCrossPackageValidationError" << "." << "Val";
msg << ": " << "[\"embedded message failed validation\"]";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

	return true;
}





// Validate checks the field values on ::tests::harness::cases::MessageSkip
// with the rules defined in the proto definition for this message. If any
// rules are violated, the return value is false and an error message is
// written to the input string argument.

	

	

	

	

	



bool Validate(const ::tests::harness::cases::MessageSkip& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	

	
		// skipping validation for val
	

	return true;
}





// Validate checks the field values on ::tests::harness::cases::MessageRequired
// with the rules defined in the proto definition for this message. If any
// rules are violated, the return value is false and an error message is
// written to the input string argument.

	

	

	

	

	



bool Validate(const ::tests::harness::cases::MessageRequired& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	
	
	
		if (!m.has_val()) {
			{
std::ostringstream msg("invalid ");
msg << "MessageRequiredValidationError" << "." << "Val";
msg << ": " << "[\"value is required\"]";
*err = msg.str();
return false;
}
		}
	

	
	{
		pgv::ValidationMsg inner_err;
		if (m.has_val() && !pgv::Validator<::tests::harness::cases::TestMsg>::CheckMessage(m.val(), &inner_err)) {
			{
std::ostringstream msg("invalid ");
msg << "MessageRequiredValidationError" << "." << "Val";
msg << ": " << "[\"embedded message failed validation\"]";
msg << " | caused by " << inner_err;
*err = msg.str();
return false;
}
		}
	}
	

	return true;
}





// Validate checks the field values on
// ::tests::harness::cases::MessageWith3dInside with the rules defined in the
// proto definition for this message. If any rules are violated, the return
// value is false and an error message is written to the input string argument.


bool Validate(const ::tests::harness::cases::MessageWith3dInside& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	return true;
}





// Validate checks the field values on
// ::tests::harness::cases::MessageNone_NoneMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the return
// value is false and an error message is written to the input string argument.


bool Validate(const ::tests::harness::cases::MessageNone_NoneMsg& m, pgv::ValidationMsg* err) {
	(void)m;
	(void)err;
	return true;
}






} // namespace
} // namespace
} // namespace

