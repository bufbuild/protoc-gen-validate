
#-*- coding: utf-8 -*-
#Code generated by protoc-gen-validate. DO NOT EDIT.
#Source: tests/harness/cases/wkt_wrappers.proto
import datetime
import struct
import re
from validate_email import validate_email
import ipaddress
try:
	import urlparse
except ImportError:
	import urllib.parse as urlparse
import uuid
from tests.harness.cases.wkt_wrappers_pb2 import *
from google.protobuf.timestamp_pb2 import Timestamp
from google.protobuf.duration_pb2 import Duration
from google.protobuf.internal import enum_type_wrapper
EMPTY_TIMESTAMP = Timestamp()
EMPTY_DURATION = Duration()

class UnimplementedException(Exception):
	def __init__(self):
		self.name = "UnimplementedException"

def unicode_len(s):
	try:
		return len(s.decode('utf-8'))
	except:
		return len(s)

def byte_len(s):
	try:
		return len(s.encode('utf-8'))
	except:
		return len(s)




	
 	
	
 





def validate_WrapperNone(m):
	
		
	raise UnimplementedException()

	
	
	return True, ""
	


	
 	
	
 





def validate_WrapperFloat(m):
	
		
	wrapper = m.val
	
	if not wrapper:
		return True, ""
		
	
	


	
	
	if wrapper.GetValue() <= 0:
		return False, '''[value must be greater than  0]'''
	

	



	
	
	return True, ""
	


	
 	
	
 





def validate_WrapperDouble(m):
	
		
	wrapper = m.val
	
	if not wrapper:
		return True, ""
		
	
	


	
	
	if wrapper.GetValue() <= 0:
		return False, '''[value must be greater than  0]'''
	

	



	
	
	return True, ""
	


	
 	
	
 





def validate_WrapperInt64(m):
	
		
	wrapper = m.val
	
	if not wrapper:
		return True, ""
		
	
	


	
	
	if wrapper.GetValue() <= 0:
		return False, '''[value must be greater than  0]'''
	

	



	
	
	return True, ""
	


	
 	
	
 





def validate_WrapperInt32(m):
	
		
	wrapper = m.val
	
	if not wrapper:
		return True, ""
		
	
	


	
	
	if wrapper.GetValue() <= 0:
		return False, '''[value must be greater than  0]'''
	

	



	
	
	return True, ""
	


	
 	
	
 





def validate_WrapperUInt64(m):
	
		
	wrapper = m.val
	
	if not wrapper:
		return True, ""
		
	
	


	
	
	if wrapper.GetValue() <= 0:
		return False, '''[value must be greater than  0]'''
	

	



	
	
	return True, ""
	


	
 	
	
 





def validate_WrapperUInt32(m):
	
		
	wrapper = m.val
	
	if not wrapper:
		return True, ""
		
	
	


	
	
	if wrapper.GetValue() <= 0:
		return False, '''[value must be greater than  0]'''
	

	



	
	
	return True, ""
	


	
 	
	
 





def validate_WrapperBool(m):
	
		
	wrapper = m.val
	
	if not wrapper:
		return True, ""
		
	

	if wrapper.GetValue() != True:
		return False, '''[value must equal  true]'''



	
	
	return True, ""
	


	
 	
	
 





def validate_WrapperString(m):
	
		
	wrapper = m.val
	
	if not wrapper:
		return True, ""
		
	
	




	

	
	
	

	
	if not wrapper.GetValue().endswith( "bar" ):
		return False, '''[value does not have prefix  "bar"]'''
	

	
	
	

	


	
	
	return True, ""
	


	
 	
	
 





def validate_WrapperBytes(m):
	
		
	wrapper = m.val
	
	if not wrapper:
		return True, ""
		
	
	raise UnimplementedException()


	
	
	return True, ""
	

