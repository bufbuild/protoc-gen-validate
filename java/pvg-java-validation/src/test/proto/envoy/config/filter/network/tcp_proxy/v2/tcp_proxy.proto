syntax = "proto3";

package envoy.config.filter.network.tcp_proxy.v2;
option go_package = "v2";

import "envoy/config/filter/accesslog/v2/accesslog.proto";
import "envoy/api/v2/core/address.proto";
import "envoy/api/v2/core/base.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

import "validate/validate.proto";
import "gogoproto/gogo.proto";

// [#protodoc-title: TCP Proxy]
// TCP Proxy :ref:`configuration overview <config_network_filters_tcp_proxy>`.

message TcpProxy {
  // The prefix to use when emitting :ref:`statistics
  // <config_network_filters_tcp_proxy_stats>`.
  string stat_prefix = 1 [(validate.rules).string.min_bytes = 1];

  oneof cluster_specifier {
    option (validate.required) = true;

    // The upstream cluster to connect to.
    //
    // .. note::
    //
    //  Once full filter chain matching is implemented in listeners, this field will become the only
    //  way to configure the target cluster. All other matching will be done via :ref:`filter chain
    //  matching rules <envoy_api_msg_listener.FilterChainMatch>`. For very simple configurations,
    //  this field can still be used to select the cluster when no other matching rules are
    //  required. Otherwise, a :ref:`deprecated_v1
    //  <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.deprecated_v1>` configuration
    //  is required to use more complex routing in the interim.
    //
    string cluster = 2;

    // Multiple upstream clusters can be specified for a given route. The
    // request is routed to one of the upstream clusters based on weights
    // assigned to each cluster.
    //
    // .. note::
    //
    //  This field is ignored if the :ref:`deprecated_v1
    //  <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.deprecated_v1>`
    //  configuration is set.
    WeightedCluster weighted_clusters = 10;
  }

  // Optional endpoint metadata match criteria. Only endpoints in the upstream
  // cluster with metadata matching that set in metadata_match will be
  // considered. The filter name should be specified as *envoy.lb*.
  envoy.api.v2.core.Metadata metadata_match = 9;

  // The idle timeout for connections managed by the TCP proxy filter. The idle timeout
  // is defined as the period in which there are no bytes sent or received on either
  // the upstream or downstream connection. If not set, connections will never be closed
  // by the TCP proxy due to being idle.
  google.protobuf.Duration idle_timeout = 8
      [(validate.rules).duration.gt = {}, (gogoproto.stdduration) = true];

  // [#not-implemented-hide:] The idle timeout for connections managed by the TCP proxy
  // filter. The idle timeout is defined as the period in which there is no
  // active traffic. If not set, there is no idle timeout. When the idle timeout
  // is reached the connection will be closed. The distinction between
  // downstream_idle_timeout/upstream_idle_timeout provides a means to set
  // timeout based on the last byte sent on the downstream/upstream connection.
  google.protobuf.Duration downstream_idle_timeout = 3;

  // [#not-implemented-hide:]
  google.protobuf.Duration upstream_idle_timeout = 4;

  // Configuration for :ref:`access logs <arch_overview_access_logs>`
  // emitted by the this tcp_proxy.
  repeated envoy.config.filter.accesslog.v2.AccessLog access_log = 5;

  // TCP Proxy filter configuration using V1 format, until Envoy gets the
  // ability to match source/destination at the listener level (called
  // :ref:`filter chain match <envoy_api_msg_listener.FilterChainMatch>`).
  message DeprecatedV1 {
    // A TCP proxy route consists of a set of optional L4 criteria and the
    // name of a cluster. If a downstream connection matches all the
    // specified criteria, the cluster in the route is used for the
    // corresponding upstream connection. Routes are tried in the order
    // specified until a match is found. If no match is found, the connection
    // is closed. A route with no criteria is valid and always produces a
    // match.
    message TCPRoute {
      // The cluster to connect to when a the downstream network connection
      // matches the specified criteria.
      string cluster = 1 [(validate.rules).string.min_bytes = 1];

      // An optional list of IP address subnets in the form
      // “ip_address/xx”. The criteria is satisfied if the destination IP
      // address of the downstream connection is contained in at least one of
      // the specified subnets. If the parameter is not specified or the list
      // is empty, the destination IP address is ignored. The destination IP
      // address of the downstream connection might be different from the
      // addresses on which the proxy is listening if the connection has been
      // redirected.
      repeated envoy.api.v2.core.CidrRange destination_ip_list = 2;

      // An optional string containing a comma-separated list of port numbers
      // or ranges. The criteria is satisfied if the destination port of the
      // downstream connection is contained in at least one of the specified
      // ranges. If the parameter is not specified, the destination port is
      // ignored. The destination port address of the downstream connection
      // might be different from the port on which the proxy is listening if
      // the connection has been redirected.
      string destination_ports = 3;

      // An optional list of IP address subnets in the form
      // “ip_address/xx”. The criteria is satisfied if the source IP address
      // of the downstream connection is contained in at least one of the
      // specified subnets. If the parameter is not specified or the list is
      // empty, the source IP address is ignored.
      repeated envoy.api.v2.core.CidrRange source_ip_list = 4;

      // An optional string containing a comma-separated list of port numbers
      // or ranges. The criteria is satisfied if the source port of the
      // downstream connection is contained in at least one of the specified
      // ranges. If the parameter is not specified, the source port is
      // ignored.
      string source_ports = 5;
    }

    // The route table for the filter. All filter instances must have a route
    // table, even if it is empty.
    repeated TCPRoute routes = 1 [(validate.rules).repeated .min_items = 1];
  }

  // TCP Proxy filter configuration using deprecated V1 format. This is required for complex
  // routing until filter chain matching in the listener is implemented.
  //
  // .. attention::
  //
  //   Using this field will lead to `problems loading the configuration
  //   <https://github.com/envoyproxy/envoy/issues/2441>`_. If you want to configure the filter
  //   using v1 config structure, please make this field a boolean with value ``true`` and configure
  //   via the opaque ``value`` field like is suggested in :api:`envoy/config/filter/README.md`.
  DeprecatedV1 deprecated_v1 = 6 [deprecated = true];

  // The maximum number of unsuccessful connection attempts that will be made before
  // giving up. If the parameter is not specified, 1 connection attempt will be made.
  google.protobuf.UInt32Value max_connect_attempts = 7 [(validate.rules).uint32.gte = 1];

  // Allows for specification of multiple upstream clusters along with weights
  // that indicate the percentage of traffic to be forwarded to each cluster.
  // The router selects an upstream cluster based on these weights.
  message WeightedCluster {
    message ClusterWeight {
      // Name of the upstream cluster.
      string name = 1 [(validate.rules).string.min_bytes = 1];

      // When a request matches the route, the choice of an upstream cluster is
      // determined by its weight. The sum of weights across all entries in the
      // clusters array determines the total weight.
      uint32 weight = 2 [(validate.rules).uint32.gte = 1];
    }

    // Specifies one or more upstream clusters associated with the route.
    repeated ClusterWeight clusters = 1 [(validate.rules).repeated .min_items = 1];
  }
}
